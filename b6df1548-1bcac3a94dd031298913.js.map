{"version":3,"file":"b6df1548-1bcac3a94dd031298913.js","mappings":"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","sources":["webpack://@react-babylonjs/docs/../../node_modules/@babylonjs/core/Meshes/mesh.js"],"sourcesContent":["import _assertThisInitialized from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _inherits from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _possibleConstructorReturn from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _getPrototypeOf from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _createClass from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _regeneratorRuntime from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/regenerator/index.js\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { Observable } from \"../Misc/observable.js\";\nimport { Tools, AsyncLoop } from \"../Misc/tools.js\";\nimport { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { Tags } from \"../Misc/tags.js\";\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine.js\";\nimport { Camera } from \"../Cameras/camera.js\";\nimport { ScenePerformancePriority } from \"../scene.js\";\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Node } from \"../node.js\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"./mesh.vertexData.js\";\nimport { Geometry } from \"./geometry.js\";\nimport { AbstractMesh } from \"./abstractMesh.js\";\nimport { SubMesh } from \"./subMesh.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MultiMaterial } from \"../Materials/multiMaterial.js\";\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { GetClass, RegisterClass } from \"../Misc/typeStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { MeshLODLevel } from \"./meshLODLevel.js\";\n/**\n * @internal\n **/\nexport var _CreationDataStorage = /*#__PURE__*/_createClass(function _CreationDataStorage() {\n  _classCallCheck(this, _CreationDataStorage);\n});\n/**\n * @internal\n **/\nvar _InstanceDataStorage = /*#__PURE__*/_createClass(function _InstanceDataStorage() {\n  _classCallCheck(this, _InstanceDataStorage);\n  this.visibleInstances = {};\n  this.batchCache = new _InstancesBatch();\n  this.batchCacheReplacementModeInFrozenMode = new _InstancesBatch();\n  this.instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\n});\n/**\n * @internal\n **/\n\nexport var _InstancesBatch = /*#__PURE__*/_createClass(function _InstancesBatch() {\n  _classCallCheck(this, _InstancesBatch);\n  this.mustReturn = false;\n  this.visibleInstances = new Array();\n  this.renderSelf = new Array();\n  this.hardwareInstancedRendering = new Array();\n});\n/**\n * @internal\n **/\nvar _ThinInstanceDataStorage = /*#__PURE__*/_createClass(function _ThinInstanceDataStorage() {\n  _classCallCheck(this, _ThinInstanceDataStorage);\n  this.instancesCount = 0;\n  this.matrixBuffer = null;\n  this.previousMatrixBuffer = null;\n  this.matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\n  this.matrixData = null;\n  this.boundingVectors = [];\n  this.worldMatrices = null;\n});\n/**\n * @internal\n **/\nvar _InternalMeshDataInfo = /*#__PURE__*/_createClass(function _InternalMeshDataInfo() {\n  _classCallCheck(this, _InternalMeshDataInfo);\n  this._areNormalsFrozen = false; // Will be used by ribbons mainly\n  // Will be used to save a source mesh reference, If any\n  this._source = null;\n  // Will be used to for fast cloned mesh lookup\n  this.meshMap = null;\n  this._preActivateId = -1;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  this._LODLevels = new Array();\n  /** Alternative definition of LOD level, using screen coverage instead of distance */\n  this._useLODScreenCoverage = false;\n  this._effectiveMaterial = null;\n  this._forcedInstanceCount = 0;\n  this._overrideRenderingFillMode = null;\n});\n/**\n * Class used to represent renderable models\n */\nexport var Mesh = /*#__PURE__*/function (_AbstractMesh) {\n  _inherits(Mesh, _AbstractMesh);\n  var _super = _createSuper(Mesh);\n  /**\n   * @constructor\n   * @param name The value used by scene.getMeshByName() to do a lookup.\n   * @param scene The scene to add this mesh to.\n   * @param parent The parent of this mesh, if it has one\n   * @param source An optional Mesh from which geometry is shared, cloned.\n   * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\n   *                  When false, achieved by calling a clone(), also passing False.\n   *                  This will make creation of children, recursive.\n   * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\n   */\n  function Mesh(name) {\n    var _this;\n    var scene = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var doNotCloneChildren = arguments.length > 4 ? arguments[4] : undefined;\n    var clonePhysicsImpostor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _classCallCheck(this, Mesh);\n    _this = _super.call(this, name, scene);\n    // Internal data\n    _this._internalMeshDataInfo = new _InternalMeshDataInfo();\n    // Members\n    /**\n     * Gets the delay loading state of the mesh (when delay loading is turned on)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/incrementalLoading\n     */\n    _this.delayLoadState = 0;\n    /**\n     * Gets the list of instances created from this mesh\n     * it is not supposed to be modified manually.\n     * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n     */\n    _this.instances = new Array();\n    // Private\n    /** @internal */\n    _this._creationDataStorage = null;\n    /** @internal */\n    _this._geometry = null;\n    /** @internal */\n    _this._instanceDataStorage = new _InstanceDataStorage();\n    /** @internal */\n    _this._thinInstanceDataStorage = new _ThinInstanceDataStorage();\n    /** @internal */\n    _this._shouldGenerateFlatShading = false;\n    // Use by builder only to know what orientation were the mesh build in.\n    /** @internal */\n    _this._originalBuilderSideOrientation = Mesh.DEFAULTSIDE;\n    /**\n     * Use this property to change the original side orientation defined at construction time\n     */\n    _this.overrideMaterialSideOrientation = null;\n    /**\n     * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\n     * You should not mix meshes that have this property set to true with meshes that have it set to false if they all write\n     * to the depth buffer, because the z-values are not comparable in the two cases and you will get rendering artifacts if you do.\n     * You can set the property to true for meshes that do not write to the depth buffer, or set the same value (either false or true) otherwise.\n     * Note this will reduce performance when set to true.\n     */\n    _this.ignoreCameraMaxZ = false;\n    scene = _this.getScene();\n    _this._onBeforeDraw = function (isInstance, world, effectiveMaterial) {\n      if (isInstance && effectiveMaterial) {\n        if (_this._uniformBuffer) {\n          _this.transferToEffect(world);\n        } else {\n          effectiveMaterial.bindOnlyWorldMatrix(world);\n        }\n      }\n    };\n    if (source) {\n      // Geometry\n      if (source._geometry) {\n        source._geometry.applyToMesh(_assertThisInitialized(_this));\n      }\n      // Deep copy\n      DeepCopier.DeepCopy(source, _assertThisInitialized(_this), [\"name\", \"material\", \"skeleton\", \"instances\", \"parent\", \"uniqueId\", \"source\", \"metadata\", \"morphTargetManager\", \"hasInstances\", \"worldMatrixInstancedBuffer\", \"previousWorldMatrixInstancedBuffer\", \"hasLODLevels\", \"geometry\", \"isBlocked\", \"areNormalsFrozen\", \"facetNb\", \"isFacetDataEnabled\", \"lightSources\", \"useBones\", \"isAnInstance\", \"collider\", \"edgesRenderer\", \"forward\", \"up\", \"right\", \"absolutePosition\", \"absoluteScaling\", \"absoluteRotationQuaternion\", \"isWorldMatrixFrozen\", \"nonUniformScaling\", \"behaviors\", \"worldMatrixFromCache\", \"hasThinInstances\", \"cloneMeshMap\", \"hasBoundingInfo\"], [\"_poseMatrix\"]);\n      // Source mesh\n      _this._internalMeshDataInfo._source = source;\n      if (scene.useClonedMeshMap) {\n        if (!source._internalMeshDataInfo.meshMap) {\n          source._internalMeshDataInfo.meshMap = {};\n        }\n        source._internalMeshDataInfo.meshMap[_this.uniqueId] = _assertThisInitialized(_this);\n      }\n      // Construction Params\n      // Clone parameters allowing mesh to be updated in case of parametric shapes.\n      _this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\n      _this._creationDataStorage = source._creationDataStorage;\n      // Animation ranges\n      if (source._ranges) {\n        var ranges = source._ranges;\n        for (var _name in ranges) {\n          if (!Object.prototype.hasOwnProperty.call(ranges, _name)) {\n            continue;\n          }\n          if (!ranges[_name]) {\n            continue;\n          }\n          _this.createAnimationRange(_name, ranges[_name].from, ranges[_name].to);\n        }\n      }\n      // Metadata\n      if (source.metadata && source.metadata.clone) {\n        _this.metadata = source.metadata.clone();\n      } else {\n        _this.metadata = source.metadata;\n      }\n      _this._internalMetadata = source._internalMetadata;\n      // Tags\n      if (Tags && Tags.HasTags(source)) {\n        Tags.AddTagsTo(_assertThisInitialized(_this), Tags.GetTags(source, true));\n      }\n      // Enabled. We shouldn't need to check the source's ancestors, as this mesh\n      // will have the same ones.\n      _this.setEnabled(source.isEnabled(false));\n      // Parent\n      _this.parent = source.parent;\n      // Pivot\n      _this.setPivotMatrix(source.getPivotMatrix());\n      _this.id = name + \".\" + source.id;\n      // Material\n      _this.material = source.material;\n      if (!doNotCloneChildren) {\n        // Children\n        var directDescendants = source.getDescendants(true);\n        for (var index = 0; index < directDescendants.length; index++) {\n          var child = directDescendants[index];\n          if (child.clone) {\n            child.clone(name + \".\" + child.name, _assertThisInitialized(_this));\n          }\n        }\n      }\n      // Morphs\n      if (source.morphTargetManager) {\n        _this.morphTargetManager = source.morphTargetManager;\n      }\n      // Physics clone\n      if (scene.getPhysicsEngine) {\n        var physicsEngine = scene.getPhysicsEngine();\n        if (clonePhysicsImpostor && physicsEngine) {\n          if (physicsEngine.getPluginVersion() === 1) {\n            var impostor = physicsEngine.getImpostorForPhysicsObject(source);\n            if (impostor) {\n              _this.physicsImpostor = impostor.clone(_assertThisInitialized(_this));\n            }\n          } else if (physicsEngine.getPluginVersion() === 2) {\n            if (source.physicsBody) {\n              source.physicsBody.clone(_assertThisInitialized(_this));\n            }\n          }\n        }\n      }\n      // Particles\n      for (var _index = 0; _index < scene.particleSystems.length; _index++) {\n        var system = scene.particleSystems[_index];\n        if (system.emitter === source) {\n          system.clone(system.name, _assertThisInitialized(_this));\n        }\n      }\n      // Skeleton\n      _this.skeleton = source.skeleton;\n      _this.refreshBoundingInfo(true, true);\n      _this.computeWorldMatrix(true);\n    }\n    // Parent\n    if (parent !== null) {\n      _this.parent = parent;\n    }\n    _this._instanceDataStorage.hardwareInstancedRendering = _this.getEngine().getCaps().instancedArrays;\n    _this._internalMeshDataInfo._onMeshReadyObserverAdded = function (observer) {\n      // only notify once! then unregister the observer\n      observer.unregisterOnNextCall = true;\n      if (_this.isReady(true)) {\n        _this.onMeshReadyObservable.notifyObservers(_assertThisInitialized(_this));\n      } else {\n        if (!_this._internalMeshDataInfo._checkReadinessObserver) {\n          _this._internalMeshDataInfo._checkReadinessObserver = _this._scene.onBeforeRenderObservable.add(function () {\n            // check for complete readiness\n            if (_this.isReady(true)) {\n              _this._scene.onBeforeRenderObservable.remove(_this._internalMeshDataInfo._checkReadinessObserver);\n              _this._internalMeshDataInfo._checkReadinessObserver = null;\n              _this.onMeshReadyObservable.notifyObservers(_assertThisInitialized(_this));\n            }\n          });\n        }\n      }\n    };\n    _this.onMeshReadyObservable = new Observable(_this._internalMeshDataInfo._onMeshReadyObserverAdded);\n    if (source) {\n      source.onClonedObservable.notifyObservers(_assertThisInitialized(_this));\n    }\n    return _this;\n  }\n  _createClass(Mesh, [{\n    key: \"useLODScreenCoverage\",\n    get:\n    /**\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance.\n     */\n    function get() {\n      return this._internalMeshDataInfo._useLODScreenCoverage;\n    },\n    set: function set(value) {\n      this._internalMeshDataInfo._useLODScreenCoverage = value;\n      this._sortLODLevels();\n    }\n  }, {\n    key: \"computeBonesUsingShaders\",\n    get: function get() {\n      return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\n    },\n    set: function set(value) {\n      if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\n        return;\n      }\n      if (value && this._internalMeshDataInfo._sourcePositions) {\n        // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\n        this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\n        if (this._internalMeshDataInfo._sourceNormals) {\n          this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\n        }\n        this._internalMeshDataInfo._sourcePositions = null;\n        this._internalMeshDataInfo._sourceNormals = null;\n      }\n      this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\n      this._markSubMeshesAsAttributesDirty();\n    }\n    /**\n     * An event triggered before rendering the mesh\n     */\n  }, {\n    key: \"onBeforeRenderObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\n        this._internalMeshDataInfo._onBeforeRenderObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeRenderObservable;\n    }\n    /**\n     * An event triggered before binding the mesh\n     */\n  }, {\n    key: \"onBeforeBindObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeBindObservable) {\n        this._internalMeshDataInfo._onBeforeBindObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeBindObservable;\n    }\n    /**\n     * An event triggered after rendering the mesh\n     */\n  }, {\n    key: \"onAfterRenderObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onAfterRenderObservable) {\n        this._internalMeshDataInfo._onAfterRenderObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onAfterRenderObservable;\n    }\n    /**\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\n     */\n  }, {\n    key: \"onBetweenPassObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBetweenPassObservable) {\n        this._internalMeshDataInfo._onBetweenPassObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBetweenPassObservable;\n    }\n    /**\n     * An event triggered before drawing the mesh\n     */\n  }, {\n    key: \"onBeforeDrawObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\n        this._internalMeshDataInfo._onBeforeDrawObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeDrawObservable;\n    }\n    /**\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\n     */\n  }, {\n    key: \"onBeforeDraw\",\n    set: function set(callback) {\n      if (this._onBeforeDrawObserver) {\n        this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\n      }\n      this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\n    }\n  }, {\n    key: \"hasInstances\",\n    get: function get() {\n      return this.instances.length > 0;\n    }\n  }, {\n    key: \"hasThinInstances\",\n    get: function get() {\n      var _a;\n      return ((_a = this._thinInstanceDataStorage.instancesCount) !== null && _a !== void 0 ? _a : 0) > 0;\n    }\n    /**\n     * Gets or sets the forced number of instances to display.\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\n     * (regular / instance / thin instances mesh)\n     */\n  }, {\n    key: \"forcedInstanceCount\",\n    get: function get() {\n      return this._internalMeshDataInfo._forcedInstanceCount;\n    },\n    set: function set(count) {\n      this._internalMeshDataInfo._forcedInstanceCount = count;\n    }\n    /**\n     * Use this property to override the Material's fillMode value\n     */\n  }, {\n    key: \"overrideRenderingFillMode\",\n    get: function get() {\n      return this._internalMeshDataInfo._overrideRenderingFillMode;\n    },\n    set: function set(fillMode) {\n      this._internalMeshDataInfo._overrideRenderingFillMode = fillMode;\n    }\n    /**\n     * Gets the source mesh (the one used to clone this one from)\n     */\n  }, {\n    key: \"source\",\n    get: function get() {\n      return this._internalMeshDataInfo._source;\n    }\n    /**\n     * Gets the list of clones of this mesh\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\n     * Note that useClonedMeshMap=true is the default setting\n     */\n  }, {\n    key: \"cloneMeshMap\",\n    get: function get() {\n      return this._internalMeshDataInfo.meshMap;\n    }\n    /**\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\n     */\n  }, {\n    key: \"isUnIndexed\",\n    get: function get() {\n      return this._unIndexed;\n    },\n    set: function set(value) {\n      if (this._unIndexed !== value) {\n        this._unIndexed = value;\n        this._markSubMeshesAsAttributesDirty();\n      }\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\n  }, {\n    key: \"worldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.instancesData;\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\n  }, {\n    key: \"previousWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.instancesPreviousData;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n  }, {\n    key: \"manualUpdateOfWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.manualUpdate;\n    },\n    set: function set(value) {\n      this._instanceDataStorage.manualUpdate = value;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n  }, {\n    key: \"manualUpdateOfPreviousWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.previousManualUpdate;\n    },\n    set: function set(value) {\n      this._instanceDataStorage.previousManualUpdate = value;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices must be performed in all cases (and notably even in frozen mode) */\n  }, {\n    key: \"forceWorldMatrixInstancedBufferUpdate\",\n    get: function get() {\n      return this._instanceDataStorage.forceMatrixUpdates;\n    },\n    set: function set(value) {\n      this._instanceDataStorage.forceMatrixUpdates = value;\n    }\n  }, {\n    key: \"instantiateHierarchy\",\n    value: function instantiateHierarchy() {\n      var newParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      var onNewNodeCreated = arguments.length > 2 ? arguments[2] : undefined;\n      var instance = this.getTotalVertices() === 0 || options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)) ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true) : this.createInstance(\"instance of \" + (this.name || this.id));\n      instance.parent = newParent || this.parent;\n      instance.position = this.position.clone();\n      instance.scaling = this.scaling.clone();\n      if (this.rotationQuaternion) {\n        instance.rotationQuaternion = this.rotationQuaternion.clone();\n      } else {\n        instance.rotation = this.rotation.clone();\n      }\n      if (onNewNodeCreated) {\n        onNewNodeCreated(this, instance);\n      }\n      var _iterator = _createForOfIteratorHelper(this.getChildTransformNodes(true)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          // instancedMesh should have a different sourced mesh\n          if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\" && child.sourceMesh === this) {\n            child.instantiateHierarchy(instance, {\n              doNotInstantiate: options && options.doNotInstantiate || false,\n              newSourcedMesh: instance\n            }, onNewNodeCreated);\n          } else {\n            child.instantiateHierarchy(instance, options, onNewNodeCreated);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return instance;\n    }\n    /**\n     * Gets the class name\n     * @returns the string \"Mesh\".\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Mesh\";\n    }\n    /** @internal */\n  }, {\n    key: \"_isMesh\",\n    get: function get() {\n      return true;\n    }\n    /**\n     * Returns a description of this mesh\n     * @param fullDetails define if full details about this mesh must be used\n     * @returns a descriptive string representing this mesh\n     */\n  }, {\n    key: \"toString\",\n    value: function toString(fullDetails) {\n      var ret = _get(_getPrototypeOf(Mesh.prototype), \"toString\", this).call(this, fullDetails);\n      ret += \", n vertices: \" + this.getTotalVertices();\n      ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\n      if (this.animations) {\n        for (var i = 0; i < this.animations.length; i++) {\n          ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\n        }\n      }\n      if (fullDetails) {\n        if (this._geometry) {\n          var ib = this.getIndices();\n          var vb = this.getVerticesData(VertexBuffer.PositionKind);\n          if (vb && ib) {\n            ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\n          }\n        } else {\n          ret += \", flat shading: UNKNOWN\";\n        }\n      }\n      return ret;\n    }\n    /** @internal */\n  }, {\n    key: \"_unBindEffect\",\n    value: function _unBindEffect() {\n      _get(_getPrototypeOf(Mesh.prototype), \"_unBindEffect\", this).call(this);\n      var _iterator2 = _createForOfIteratorHelper(this.instances),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var instance = _step2.value;\n          instance._unBindEffect();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Gets a boolean indicating if this mesh has LOD\n     */\n  }, {\n    key: \"hasLODLevels\",\n    get: function get() {\n      return this._internalMeshDataInfo._LODLevels.length > 0;\n    }\n    /**\n     * Gets the list of MeshLODLevel associated with the current mesh\n     * @returns an array of MeshLODLevel\n     */\n  }, {\n    key: \"getLODLevels\",\n    value: function getLODLevels() {\n      return this._internalMeshDataInfo._LODLevels;\n    }\n  }, {\n    key: \"_sortLODLevels\",\n    value: function _sortLODLevels() {\n      var sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\n      this._internalMeshDataInfo._LODLevels.sort(function (a, b) {\n        if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\n          return sortingOrderFactor;\n        }\n        if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\n          return -sortingOrderFactor;\n        }\n        return 0;\n      });\n    }\n    /**\n     * Add a mesh as LOD level triggered at the given distance.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\n     * Example Playground for distance https://playground.babylonjs.com/#QE7KM#197\n     * Example Playground for screen coverage https://playground.babylonjs.com/#QE7KM#196\n     * @param mesh The mesh to be added as LOD level (can be null)\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"addLODLevel\",\n    value: function addLODLevel(distanceOrScreenCoverage, mesh) {\n      if (mesh && mesh._masterMesh) {\n        Logger.Warn(\"You cannot use a mesh as LOD level twice\");\n        return this;\n      }\n      var level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\n      this._internalMeshDataInfo._LODLevels.push(level);\n      if (mesh) {\n        mesh._masterMesh = this;\n      }\n      this._sortLODLevels();\n      return this;\n    }\n    /**\n     * Returns the LOD level mesh at the passed distance or null if not found.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param distance The distance from the center of the object to show this level\n     * @returns a Mesh or `null`\n     */\n  }, {\n    key: \"getLODLevelAtDistance\",\n    value: function getLODLevelAtDistance(distance) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        var level = internalDataInfo._LODLevels[index];\n        if (level.distanceOrScreenCoverage === distance) {\n          return level.mesh;\n        }\n      }\n      return null;\n    }\n    /**\n     * Remove a mesh from the LOD array\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param mesh defines the mesh to be removed\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"removeLODLevel\",\n    value: function removeLODLevel(mesh) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        if (internalDataInfo._LODLevels[index].mesh === mesh) {\n          internalDataInfo._LODLevels.splice(index, 1);\n          if (mesh) {\n            mesh._masterMesh = null;\n          }\n        }\n      }\n      this._sortLODLevels();\n      return this;\n    }\n    /**\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param camera defines the camera to use to compute distance\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"getLOD\",\n    value: function getLOD(camera, boundingSphere) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\n        return this;\n      }\n      var bSphere = boundingSphere || this.getBoundingInfo().boundingSphere;\n      var distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\n      var compareValue = distanceToCamera;\n      var compareSign = 1;\n      if (internalDataInfo._useLODScreenCoverage) {\n        var screenArea = camera.screenArea;\n        var meshArea = bSphere.radiusWorld * camera.minZ / distanceToCamera;\n        meshArea = meshArea * meshArea * Math.PI;\n        compareValue = meshArea / screenArea;\n        compareSign = -1;\n      }\n      if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\n        if (this.onLODLevelSelection) {\n          this.onLODLevelSelection(compareValue, this, this);\n        }\n        return this;\n      }\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        var level = internalDataInfo._LODLevels[index];\n        if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\n          if (level.mesh) {\n            if (level.mesh.delayLoadState === 4) {\n              level.mesh._checkDelayState();\n              return this;\n            }\n            if (level.mesh.delayLoadState === 2) {\n              return this;\n            }\n            level.mesh._preActivate();\n            level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\n          }\n          if (this.onLODLevelSelection) {\n            this.onLODLevelSelection(compareValue, this, level.mesh);\n          }\n          return level.mesh;\n        }\n      }\n      if (this.onLODLevelSelection) {\n        this.onLODLevelSelection(compareValue, this, this);\n      }\n      return this;\n    }\n    /**\n     * Gets the mesh internal Geometry object\n     */\n  }, {\n    key: \"geometry\",\n    get: function get() {\n      return this._geometry;\n    }\n    /**\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\n     * @returns the total number of vertices\n     */\n  }, {\n    key: \"getTotalVertices\",\n    value: function getTotalVertices() {\n      if (this._geometry === null || this._geometry === undefined) {\n        return 0;\n      }\n      return this._geometry.getTotalVertices();\n    }\n    /**\n     * Returns the content of an associated vertex buffer\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\n     */\n  }, {\n    key: \"getVerticesData\",\n    value: function getVerticesData(kind, copyWhenShared, forceCopy, bypassInstanceData) {\n      var _a, _b;\n      if (!this._geometry) {\n        return null;\n      }\n      var data = bypassInstanceData ? undefined : (_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) === null || _b === void 0 ? void 0 : _b.getFloatData(this.instances.length + 1,\n      // +1 because the master mesh is not included in the instances array\n      forceCopy || copyWhenShared && this._geometry.meshes.length !== 1);\n      if (!data) {\n        data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\n      }\n      return data;\n    }\n    /**\n     * Returns the mesh VertexBuffer object from the requested `kind`\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\n     */\n  }, {\n    key: \"getVertexBuffer\",\n    value: function getVertexBuffer(kind, bypassInstanceData) {\n      var _a, _b;\n      if (!this._geometry) {\n        return null;\n      }\n      return (_b = bypassInstanceData ? undefined : (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) !== null && _b !== void 0 ? _b : this._geometry.getVertexBuffer(kind);\n    }\n    /**\n     * Tests if a specific vertex buffer is associated with this mesh\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\n     * @returns a boolean\n     */\n  }, {\n    key: \"isVerticesDataPresent\",\n    value: function isVerticesDataPresent(kind, bypassInstanceData) {\n      var _a;\n      if (!this._geometry) {\n        if (this._delayInfo) {\n          return this._delayInfo.indexOf(kind) !== -1;\n        }\n        return false;\n      }\n      return !bypassInstanceData && ((_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) !== undefined || this._geometry.isVerticesDataPresent(kind);\n    }\n    /**\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\n     * @returns a boolean\n     */\n  }, {\n    key: \"isVertexBufferUpdatable\",\n    value: function isVertexBufferUpdatable(kind, bypassInstanceData) {\n      var _a;\n      if (!this._geometry) {\n        if (this._delayInfo) {\n          return this._delayInfo.indexOf(kind) !== -1;\n        }\n        return false;\n      }\n      if (!bypassInstanceData) {\n        var buffer = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind];\n        if (buffer) {\n          return buffer.isUpdatable();\n        }\n      }\n      return this._geometry.isVertexBufferUpdatable(kind);\n    }\n    /**\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\n     * @returns an array of strings\n     */\n  }, {\n    key: \"getVerticesDataKinds\",\n    value: function getVerticesDataKinds(bypassInstanceData) {\n      if (!this._geometry) {\n        var result = new Array();\n        if (this._delayInfo) {\n          this._delayInfo.forEach(function (kind) {\n            result.push(kind);\n          });\n        }\n        return result;\n      }\n      var kinds = this._geometry.getVerticesDataKinds();\n      if (!bypassInstanceData && this._userInstancedBuffersStorage) {\n        for (var kind in this._userInstancedBuffersStorage.vertexBuffers) {\n          if (kinds.indexOf(kind) === -1) {\n            kinds.push(kind);\n          }\n        }\n      }\n      return kinds;\n    }\n    /**\n     * Returns a positive integer : the total number of indices in this mesh geometry.\n     * @returns the numner of indices or zero if the mesh has no geometry.\n     */\n  }, {\n    key: \"getTotalIndices\",\n    value: function getTotalIndices() {\n      if (!this._geometry) {\n        return 0;\n      }\n      return this._geometry.getTotalIndices();\n    }\n    /**\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n     * @returns the indices array or an empty array if the mesh has no geometry\n     */\n  }, {\n    key: \"getIndices\",\n    value: function getIndices(copyWhenShared, forceCopy) {\n      if (!this._geometry) {\n        return [];\n      }\n      return this._geometry.getIndices(copyWhenShared, forceCopy);\n    }\n  }, {\n    key: \"isBlocked\",\n    get: function get() {\n      return this._masterMesh !== null && this._masterMesh !== undefined;\n    }\n    /**\n     * Determine if the current mesh is ready to be rendered\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\n     * @returns true if all associated assets are ready (material, textures, shaders)\n     */\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      var completeCheck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var forceInstanceSupport = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _a, _b, _c, _d, _e, _f;\n      if (this.delayLoadState === 2) {\n        return false;\n      }\n      if (!_get(_getPrototypeOf(Mesh.prototype), \"isReady\", this).call(this, completeCheck)) {\n        return false;\n      }\n      if (!this.subMeshes || this.subMeshes.length === 0) {\n        return true;\n      }\n      if (!completeCheck) {\n        return true;\n      }\n      var engine = this.getEngine();\n      var scene = this.getScene();\n      var hardwareInstancedRendering = forceInstanceSupport || engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances);\n      this.computeWorldMatrix();\n      var mat = this.material || scene.defaultMaterial;\n      if (mat) {\n        if (mat._storeEffectOnSubMeshes) {\n          var _iterator3 = _createForOfIteratorHelper(this.subMeshes),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var subMesh = _step3.value;\n              var effectiveMaterial = subMesh.getMaterial();\n              if (effectiveMaterial) {\n                if (effectiveMaterial._storeEffectOnSubMeshes) {\n                  if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n                    return false;\n                  }\n                } else {\n                  if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\n                    return false;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        } else {\n          if (!mat.isReady(this, hardwareInstancedRendering)) {\n            return false;\n          }\n        }\n      }\n      // Shadows\n      var currentRenderPassId = engine.currentRenderPassId;\n      var _iterator4 = _createForOfIteratorHelper(this.lightSources),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var light = _step4.value;\n          var generators = light.getShadowGenerators();\n          if (!generators) {\n            continue;\n          }\n          var iterator = generators.values();\n          for (var key = iterator.next(); key.done !== true; key = iterator.next()) {\n            var generator = key.value;\n            if (generator && (!((_a = generator.getShadowMap()) === null || _a === void 0 ? void 0 : _a.renderList) || ((_b = generator.getShadowMap()) === null || _b === void 0 ? void 0 : _b.renderList) && ((_d = (_c = generator.getShadowMap()) === null || _c === void 0 ? void 0 : _c.renderList) === null || _d === void 0 ? void 0 : _d.indexOf(this)) !== -1)) {\n              if (generator.getShadowMap()) {\n                engine.currentRenderPassId = generator.getShadowMap().renderPassId;\n              }\n              var _iterator6 = _createForOfIteratorHelper(this.subMeshes),\n                _step6;\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var _subMesh = _step6.value;\n                  if (!generator.isReady(_subMesh, hardwareInstancedRendering, (_f = (_e = _subMesh.getMaterial()) === null || _e === void 0 ? void 0 : _e.needAlphaBlendingForMesh(this)) !== null && _f !== void 0 ? _f : false)) {\n                    engine.currentRenderPassId = currentRenderPassId;\n                    return false;\n                  }\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n              engine.currentRenderPassId = currentRenderPassId;\n            }\n          }\n        }\n        // LOD\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(this._internalMeshDataInfo._LODLevels),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var lod = _step5.value;\n          if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return true;\n    }\n    /**\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\n     */\n  }, {\n    key: \"areNormalsFrozen\",\n    get: function get() {\n      return this._internalMeshDataInfo._areNormalsFrozen;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"freezeNormals\",\n    value: function freezeNormals() {\n      this._internalMeshDataInfo._areNormalsFrozen = true;\n      return this;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unfreezeNormals\",\n    value: function unfreezeNormals() {\n      this._internalMeshDataInfo._areNormalsFrozen = false;\n      return this;\n    }\n    /**\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\n     */\n  }, {\n    key: \"overridenInstanceCount\",\n    set: function set(count) {\n      this._instanceDataStorage.overridenInstanceCount = count;\n    }\n    // Methods\n    /** @internal */\n  }, {\n    key: \"_preActivate\",\n    value: function _preActivate() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      var sceneRenderId = this.getScene().getRenderId();\n      if (internalDataInfo._preActivateId === sceneRenderId) {\n        return this;\n      }\n      internalDataInfo._preActivateId = sceneRenderId;\n      this._instanceDataStorage.visibleInstances = null;\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_preActivateForIntermediateRendering\",\n    value: function _preActivateForIntermediateRendering(renderId) {\n      if (this._instanceDataStorage.visibleInstances) {\n        this._instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_registerInstanceForRenderId\",\n    value: function _registerInstanceForRenderId(instance, renderId) {\n      if (!this._instanceDataStorage.visibleInstances) {\n        this._instanceDataStorage.visibleInstances = {\n          defaultRenderId: renderId,\n          selfDefaultRenderId: this._renderId\n        };\n      }\n      if (!this._instanceDataStorage.visibleInstances[renderId]) {\n        if (this._instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\n          this._instanceDataStorage.visibleInstances[this._instanceDataStorage.previousRenderId] = null;\n        }\n        this._instanceDataStorage.previousRenderId = renderId;\n        this._instanceDataStorage.visibleInstances[renderId] = new Array();\n      }\n      this._instanceDataStorage.visibleInstances[renderId].push(instance);\n      return this;\n    }\n  }, {\n    key: \"_afterComputeWorldMatrix\",\n    value: function _afterComputeWorldMatrix() {\n      _get(_getPrototypeOf(Mesh.prototype), \"_afterComputeWorldMatrix\", this).call(this);\n      if (!this.hasThinInstances) {\n        return;\n      }\n      if (!this.doNotSyncBoundingInfo) {\n        this.thinInstanceRefreshBoundingInfo(false);\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_postActivate\",\n    value: function _postActivate() {\n      if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\n        this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\n        this.edgesRenderer.customInstances.push(this.getWorldMatrix());\n      }\n    }\n    /**\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\n     * This means the mesh underlying bounding box and sphere are recomputed.\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\n     * @returns the current mesh\n     */\n  }, {\n    key: \"refreshBoundingInfo\",\n    value: function refreshBoundingInfo() {\n      var applySkeleton = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var applyMorph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\n        return this;\n      }\n      var bias = this.geometry ? this.geometry.boundingBias : null;\n      this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), bias);\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_createGlobalSubMesh\",\n    value: function _createGlobalSubMesh(force) {\n      var totalVertices = this.getTotalVertices();\n      if (!totalVertices || !this.getIndices()) {\n        return null;\n      }\n      // Check if we need to recreate the submeshes\n      if (this.subMeshes && this.subMeshes.length > 0) {\n        var ib = this.getIndices();\n        if (!ib) {\n          return null;\n        }\n        var totalIndices = ib.length;\n        var needToRecreate = false;\n        if (force) {\n          needToRecreate = true;\n        } else {\n          var _iterator7 = _createForOfIteratorHelper(this.subMeshes),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var submesh = _step7.value;\n              if (submesh.indexStart + submesh.indexCount > totalIndices) {\n                needToRecreate = true;\n                break;\n              }\n              if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\n                needToRecreate = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n        if (!needToRecreate) {\n          return this.subMeshes[0];\n        }\n      }\n      this.releaseSubMeshes();\n      return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices(), this);\n    }\n    /**\n     * This function will subdivide the mesh into multiple submeshes\n     * @param count defines the expected number of submeshes\n     */\n  }, {\n    key: \"subdivide\",\n    value: function subdivide(count) {\n      if (count < 1) {\n        return;\n      }\n      var totalIndices = this.getTotalIndices();\n      var subdivisionSize = totalIndices / count | 0;\n      var offset = 0;\n      // Ensure that subdivisionSize is a multiple of 3\n      while (subdivisionSize % 3 !== 0) {\n        subdivisionSize++;\n      }\n      this.releaseSubMeshes();\n      for (var index = 0; index < count; index++) {\n        if (offset >= totalIndices) {\n          break;\n        }\n        SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this);\n        offset += subdivisionSize;\n      }\n      this.synchronizeInstances();\n    }\n    /**\n     * Copy a FloatArray into a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     * @param stride defines the data stride size (can be null)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setVerticesData\",\n    value: function setVerticesData(kind, data) {\n      var updatable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var stride = arguments.length > 3 ? arguments[3] : undefined;\n      if (!this._geometry) {\n        var vertexData = new VertexData();\n        vertexData.set(data, kind);\n        var scene = this.getScene();\n        new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n      } else {\n        this._geometry.setVerticesData(kind, data, updatable, stride);\n      }\n      return this;\n    }\n    /**\n     * Delete a vertex buffer associated with this mesh\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     */\n  }, {\n    key: \"removeVerticesData\",\n    value: function removeVerticesData(kind) {\n      if (!this._geometry) {\n        return;\n      }\n      this._geometry.removeVerticesData(kind);\n    }\n    /**\n     * Flags an associated vertex buffer as updatable\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     */\n  }, {\n    key: \"markVerticesDataAsUpdatable\",\n    value: function markVerticesDataAsUpdatable(kind) {\n      var updatable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var vb = this.getVertexBuffer(kind);\n      if (!vb || vb.isUpdatable() === updatable) {\n        return;\n      }\n      this.setVerticesData(kind, this.getVerticesData(kind), updatable);\n    }\n    /**\n     * Sets the mesh global Vertex Buffer\n     * @param buffer defines the buffer to use\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setVerticesBuffer\",\n    value: function setVerticesBuffer(buffer) {\n      var disposeExistingBuffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!this._geometry) {\n        this._geometry = Geometry.CreateGeometryForMesh(this);\n      }\n      this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\n      return this;\n    }\n    /**\n     * Update a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateVerticesData\",\n    value: function updateVerticesData(kind, data, updateExtends, makeItUnique) {\n      if (!this._geometry) {\n        return this;\n      }\n      if (!makeItUnique) {\n        this._geometry.updateVerticesData(kind, data, updateExtends);\n      } else {\n        this.makeGeometryUnique();\n        this.updateVerticesData(kind, data, updateExtends, false);\n      }\n      return this;\n    }\n    /**\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#other-shapes-updatemeshpositions\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateMeshPositions\",\n    value: function updateMeshPositions(positionFunction) {\n      var computeNormals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var positions = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positions) {\n        return this;\n      }\n      positionFunction(positions);\n      this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\n      if (computeNormals) {\n        var indices = this.getIndices();\n        var normals = this.getVerticesData(VertexBuffer.NormalKind);\n        if (!normals) {\n          return this;\n        }\n        VertexData.ComputeNormals(positions, indices, normals);\n        this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\n      }\n      return this;\n    }\n    /**\n     * Creates a un-shared specific occurence of the geometry for the mesh.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"makeGeometryUnique\",\n    value: function makeGeometryUnique() {\n      if (!this._geometry) {\n        return this;\n      }\n      if (this._geometry.meshes.length === 1) {\n        return this;\n      }\n      var oldGeometry = this._geometry;\n      var geometry = this._geometry.copy(Geometry.RandomId());\n      oldGeometry.releaseForMesh(this, true);\n      geometry.applyToMesh(this);\n      return this;\n    }\n    /**\n     * Set the index buffer of this mesh\n     * @param indices defines the source data\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setIndices\",\n    value: function setIndices(indices) {\n      var totalVertices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var updatable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this._geometry) {\n        var vertexData = new VertexData();\n        vertexData.indices = indices;\n        var scene = this.getScene();\n        new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n      } else {\n        this._geometry.setIndices(indices, totalVertices, updatable);\n      }\n      return this;\n    }\n    /**\n     * Update the current index buffer\n     * @param indices defines the source data\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateIndices\",\n    value: function updateIndices(indices, offset) {\n      var gpuMemoryOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this._geometry) {\n        return this;\n      }\n      this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\n      return this;\n    }\n    /**\n     * Invert the geometry to move from a right handed system to a left handed one.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"toLeftHanded\",\n    value: function toLeftHanded() {\n      if (!this._geometry) {\n        return this;\n      }\n      this._geometry.toLeftHanded();\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_bind\",\n    value: function _bind(subMesh, effect, fillMode) {\n      var allowInstancedRendering = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (!this._geometry) {\n        return this;\n      }\n      var engine = this.getScene().getEngine();\n      // Morph targets\n      if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\n        this.morphTargetManager._bind(effect);\n      }\n      // Wireframe\n      var indexToBind;\n      if (this._unIndexed) {\n        indexToBind = null;\n      } else {\n        switch (this._getRenderingFillMode(fillMode)) {\n          case Material.PointFillMode:\n            indexToBind = null;\n            break;\n          case Material.WireFrameFillMode:\n            indexToBind = subMesh._getLinesIndexBuffer(this.getIndices(), engine);\n            break;\n          default:\n          case Material.TriangleFillMode:\n            indexToBind = this._geometry.getIndexBuffer();\n            break;\n        }\n      }\n      // VBOs\n      if (!allowInstancedRendering || !this._userInstancedBuffersStorage || this.hasThinInstances) {\n        this._geometry._bind(effect, indexToBind);\n      } else {\n        this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_draw\",\n    value: function _draw(subMesh, fillMode, instancesCount) {\n      if (!this._geometry || !this._geometry.getVertexBuffers() || !this._unIndexed && !this._geometry.getIndexBuffer()) {\n        return this;\n      }\n      if (this._internalMeshDataInfo._onBeforeDrawObservable) {\n        this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\n      }\n      var scene = this.getScene();\n      var engine = scene.getEngine();\n      if (this._unIndexed || fillMode == Material.PointFillMode) {\n        // or triangles as points\n        engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\n      } else if (fillMode == Material.WireFrameFillMode) {\n        // Triangles as wireframe\n        engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\n      } else {\n        engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\n      }\n      return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just before the rendering process\n     * @param func defines the function to call before rendering this mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"registerBeforeRender\",\n    value: function registerBeforeRender(func) {\n      this.onBeforeRenderObservable.add(func);\n      return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called before the rendering\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unregisterBeforeRender\",\n    value: function unregisterBeforeRender(func) {\n      this.onBeforeRenderObservable.removeCallback(func);\n      return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just after the rendering is complete\n     * @param func defines the function to call after rendering this mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"registerAfterRender\",\n    value: function registerAfterRender(func) {\n      this.onAfterRenderObservable.add(func);\n      return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called after the rendering.\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unregisterAfterRender\",\n    value: function unregisterAfterRender(func) {\n      this.onAfterRenderObservable.removeCallback(func);\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_getInstancesRenderList\",\n    value: function _getInstancesRenderList(subMeshId) {\n      var isReplacementMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this._instanceDataStorage.isFrozen) {\n        if (isReplacementMode) {\n          this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\n          this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\n          return this._instanceDataStorage.batchCacheReplacementModeInFrozenMode;\n        }\n        if (this._instanceDataStorage.previousBatch) {\n          return this._instanceDataStorage.previousBatch;\n        }\n      }\n      var scene = this.getScene();\n      var isInIntermediateRendering = scene._isInIntermediateRendering();\n      var onlyForInstances = isInIntermediateRendering ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate : this._internalAbstractMeshDataInfo._onlyForInstances;\n      var batchCache = this._instanceDataStorage.batchCache;\n      batchCache.mustReturn = false;\n      batchCache.renderSelf[subMeshId] = isReplacementMode || !onlyForInstances && this.isEnabled() && this.isVisible;\n      batchCache.visibleInstances[subMeshId] = null;\n      if (this._instanceDataStorage.visibleInstances && !isReplacementMode) {\n        var visibleInstances = this._instanceDataStorage.visibleInstances;\n        var currentRenderId = scene.getRenderId();\n        var defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\n        batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\n        if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\n          batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\n        }\n      }\n      batchCache.hardwareInstancedRendering[subMeshId] = !isReplacementMode && this._instanceDataStorage.hardwareInstancedRendering && batchCache.visibleInstances[subMeshId] !== null && batchCache.visibleInstances[subMeshId] !== undefined;\n      this._instanceDataStorage.previousBatch = batchCache;\n      return batchCache;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_renderWithInstances\",\n    value: function _renderWithInstances(subMesh, fillMode, batch, effect, engine) {\n      var _a;\n      var visibleInstances = batch.visibleInstances[subMesh._id];\n      var visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\n      var instanceStorage = this._instanceDataStorage;\n      var currentInstancesBufferSize = instanceStorage.instancesBufferSize;\n      var instancesBuffer = instanceStorage.instancesBuffer;\n      var instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\n      var matricesCount = visibleInstanceCount + 1;\n      var bufferSize = matricesCount * 16 * 4;\n      while (instanceStorage.instancesBufferSize < bufferSize) {\n        instanceStorage.instancesBufferSize *= 2;\n      }\n      if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n        instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n      }\n      if (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n        instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n      }\n      var offset = 0;\n      var instancesCount = 0;\n      var renderSelf = batch.renderSelf[subMesh._id];\n      var needUpdateBuffer = !instancesBuffer || currentInstancesBufferSize !== instanceStorage.instancesBufferSize || this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer;\n      if (!this._instanceDataStorage.manualUpdate && (!instanceStorage.isFrozen || needUpdateBuffer)) {\n        var world = this.getWorldMatrix();\n        if (renderSelf) {\n          if (this._scene.needsPreviousWorldMatrices) {\n            if (!instanceStorage.masterMeshPreviousWorldMatrix) {\n              instanceStorage.masterMeshPreviousWorldMatrix = world.clone();\n              instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n            } else {\n              instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n              instanceStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\n            }\n          }\n          world.copyToArray(instanceStorage.instancesData, offset);\n          offset += 16;\n          instancesCount++;\n        }\n        if (visibleInstances) {\n          if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && ((_a = subMesh.getMaterial()) === null || _a === void 0 ? void 0 : _a.needAlphaBlendingForMesh(subMesh.getRenderingMesh()))) {\n            var cameraPosition = this._scene.activeCamera.globalPosition;\n            for (var instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\n              var instanceMesh = visibleInstances[instanceIndex];\n              instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\n            }\n            visibleInstances.sort(function (m1, m2) {\n              return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\n            });\n          }\n          for (var _instanceIndex = 0; _instanceIndex < visibleInstances.length; _instanceIndex++) {\n            var instance = visibleInstances[_instanceIndex];\n            var matrix = instance.getWorldMatrix();\n            matrix.copyToArray(instanceStorage.instancesData, offset);\n            if (this._scene.needsPreviousWorldMatrices) {\n              if (!instance._previousWorldMatrix) {\n                instance._previousWorldMatrix = matrix.clone();\n                instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n              } else {\n                instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                instance._previousWorldMatrix.copyFrom(matrix);\n              }\n            }\n            offset += 16;\n            instancesCount++;\n          }\n        }\n      } else {\n        instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\n      }\n      if (needUpdateBuffer) {\n        if (instancesBuffer) {\n          instancesBuffer.dispose();\n        }\n        if (instancesPreviousBuffer) {\n          instancesPreviousBuffer.dispose();\n        }\n        instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\n        instanceStorage.instancesBuffer = instancesBuffer;\n        if (!this._userInstancedBuffersStorage) {\n          this._userInstancedBuffersStorage = {\n            data: {},\n            vertexBuffers: {},\n            strides: {},\n            sizes: {},\n            vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined\n          };\n        }\n        this._userInstancedBuffersStorage.vertexBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\n        if (this._scene.needsPreviousWorldMatrices) {\n          instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\n          instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\n        }\n        this._invalidateInstanceVertexArrayObject();\n      } else {\n        if (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) {\n          instancesBuffer.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n          if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\n            instancesPreviousBuffer.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\n          }\n        }\n      }\n      this._processInstancedBuffers(visibleInstances, renderSelf);\n      // Stats\n      this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n      // Draw\n      if (engine._currentDrawContext) {\n        engine._currentDrawContext.useInstancing = true;\n      }\n      this._bind(subMesh, effect, fillMode);\n      this._draw(subMesh, fillMode, instancesCount);\n      // Write current matrices as previous matrices in case of manual update\n      // Default behaviour when previous matrices are not specified explicitly\n      // Will break if instances number/order changes\n      if (this._scene.needsPreviousWorldMatrices && !needUpdateBuffer && this._instanceDataStorage.manualUpdate && (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) && !this._instanceDataStorage.previousManualUpdate) {\n        instancesPreviousBuffer.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n      }\n      engine.unbindInstanceAttributes();\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_renderWithThinInstances\",\n    value: function _renderWithThinInstances(subMesh, fillMode, effect, engine) {\n      var _a, _b;\n      // Stats\n      var instancesCount = (_b = (_a = this._thinInstanceDataStorage) === null || _a === void 0 ? void 0 : _a.instancesCount) !== null && _b !== void 0 ? _b : 0;\n      this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n      // Draw\n      if (engine._currentDrawContext) {\n        engine._currentDrawContext.useInstancing = true;\n      }\n      this._bind(subMesh, effect, fillMode);\n      this._draw(subMesh, fillMode, instancesCount);\n      // Write current matrices as previous matrices\n      // Default behaviour when previous matrices are not specified explicitly\n      // Will break if instances number/order changes\n      if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\n        if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\n          this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\n        } else {\n          this._thinInstanceDataStorage.previousMatrixBuffer.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\n        }\n      }\n      engine.unbindInstanceAttributes();\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"_processInstancedBuffers\",\n    value: function _processInstancedBuffers(visibleInstances, renderSelf) {\n      // Do nothing\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_processRendering\",\n    value: function _processRendering(renderingMesh, subMesh, effect, fillMode, batch, hardwareInstancedRendering, onBeforeDraw, effectiveMaterial) {\n      var scene = this.getScene();\n      var engine = scene.getEngine();\n      fillMode = this._getRenderingFillMode(fillMode);\n      if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\n        this._renderWithThinInstances(subMesh, fillMode, effect, engine);\n        return this;\n      }\n      if (hardwareInstancedRendering) {\n        this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\n      } else {\n        if (engine._currentDrawContext) {\n          engine._currentDrawContext.useInstancing = false;\n        }\n        var instanceCount = 0;\n        if (batch.renderSelf[subMesh._id]) {\n          // Draw\n          if (onBeforeDraw) {\n            onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\n          }\n          instanceCount++;\n          this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\n        }\n        var visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\n        if (visibleInstancesForSubMesh) {\n          var visibleInstanceCount = visibleInstancesForSubMesh.length;\n          instanceCount += visibleInstanceCount;\n          // Stats\n          for (var instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\n            var instance = visibleInstancesForSubMesh[instanceIndex];\n            // World\n            var world = instance.getWorldMatrix();\n            if (onBeforeDraw) {\n              onBeforeDraw(true, world, effectiveMaterial);\n            }\n            // Draw\n            this._draw(subMesh, fillMode);\n          }\n        }\n        // Stats\n        scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_rebuild\",\n    value: function _rebuild() {\n      var dispose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this._instanceDataStorage.instancesBuffer) {\n        // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n        if (dispose) {\n          this._instanceDataStorage.instancesBuffer.dispose();\n        }\n        this._instanceDataStorage.instancesBuffer = null;\n      }\n      if (this._userInstancedBuffersStorage) {\n        for (var kind in this._userInstancedBuffersStorage.vertexBuffers) {\n          var buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\n          if (buffer) {\n            // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n            if (dispose) {\n              buffer.dispose();\n            }\n            this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\n          }\n        }\n        if (this._userInstancedBuffersStorage.vertexArrayObjects) {\n          this._userInstancedBuffersStorage.vertexArrayObjects = {};\n        }\n      }\n      this._internalMeshDataInfo._effectiveMaterial = null;\n      _get(_getPrototypeOf(Mesh.prototype), \"_rebuild\", this).call(this, dispose);\n    }\n    /** @internal */\n  }, {\n    key: \"_freeze\",\n    value: function _freeze() {\n      if (!this.subMeshes) {\n        return;\n      }\n      // Prepare batches\n      for (var index = 0; index < this.subMeshes.length; index++) {\n        this._getInstancesRenderList(index);\n      }\n      this._internalMeshDataInfo._effectiveMaterial = null;\n      this._instanceDataStorage.isFrozen = true;\n    }\n    /** @internal */\n  }, {\n    key: \"_unFreeze\",\n    value: function _unFreeze() {\n      this._instanceDataStorage.isFrozen = false;\n      this._instanceDataStorage.previousBatch = null;\n    }\n    /**\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\n     * @param subMesh defines the subMesh to render\n     * @param enableAlphaMode defines if alpha mode can be changed\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\n     * @returns the current mesh\n     */\n  }, {\n    key: \"render\",\n    value: function render(subMesh, enableAlphaMode, effectiveMeshReplacement) {\n      var _a, _b, _c;\n      var scene = this.getScene();\n      if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\n        this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n      } else {\n        this._internalAbstractMeshDataInfo._isActive = false;\n      }\n      if (this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\n        return this;\n      }\n      // Managing instances\n      var batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\n      if (batch.mustReturn) {\n        return this;\n      }\n      // Checking geometry state\n      if (!this._geometry || !this._geometry.getVertexBuffers() || !this._unIndexed && !this._geometry.getIndexBuffer()) {\n        return this;\n      }\n      var engine = scene.getEngine();\n      var oldCameraMaxZ = 0;\n      var oldCamera = null;\n      if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\n        oldCameraMaxZ = scene.activeCamera.maxZ;\n        oldCamera = scene.activeCamera;\n        scene.activeCamera.maxZ = 0;\n        scene.updateTransformMatrix(true);\n      }\n      if (this._internalMeshDataInfo._onBeforeRenderObservable) {\n        this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\n      }\n      var renderingMesh = subMesh.getRenderingMesh();\n      var hardwareInstancedRendering = batch.hardwareInstancedRendering[subMesh._id] || renderingMesh.hasThinInstances || !!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh;\n      var instanceDataStorage = this._instanceDataStorage;\n      var material = subMesh.getMaterial();\n      if (!material) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      // Material\n      if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\n        if (material._storeEffectOnSubMeshes) {\n          if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n            if (oldCamera) {\n              oldCamera.maxZ = oldCameraMaxZ;\n              scene.updateTransformMatrix(true);\n            }\n            return this;\n          }\n        } else if (!material.isReady(this, hardwareInstancedRendering)) {\n          if (oldCamera) {\n            oldCamera.maxZ = oldCameraMaxZ;\n            scene.updateTransformMatrix(true);\n          }\n          return this;\n        }\n        this._internalMeshDataInfo._effectiveMaterial = material;\n      } else if (material._storeEffectOnSubMeshes && !((_a = subMesh.effect) === null || _a === void 0 ? void 0 : _a._wasPreviouslyReady) || !material._storeEffectOnSubMeshes && !((_b = material.getEffect()) === null || _b === void 0 ? void 0 : _b._wasPreviouslyReady)) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      // Alpha mode\n      if (enableAlphaMode) {\n        engine.setAlphaMode(this._internalMeshDataInfo._effectiveMaterial.alphaMode);\n      }\n      var drawWrapper;\n      if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\n        drawWrapper = subMesh._drawWrapper;\n      } else {\n        drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\n      }\n      var effect = (_c = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.effect) !== null && _c !== void 0 ? _c : null;\n      var _iterator8 = _createForOfIteratorHelper(scene._beforeRenderingMeshStage),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var step = _step8.value;\n          step.action(this, subMesh, batch, effect);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      if (!drawWrapper || !effect) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      var effectiveMesh = effectiveMeshReplacement || this;\n      var sideOrientation;\n      if (!instanceDataStorage.isFrozen && (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling || this.overrideMaterialSideOrientation !== null)) {\n        var mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n        sideOrientation = this.overrideMaterialSideOrientation;\n        if (sideOrientation == null) {\n          sideOrientation = this._internalMeshDataInfo._effectiveMaterial.sideOrientation;\n        }\n        if (mainDeterminant < 0) {\n          sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n        }\n        instanceDataStorage.sideOrientation = sideOrientation;\n      } else {\n        sideOrientation = instanceDataStorage.sideOrientation;\n      }\n      var reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, sideOrientation);\n      if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\n        engine.setDepthWrite(true);\n      }\n      // Bind\n      var effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\n      var fillMode = effectiveMaterial.fillMode;\n      if (this._internalMeshDataInfo._onBeforeBindObservable) {\n        this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\n      }\n      if (!hardwareInstancedRendering) {\n        // Binding will be done later because we need to add more info to the VB\n        this._bind(subMesh, effect, fillMode, false);\n      }\n      var world = effectiveMesh.getWorldMatrix();\n      if (effectiveMaterial._storeEffectOnSubMeshes) {\n        effectiveMaterial.bindForSubMesh(world, this, subMesh);\n      } else {\n        effectiveMaterial.bind(world, this);\n      }\n      if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\n        engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n        engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n        if (this._internalMeshDataInfo._onBetweenPassObservable) {\n          this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\n        }\n      }\n      // Draw\n      this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n      // Unbind\n      this._internalMeshDataInfo._effectiveMaterial.unbind();\n      var _iterator9 = _createForOfIteratorHelper(scene._afterRenderingMeshStage),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step10 = _step9.value;\n          _step10.action(this, subMesh, batch, effect);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      if (this._internalMeshDataInfo._onAfterRenderObservable) {\n        this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\n      }\n      if (oldCamera) {\n        oldCamera.maxZ = oldCameraMaxZ;\n        scene.updateTransformMatrix(true);\n      }\n      if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\n        this._freeze();\n      }\n      return this;\n    }\n    /**\n     *   Renormalize the mesh and patch it up if there are no weights\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\n     *   However in the case of zero weights then we set just a single influence to 1.\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\n     */\n  }, {\n    key: \"cleanMatrixWeights\",\n    value: function cleanMatrixWeights() {\n      if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\n          this._normalizeSkinWeightsAndExtra();\n        } else {\n          this._normalizeSkinFourWeights();\n        }\n      }\n    }\n    // faster 4 weight version.\n  }, {\n    key: \"_normalizeSkinFourWeights\",\n    value: function _normalizeSkinFourWeights() {\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      var numWeights = matricesWeights.length;\n      for (var a = 0; a < numWeights; a += 4) {\n        // accumulate weights\n        var t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          matricesWeights[a] = 1;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          matricesWeights[a] *= recip;\n          matricesWeights[a + 1] *= recip;\n          matricesWeights[a + 2] *= recip;\n          matricesWeights[a + 3] *= recip;\n        }\n      }\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n    }\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\n  }, {\n    key: \"_normalizeSkinWeightsAndExtra\",\n    value: function _normalizeSkinWeightsAndExtra() {\n      var matricesWeightsExtra = this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      var numWeights = matricesWeights.length;\n      for (var a = 0; a < numWeights; a += 4) {\n        // accumulate weights\n        var t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n        t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          matricesWeights[a] = 1;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          matricesWeights[a] *= recip;\n          matricesWeights[a + 1] *= recip;\n          matricesWeights[a + 2] *= recip;\n          matricesWeights[a + 3] *= recip;\n          // same goes for extras\n          matricesWeightsExtra[a] *= recip;\n          matricesWeightsExtra[a + 1] *= recip;\n          matricesWeightsExtra[a + 2] *= recip;\n          matricesWeightsExtra[a + 3] *= recip;\n        }\n      }\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\n    }\n    /**\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\n     * the user know there was an issue with importing the mesh\n     * @returns a validation object with skinned, valid and report string\n     */\n  }, {\n    key: \"validateSkinning\",\n    value: function validateSkinning() {\n      var matricesWeightsExtra = this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      if (matricesWeights === null || this.skeleton == null) {\n        return {\n          skinned: false,\n          valid: true,\n          report: \"not skinned\"\n        };\n      }\n      var numWeights = matricesWeights.length;\n      var numberNotSorted = 0;\n      var missingWeights = 0;\n      var maxUsedWeights = 0;\n      var numberNotNormalized = 0;\n      var numInfluences = matricesWeightsExtra === null ? 4 : 8;\n      var usedWeightCounts = new Array();\n      for (var a = 0; a <= numInfluences; a++) {\n        usedWeightCounts[a] = 0;\n      }\n      var toleranceEpsilon = 0.001;\n      for (var _a2 = 0; _a2 < numWeights; _a2 += 4) {\n        var lastWeight = matricesWeights[_a2];\n        var t = lastWeight;\n        var usedWeights = t === 0 ? 0 : 1;\n        for (var b = 1; b < numInfluences; b++) {\n          var d = b < 4 ? matricesWeights[_a2 + b] : matricesWeightsExtra[_a2 + b - 4];\n          if (d > lastWeight) {\n            numberNotSorted++;\n          }\n          if (d !== 0) {\n            usedWeights++;\n          }\n          t += d;\n          lastWeight = d;\n        }\n        // count the buffer weights usage\n        usedWeightCounts[usedWeights]++;\n        // max influences\n        if (usedWeights > maxUsedWeights) {\n          maxUsedWeights = usedWeights;\n        }\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          missingWeights++;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          var tolerance = 0;\n          for (var _b2 = 0; _b2 < numInfluences; _b2++) {\n            if (_b2 < 4) {\n              tolerance += Math.abs(matricesWeights[_a2 + _b2] - matricesWeights[_a2 + _b2] * recip);\n            } else {\n              tolerance += Math.abs(matricesWeightsExtra[_a2 + _b2 - 4] - matricesWeightsExtra[_a2 + _b2 - 4] * recip);\n            }\n          }\n          // arbitrary epsilon value for dictating not normalized\n          if (tolerance > toleranceEpsilon) {\n            numberNotNormalized++;\n          }\n        }\n      }\n      // validate bone indices are in range of the skeleton\n      var numBones = this.skeleton.bones.length;\n      var matricesIndices = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n      var matricesIndicesExtra = this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\n      var numBadBoneIndices = 0;\n      for (var _a3 = 0; _a3 < numWeights; _a3 += 4) {\n        for (var _b3 = 0; _b3 < numInfluences; _b3++) {\n          var index = _b3 < 4 ? matricesIndices[_a3 + _b3] : matricesIndicesExtra[_a3 + _b3 - 4];\n          if (index >= numBones || index < 0) {\n            numBadBoneIndices++;\n          }\n        }\n      }\n      // log mesh stats\n      var output = \"Number of Weights = \" + numWeights / 4 + \"\\nMaximum influences = \" + maxUsedWeights + \"\\nMissing Weights = \" + missingWeights + \"\\nNot Sorted = \" + numberNotSorted + \"\\nNot Normalized = \" + numberNotNormalized + \"\\nWeightCounts = [\" + usedWeightCounts + \"]\" + \"\\nNumber of bones = \" + numBones + \"\\nBad Bone Indices = \" + numBadBoneIndices;\n      return {\n        skinned: true,\n        valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0,\n        report: output\n      };\n    }\n    /** @internal */\n  }, {\n    key: \"_checkDelayState\",\n    value: function _checkDelayState() {\n      var scene = this.getScene();\n      if (this._geometry) {\n        this._geometry.load(scene);\n      } else if (this.delayLoadState === 4) {\n        this.delayLoadState = 2;\n        this._queueLoad(scene);\n      }\n      return this;\n    }\n  }, {\n    key: \"_queueLoad\",\n    value: function _queueLoad(scene) {\n      var _this2 = this;\n      scene.addPendingData(this);\n      var getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\n      Tools.LoadFile(this.delayLoadingFile, function (data) {\n        if (data instanceof ArrayBuffer) {\n          _this2._delayLoadingFunction(data, _this2);\n        } else {\n          _this2._delayLoadingFunction(JSON.parse(data), _this2);\n        }\n        _this2.instances.forEach(function (instance) {\n          instance.refreshBoundingInfo();\n          instance._syncSubMeshes();\n        });\n        _this2.delayLoadState = 1;\n        scene.removePendingData(_this2);\n      }, function () {}, scene.offlineProvider, getBinaryData);\n      return this;\n    }\n    /**\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\n     * A mesh is in the frustum if its bounding box intersects the frustum\n     * @param frustumPlanes defines the frustum to test\n     * @returns true if the mesh is in the frustum planes\n     */\n  }, {\n    key: \"isInFrustum\",\n    value: function isInFrustum(frustumPlanes) {\n      if (this.delayLoadState === 2) {\n        return false;\n      }\n      if (!_get(_getPrototypeOf(Mesh.prototype), \"isInFrustum\", this).call(this, frustumPlanes)) {\n        return false;\n      }\n      this._checkDelayState();\n      return true;\n    }\n    /**\n     * Sets the mesh material by the material or multiMaterial `id` property\n     * @param id is a string identifying the material or the multiMaterial\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setMaterialById\",\n    value: function setMaterialById(id) {\n      var materials = this.getScene().materials;\n      var index;\n      for (index = materials.length - 1; index > -1; index--) {\n        if (materials[index].id === id) {\n          this.material = materials[index];\n          return this;\n        }\n      }\n      // Multi\n      var multiMaterials = this.getScene().multiMaterials;\n      for (index = multiMaterials.length - 1; index > -1; index--) {\n        if (multiMaterials[index].id === id) {\n          this.material = multiMaterials[index];\n          return this;\n        }\n      }\n      return this;\n    }\n    /**\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\n     * @returns an array of IAnimatable\n     */\n  }, {\n    key: \"getAnimatables\",\n    value: function getAnimatables() {\n      var results = new Array();\n      if (this.material) {\n        results.push(this.material);\n      }\n      if (this.skeleton) {\n        results.push(this.skeleton);\n      }\n      return results;\n    }\n    /**\n     * Modifies the mesh geometry according to the passed transformation matrix.\n     * This method returns nothing, but it really modifies the mesh even if it's originally not set as updatable.\n     * The mesh normals are modified using the same transformation.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @param transform defines the transform matrix to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\n     * @returns the current mesh\n     */\n  }, {\n    key: \"bakeTransformIntoVertices\",\n    value: function bakeTransformIntoVertices(transform) {\n      // Position\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n        return this;\n      }\n      var submeshes = this.subMeshes.splice(0);\n      this._resetPointsArrayCache();\n      var data = this.getVerticesData(VertexBuffer.PositionKind);\n      var temp = Vector3.Zero();\n      var index;\n      for (index = 0; index < data.length; index += 3) {\n        Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).toArray(data, index);\n      }\n      this.setVerticesData(VertexBuffer.PositionKind, data, this.getVertexBuffer(VertexBuffer.PositionKind).isUpdatable());\n      // Normals\n      if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n        data = this.getVerticesData(VertexBuffer.NormalKind);\n        for (index = 0; index < data.length; index += 3) {\n          Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).normalize().toArray(data, index);\n        }\n        this.setVerticesData(VertexBuffer.NormalKind, data, this.getVertexBuffer(VertexBuffer.NormalKind).isUpdatable());\n      }\n      // flip faces?\n      if (transform.determinant() < 0) {\n        this.flipFaces();\n      }\n      // Restore submeshes\n      this.releaseSubMeshes();\n      this.subMeshes = submeshes;\n      return this;\n    }\n    /**\n     * Modifies the mesh geometry according to its own current World Matrix.\n     * The mesh World Matrix is then reset.\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\n     * @param bakeIndependentlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\n     * @returns the current mesh\n     */\n  }, {\n    key: \"bakeCurrentTransformIntoVertices\",\n    value: function bakeCurrentTransformIntoVertices() {\n      var bakeIndependentlyOfChildren = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\n      this.resetLocalMatrix(bakeIndependentlyOfChildren);\n      return this;\n    }\n    // Cache\n    /** @internal */\n  }, {\n    key: \"_positions\",\n    get: function get() {\n      if (this._internalAbstractMeshDataInfo._positions) {\n        return this._internalAbstractMeshDataInfo._positions;\n      }\n      if (this._geometry) {\n        return this._geometry._positions;\n      }\n      return null;\n    }\n    /** @internal */\n  }, {\n    key: \"_resetPointsArrayCache\",\n    value: function _resetPointsArrayCache() {\n      if (this._geometry) {\n        this._geometry._resetPointsArrayCache();\n      }\n      return this;\n    }\n    /** @internal */\n  }, {\n    key: \"_generatePointsArray\",\n    value: function _generatePointsArray() {\n      if (this._geometry) {\n        return this._geometry._generatePointsArray();\n      }\n      return false;\n    }\n    /**\n     * Returns a new Mesh object generated from the current mesh properties.\n     * This method must not get confused with createInstance()\n     * @param name is a string, the name given to the new mesh\n     * @param newParent can be any Node object (default `null`)\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\n     * @returns a new mesh\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var newParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var doNotCloneChildren = arguments.length > 2 ? arguments[2] : undefined;\n      var clonePhysicsImpostor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return new Mesh(name, this.getScene(), newParent, this, doNotCloneChildren, clonePhysicsImpostor);\n    }\n    /**\n     * Releases resources associated with this mesh.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose(doNotRecurse) {\n      var disposeMaterialAndTextures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.morphTargetManager = null;\n      if (this._geometry) {\n        this._geometry.releaseForMesh(this, true);\n      }\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (internalDataInfo._onBeforeDrawObservable) {\n        internalDataInfo._onBeforeDrawObservable.clear();\n      }\n      if (internalDataInfo._onBeforeBindObservable) {\n        internalDataInfo._onBeforeBindObservable.clear();\n      }\n      if (internalDataInfo._onBeforeRenderObservable) {\n        internalDataInfo._onBeforeRenderObservable.clear();\n      }\n      if (internalDataInfo._onAfterRenderObservable) {\n        internalDataInfo._onAfterRenderObservable.clear();\n      }\n      if (internalDataInfo._onBetweenPassObservable) {\n        internalDataInfo._onBetweenPassObservable.clear();\n      }\n      // Sources\n      if (this._scene.useClonedMeshMap) {\n        if (internalDataInfo.meshMap) {\n          for (var uniqueId in internalDataInfo.meshMap) {\n            var mesh = internalDataInfo.meshMap[uniqueId];\n            if (mesh) {\n              mesh._internalMeshDataInfo._source = null;\n              internalDataInfo.meshMap[uniqueId] = undefined;\n            }\n          }\n        }\n        if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\n          internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\n        }\n      } else {\n        var meshes = this.getScene().meshes;\n        var _iterator10 = _createForOfIteratorHelper(meshes),\n          _step11;\n        try {\n          for (_iterator10.s(); !(_step11 = _iterator10.n()).done;) {\n            var abstractMesh = _step11.value;\n            var _mesh = abstractMesh;\n            if (_mesh._internalMeshDataInfo && _mesh._internalMeshDataInfo._source && _mesh._internalMeshDataInfo._source === this) {\n              _mesh._internalMeshDataInfo._source = null;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n      internalDataInfo._source = null;\n      this._instanceDataStorage.visibleInstances = {};\n      // Instances\n      this._disposeInstanceSpecificData();\n      // Thin instances\n      this._disposeThinInstanceSpecificData();\n      if (this._internalMeshDataInfo._checkReadinessObserver) {\n        this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\n      }\n      _get(_getPrototypeOf(Mesh.prototype), \"dispose\", this).call(this, doNotRecurse, disposeMaterialAndTextures);\n    }\n    /** @internal */\n  }, {\n    key: \"_disposeInstanceSpecificData\",\n    value: function _disposeInstanceSpecificData() {\n      // Do nothing\n    }\n    /** @internal */\n  }, {\n    key: \"_disposeThinInstanceSpecificData\",\n    value: function _disposeThinInstanceSpecificData() {\n      // Do nothing\n    }\n    /** @internal */\n  }, {\n    key: \"_invalidateInstanceVertexArrayObject\",\n    value: function _invalidateInstanceVertexArrayObject() {\n      // Do nothing\n    }\n    /**\n     * Modifies the mesh geometry according to a displacement map.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param url is a string, the URL from the image file is to be downloaded.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n  }, {\n    key: \"applyDisplacementMap\",\n    value: function applyDisplacementMap(url, minHeight, maxHeight, onSuccess, uvOffset, uvScale) {\n      var _this3 = this;\n      var forceUpdate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var scene = this.getScene();\n      var onload = function onload(img) {\n        // Getting height map data\n        var heightMapWidth = img.width;\n        var heightMapHeight = img.height;\n        var canvas = _this3.getEngine().createCanvas(heightMapWidth, heightMapHeight);\n        var context = canvas.getContext(\"2d\");\n        context.drawImage(img, 0, 0);\n        // Create VertexData from map data\n        //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n        var buffer = context.getImageData(0, 0, heightMapWidth, heightMapHeight).data;\n        _this3.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\n        //execute success callback, if set\n        if (onSuccess) {\n          onSuccess(_this3);\n        }\n      };\n      Tools.LoadImage(url, onload, function () {}, scene.offlineProvider);\n      return this;\n    }\n    /**\n     * Modifies the mesh geometry according to a displacementMap buffer.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\n     * @param heightMapWidth is the width of the buffer image.\n     * @param heightMapHeight is the height of the buffer image.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n  }, {\n    key: \"applyDisplacementMapFromBuffer\",\n    value: function applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale) {\n      var forceUpdate = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\n        Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\n        return this;\n      }\n      var positions = this.getVerticesData(VertexBuffer.PositionKind, true, true);\n      var normals = this.getVerticesData(VertexBuffer.NormalKind);\n      var uvs = this.getVerticesData(VertexBuffer.UVKind);\n      var position = Vector3.Zero();\n      var normal = Vector3.Zero();\n      var uv = Vector2.Zero();\n      uvOffset = uvOffset || Vector2.Zero();\n      uvScale = uvScale || new Vector2(1, 1);\n      for (var index = 0; index < positions.length; index += 3) {\n        Vector3.FromArrayToRef(positions, index, position);\n        Vector3.FromArrayToRef(normals, index, normal);\n        Vector2.FromArrayToRef(uvs, index / 3 * 2, uv);\n        // Compute height\n        var u = Math.abs(uv.x * uvScale.x + uvOffset.x % 1) * (heightMapWidth - 1) % heightMapWidth | 0;\n        var v = Math.abs(uv.y * uvScale.y + uvOffset.y % 1) * (heightMapHeight - 1) % heightMapHeight | 0;\n        var pos = (u + v * heightMapWidth) * 4;\n        var r = buffer[pos] / 255.0;\n        var g = buffer[pos + 1] / 255.0;\n        var b = buffer[pos + 2] / 255.0;\n        var gradient = r * 0.3 + g * 0.59 + b * 0.11;\n        normal.normalize();\n        normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\n        position = position.add(normal);\n        position.toArray(positions, index);\n      }\n      VertexData.ComputeNormals(positions, this.getIndices(), normals);\n      if (forceUpdate) {\n        this.setVerticesData(VertexBuffer.PositionKind, positions);\n        this.setVerticesData(VertexBuffer.NormalKind, normals);\n        this.setVerticesData(VertexBuffer.UVKind, uvs);\n      } else {\n        this.updateVerticesData(VertexBuffer.PositionKind, positions);\n        this.updateVerticesData(VertexBuffer.NormalKind, normals);\n      }\n      return this;\n    }\n    /**\n     * Modify the mesh to get a flat shading rendering.\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n  }, {\n    key: \"convertToFlatShadedMesh\",\n    value: function convertToFlatShadedMesh() {\n      var kinds = this.getVerticesDataKinds();\n      var vbs = {};\n      var data = {};\n      var newdata = {};\n      var updatableNormals = false;\n      var kindIndex;\n      var kind;\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        var vertexBuffer = this.getVertexBuffer(kind);\n        // Check data consistency\n        var vertexData = vertexBuffer.getData();\n        if (vertexData instanceof Array || vertexData instanceof Float32Array) {\n          if (vertexData.length === 0) {\n            continue;\n          }\n        }\n        if (kind === VertexBuffer.NormalKind) {\n          updatableNormals = vertexBuffer.isUpdatable();\n          kinds.splice(kindIndex, 1);\n          kindIndex--;\n          continue;\n        }\n        vbs[kind] = vertexBuffer;\n        data[kind] = this.getVerticesData(kind);\n        newdata[kind] = [];\n      }\n      // Save previous submeshes\n      var previousSubmeshes = this.subMeshes.slice(0);\n      var indices = this.getIndices();\n      var totalIndices = this.getTotalIndices();\n      // Generating unique vertices per face\n      var index;\n      for (index = 0; index < totalIndices; index++) {\n        var vertexIndex = indices[index];\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n          kind = kinds[kindIndex];\n          if (!vbs[kind]) {\n            continue;\n          }\n          var stride = vbs[kind].getStrideSize();\n          for (var offset = 0; offset < stride; offset++) {\n            newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n          }\n        }\n      }\n      // Updating faces & normal\n      var normals = [];\n      var positions = newdata[VertexBuffer.PositionKind];\n      var useRightHandedSystem = this.getScene().useRightHandedSystem;\n      var flipNormalGeneration;\n      if (useRightHandedSystem) {\n        flipNormalGeneration = this.overrideMaterialSideOrientation === 1;\n      } else {\n        flipNormalGeneration = this.overrideMaterialSideOrientation === 0;\n      }\n      for (index = 0; index < totalIndices; index += 3) {\n        indices[index] = index;\n        indices[index + 1] = index + 1;\n        indices[index + 2] = index + 2;\n        var p1 = Vector3.FromArray(positions, index * 3);\n        var p2 = Vector3.FromArray(positions, (index + 1) * 3);\n        var p3 = Vector3.FromArray(positions, (index + 2) * 3);\n        var p1p2 = p1.subtract(p2);\n        var p3p2 = p3.subtract(p2);\n        var normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\n        if (flipNormalGeneration) {\n          normal.scaleInPlace(-1);\n        }\n        // Store same normals for every vertex\n        for (var localIndex = 0; localIndex < 3; localIndex++) {\n          normals.push(normal.x);\n          normals.push(normal.y);\n          normals.push(normal.z);\n        }\n      }\n      this.setIndices(indices);\n      this.setVerticesData(VertexBuffer.NormalKind, normals, updatableNormals);\n      // Updating vertex buffers\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        if (!newdata[kind]) {\n          continue;\n        }\n        this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable());\n      }\n      // Updating submeshes\n      this.releaseSubMeshes();\n      for (var submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n        var previousOne = previousSubmeshes[submeshIndex];\n        SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n      }\n      this.synchronizeInstances();\n      return this;\n    }\n    /**\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\n     * In other words, more vertices, no more indices and a single bigger VBO.\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n  }, {\n    key: \"convertToUnIndexedMesh\",\n    value: function convertToUnIndexedMesh() {\n      var kinds = this.getVerticesDataKinds();\n      var vbs = {};\n      var data = {};\n      var newdata = {};\n      var kindIndex;\n      var kind;\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        var vertexBuffer = this.getVertexBuffer(kind);\n        vbs[kind] = vertexBuffer;\n        data[kind] = vbs[kind].getData();\n        newdata[kind] = [];\n      }\n      // Save previous submeshes\n      var previousSubmeshes = this.subMeshes.slice(0);\n      var indices = this.getIndices();\n      var totalIndices = this.getTotalIndices();\n      // Generating unique vertices per face\n      var index;\n      for (index = 0; index < totalIndices; index++) {\n        var vertexIndex = indices[index];\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n          kind = kinds[kindIndex];\n          var stride = vbs[kind].getStrideSize();\n          for (var offset = 0; offset < stride; offset++) {\n            newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n          }\n        }\n      }\n      // Updating indices\n      for (index = 0; index < totalIndices; index += 3) {\n        indices[index] = index;\n        indices[index + 1] = index + 1;\n        indices[index + 2] = index + 2;\n      }\n      this.setIndices(indices);\n      // Updating vertex buffers\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable(), vbs[kind].getStrideSize());\n      }\n      // Updating submeshes\n      this.releaseSubMeshes();\n      for (var submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n        var previousOne = previousSubmeshes[submeshIndex];\n        SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n      }\n      this._unIndexed = true;\n      this.synchronizeInstances();\n      return this;\n    }\n    /**\n     * Inverses facet orientations.\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param flipNormals will also inverts the normals\n     * @returns current mesh\n     */\n  }, {\n    key: \"flipFaces\",\n    value: function flipFaces() {\n      var flipNormals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var i;\n      if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertex_data.normals) {\n        for (i = 0; i < vertex_data.normals.length; i++) {\n          vertex_data.normals[i] *= -1;\n        }\n      }\n      if (vertex_data.indices) {\n        var temp;\n        for (i = 0; i < vertex_data.indices.length; i += 3) {\n          // reassign indices\n          temp = vertex_data.indices[i + 1];\n          vertex_data.indices[i + 1] = vertex_data.indices[i + 2];\n          vertex_data.indices[i + 2] = temp;\n        }\n      }\n      vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      return this;\n    }\n    /**\n     * Increase the number of facets and hence vertices in a mesh\n     * Vertex normals are interpolated from existing vertex normals\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\n     */\n  }, {\n    key: \"increaseVertices\",\n    value: function increaseVertices() {\n      var numberPerEdge = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var currentIndices = vertex_data.indices && !Array.isArray(vertex_data.indices) && Array.from ? Array.from(vertex_data.indices) : vertex_data.indices;\n      var positions = vertex_data.positions && !Array.isArray(vertex_data.positions) && Array.from ? Array.from(vertex_data.positions) : vertex_data.positions;\n      var uvs = vertex_data.uvs && !Array.isArray(vertex_data.uvs) && Array.from ? Array.from(vertex_data.uvs) : vertex_data.uvs;\n      var normals = vertex_data.normals && !Array.isArray(vertex_data.normals) && Array.from ? Array.from(vertex_data.normals) : vertex_data.normals;\n      if (!currentIndices || !positions) {\n        Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\n      } else {\n        vertex_data.indices = currentIndices;\n        vertex_data.positions = positions;\n        if (uvs) {\n          vertex_data.uvs = uvs;\n        }\n        if (normals) {\n          vertex_data.normals = normals;\n        }\n        var segments = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\n        var tempIndices = new Array();\n        for (var i = 0; i < segments + 1; i++) {\n          tempIndices[i] = new Array();\n        }\n        var a; //vertex index of one end of a side\n        var b; //vertex index of other end of the side\n        var deltaPosition = new Vector3(0, 0, 0);\n        var deltaNormal = new Vector3(0, 0, 0);\n        var deltaUV = new Vector2(0, 0);\n        var indices = new Array();\n        var vertexIndex = new Array();\n        var side = new Array();\n        var len;\n        var positionPtr = positions.length;\n        var uvPtr;\n        if (uvs) {\n          uvPtr = uvs.length;\n        }\n        var normalsPtr;\n        if (normals) {\n          normalsPtr = normals.length;\n        }\n        for (var _i = 0; _i < currentIndices.length; _i += 3) {\n          vertexIndex[0] = currentIndices[_i];\n          vertexIndex[1] = currentIndices[_i + 1];\n          vertexIndex[2] = currentIndices[_i + 2];\n          for (var j = 0; j < 3; j++) {\n            a = vertexIndex[j];\n            b = vertexIndex[(j + 1) % 3];\n            if (side[a] === undefined && side[b] === undefined) {\n              side[a] = new Array();\n              side[b] = new Array();\n            } else {\n              if (side[a] === undefined) {\n                side[a] = new Array();\n              }\n              if (side[b] === undefined) {\n                side[b] = new Array();\n              }\n            }\n            if (side[a][b] === undefined && side[b][a] === undefined) {\n              side[a][b] = [];\n              deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\n              deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\n              deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\n              if (normals) {\n                deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\n                deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\n                deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\n              }\n              if (uvs) {\n                deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\n                deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\n              }\n              side[a][b].push(a);\n              for (var k = 1; k < segments; k++) {\n                side[a][b].push(positions.length / 3);\n                positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\n                positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\n                positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\n                if (normals) {\n                  normals[normalsPtr++] = normals[3 * a] + k * deltaNormal.x;\n                  normals[normalsPtr++] = normals[3 * a + 1] + k * deltaNormal.y;\n                  normals[normalsPtr++] = normals[3 * a + 2] + k * deltaNormal.z;\n                }\n                if (uvs) {\n                  uvs[uvPtr++] = uvs[2 * a] + k * deltaUV.x;\n                  uvs[uvPtr++] = uvs[2 * a + 1] + k * deltaUV.y;\n                }\n              }\n              side[a][b].push(b);\n              side[b][a] = new Array();\n              len = side[a][b].length;\n              for (var idx = 0; idx < len; idx++) {\n                side[b][a][idx] = side[a][b][len - 1 - idx];\n              }\n            }\n          }\n          //Calculate positions, normals and uvs of new internal vertices\n          tempIndices[0][0] = currentIndices[_i];\n          tempIndices[1][0] = side[currentIndices[_i]][currentIndices[_i + 1]][1];\n          tempIndices[1][1] = side[currentIndices[_i]][currentIndices[_i + 2]][1];\n          for (var _k = 2; _k < segments; _k++) {\n            tempIndices[_k][0] = side[currentIndices[_i]][currentIndices[_i + 1]][_k];\n            tempIndices[_k][_k] = side[currentIndices[_i]][currentIndices[_i + 2]][_k];\n            deltaPosition.x = (positions[3 * tempIndices[_k][_k]] - positions[3 * tempIndices[_k][0]]) / _k;\n            deltaPosition.y = (positions[3 * tempIndices[_k][_k] + 1] - positions[3 * tempIndices[_k][0] + 1]) / _k;\n            deltaPosition.z = (positions[3 * tempIndices[_k][_k] + 2] - positions[3 * tempIndices[_k][0] + 2]) / _k;\n            if (normals) {\n              deltaNormal.x = (normals[3 * tempIndices[_k][_k]] - normals[3 * tempIndices[_k][0]]) / _k;\n              deltaNormal.y = (normals[3 * tempIndices[_k][_k] + 1] - normals[3 * tempIndices[_k][0] + 1]) / _k;\n              deltaNormal.z = (normals[3 * tempIndices[_k][_k] + 2] - normals[3 * tempIndices[_k][0] + 2]) / _k;\n            }\n            if (uvs) {\n              deltaUV.x = (uvs[2 * tempIndices[_k][_k]] - uvs[2 * tempIndices[_k][0]]) / _k;\n              deltaUV.y = (uvs[2 * tempIndices[_k][_k] + 1] - uvs[2 * tempIndices[_k][0] + 1]) / _k;\n            }\n            for (var _j = 1; _j < _k; _j++) {\n              tempIndices[_k][_j] = positions.length / 3;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0]] + _j * deltaPosition.x;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0] + 1] + _j * deltaPosition.y;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0] + 2] + _j * deltaPosition.z;\n              if (normals) {\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0]] + _j * deltaNormal.x;\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0] + 1] + _j * deltaNormal.y;\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0] + 2] + _j * deltaNormal.z;\n              }\n              if (uvs) {\n                uvs[uvPtr++] = uvs[2 * tempIndices[_k][0]] + _j * deltaUV.x;\n                uvs[uvPtr++] = uvs[2 * tempIndices[_k][0] + 1] + _j * deltaUV.y;\n              }\n            }\n          }\n          tempIndices[segments] = side[currentIndices[_i + 1]][currentIndices[_i + 2]];\n          // reform indices\n          indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\n          for (var _k2 = 1; _k2 < segments; _k2++) {\n            var _j2 = void 0;\n            for (_j2 = 0; _j2 < _k2; _j2++) {\n              indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2], tempIndices[_k2 + 1][_j2 + 1]);\n              indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2 + 1], tempIndices[_k2][_j2 + 1]);\n            }\n            indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2], tempIndices[_k2 + 1][_j2 + 1]);\n          }\n        }\n        vertex_data.indices = indices;\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      }\n    }\n    /**\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\n     * This will undo any application of covertToFlatShadedMesh\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     */\n  }, {\n    key: \"forceSharedVertices\",\n    value: function forceSharedVertices() {\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var currentUVs = vertex_data.uvs;\n      var currentIndices = vertex_data.indices;\n      var currentPositions = vertex_data.positions;\n      var currentColors = vertex_data.colors;\n      var currentMatrixIndices = vertex_data.matricesIndices;\n      var currentMatrixWeights = vertex_data.matricesWeights;\n      var currentMatrixIndicesExtra = vertex_data.matricesIndicesExtra;\n      var currentMatrixWeightsExtra = vertex_data.matricesWeightsExtra;\n      if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\n        Logger.Warn(\"VertexData contains empty entries\");\n      } else {\n        var positions = new Array();\n        var indices = new Array();\n        var uvs = new Array();\n        var colors = new Array();\n        var matrixIndices = new Array();\n        var matrixWeights = new Array();\n        var matrixIndicesExtra = new Array();\n        var matrixWeightsExtra = new Array();\n        var pstring = new Array(); //lists facet vertex positions (a,b,c) as string \"a|b|c\"\n        var indexPtr = 0; // pointer to next available index value\n        var uniquePositions = {}; // unique vertex positions\n        var ptr; // pointer to element in uniquePositions\n        var facet;\n        for (var i = 0; i < currentIndices.length; i += 3) {\n          facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\n          pstring = new Array();\n          for (var j = 0; j < 3; j++) {\n            pstring[j] = \"\";\n            for (var k = 0; k < 3; k++) {\n              //small values make 0\n              if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\n                currentPositions[3 * facet[j] + k] = 0;\n              }\n              pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\n            }\n          }\n          //check facet vertices to see that none are repeated\n          // do not process any facet that has a repeated vertex, ie is a line\n          if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\n            //for each facet position check if already listed in uniquePositions\n            // if not listed add to uniquePositions and set index pointer\n            // if listed use its index in uniquePositions and new index pointer\n            for (var _j3 = 0; _j3 < 3; _j3++) {\n              ptr = uniquePositions[pstring[_j3]];\n              if (ptr === undefined) {\n                uniquePositions[pstring[_j3]] = indexPtr;\n                ptr = indexPtr++;\n                //not listed so add individual x, y, z coordinates to positions\n                for (var _k3 = 0; _k3 < 3; _k3++) {\n                  positions.push(currentPositions[3 * facet[_j3] + _k3]);\n                }\n                if (currentColors !== null && currentColors !== void 0) {\n                  for (var _k4 = 0; _k4 < 4; _k4++) {\n                    colors.push(currentColors[4 * facet[_j3] + _k4]);\n                  }\n                }\n                if (currentUVs !== null && currentUVs !== void 0) {\n                  for (var _k5 = 0; _k5 < 2; _k5++) {\n                    uvs.push(currentUVs[2 * facet[_j3] + _k5]);\n                  }\n                }\n                if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n                  for (var _k6 = 0; _k6 < 4; _k6++) {\n                    matrixIndices.push(currentMatrixIndices[4 * facet[_j3] + _k6]);\n                  }\n                }\n                if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                  for (var _k7 = 0; _k7 < 4; _k7++) {\n                    matrixWeights.push(currentMatrixWeights[4 * facet[_j3] + _k7]);\n                  }\n                }\n                if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n                  for (var _k8 = 0; _k8 < 4; _k8++) {\n                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[_j3] + _k8]);\n                  }\n                }\n                if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\n                  for (var _k9 = 0; _k9 < 4; _k9++) {\n                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[_j3] + _k9]);\n                  }\n                }\n              }\n              // add new index pointer to indices array\n              indices.push(ptr);\n            }\n          }\n        }\n        var normals = new Array();\n        VertexData.ComputeNormals(positions, indices, normals);\n        //create new vertex data object and update\n        vertex_data.positions = positions;\n        vertex_data.indices = indices;\n        vertex_data.normals = normals;\n        if (currentUVs !== null && currentUVs !== void 0) {\n          vertex_data.uvs = uvs;\n        }\n        if (currentColors !== null && currentColors !== void 0) {\n          vertex_data.colors = colors;\n        }\n        if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n          vertex_data.matricesIndices = matrixIndices;\n        }\n        if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n          vertex_data.matricesWeights = matrixWeights;\n        }\n        if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n          vertex_data.matricesIndicesExtra = matrixIndicesExtra;\n        }\n        if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n          vertex_data.matricesWeightsExtra = matrixWeightsExtra;\n        }\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      }\n    }\n    // Instances\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\n  }, {\n    key: \"createInstance\",\n    value:\n    /**\n     * Creates a new InstancedMesh object from the mesh model.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n     * @param name defines the name of the new instance\n     * @returns a new InstancedMesh\n     */\n    function createInstance(name) {\n      return Mesh._instancedMeshFactory(name, this);\n    }\n    /**\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"synchronizeInstances\",\n    value: function synchronizeInstances() {\n      for (var instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\n        var instance = this.instances[instanceIndex];\n        instance._syncSubMeshes();\n      }\n      return this;\n    }\n    /**\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\n     * This should be used together with the simplification to avoid disappearing triangles.\n     * @param successCallback an optional success callback to be called after the optimization finished.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"optimizeIndices\",\n    value: function optimizeIndices(successCallback) {\n      var _this4 = this;\n      var indices = this.getIndices();\n      var positions = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positions || !indices) {\n        return this;\n      }\n      var vectorPositions = new Array();\n      for (var pos = 0; pos < positions.length; pos = pos + 3) {\n        vectorPositions.push(Vector3.FromArray(positions, pos));\n      }\n      var dupes = new Array();\n      AsyncLoop.SyncAsyncForLoop(vectorPositions.length, 40, function (iteration) {\n        var realPos = vectorPositions.length - 1 - iteration;\n        var testedPosition = vectorPositions[realPos];\n        for (var j = 0; j < realPos; ++j) {\n          var againstPosition = vectorPositions[j];\n          if (testedPosition.equals(againstPosition)) {\n            dupes[realPos] = j;\n            break;\n          }\n        }\n      }, function () {\n        for (var i = 0; i < indices.length; ++i) {\n          indices[i] = dupes[indices[i]] || indices[i];\n        }\n        //indices are now reordered\n        var originalSubMeshes = _this4.subMeshes.slice(0);\n        _this4.setIndices(indices);\n        _this4.subMeshes = originalSubMeshes;\n        if (successCallback) {\n          successCallback(_this4);\n        }\n      });\n      return this;\n    }\n    /**\n     * Serialize current mesh\n     * @param serializationObject defines the object which will receive the serialization data\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var serializationObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      serializationObject.name = this.name;\n      serializationObject.id = this.id;\n      serializationObject.uniqueId = this.uniqueId;\n      serializationObject.type = this.getClassName();\n      if (Tags && Tags.HasTags(this)) {\n        serializationObject.tags = Tags.GetTags(this);\n      }\n      serializationObject.position = this.position.asArray();\n      if (this.rotationQuaternion) {\n        serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\n      } else if (this.rotation) {\n        serializationObject.rotation = this.rotation.asArray();\n      }\n      serializationObject.scaling = this.scaling.asArray();\n      if (this._postMultiplyPivotMatrix) {\n        serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\n      } else {\n        serializationObject.localMatrix = this.getPivotMatrix().asArray();\n      }\n      serializationObject.isEnabled = this.isEnabled(false);\n      serializationObject.isVisible = this.isVisible;\n      serializationObject.infiniteDistance = this.infiniteDistance;\n      serializationObject.pickable = this.isPickable;\n      serializationObject.receiveShadows = this.receiveShadows;\n      serializationObject.billboardMode = this.billboardMode;\n      serializationObject.visibility = this.visibility;\n      serializationObject.checkCollisions = this.checkCollisions;\n      serializationObject.isBlocker = this.isBlocker;\n      serializationObject.overrideMaterialSideOrientation = this.overrideMaterialSideOrientation;\n      // Parent\n      if (this.parent) {\n        this.parent._serializeAsParent(serializationObject);\n      }\n      // Geometry\n      serializationObject.isUnIndexed = this.isUnIndexed;\n      var geometry = this._geometry;\n      if (geometry && this.subMeshes) {\n        serializationObject.geometryUniqueId = geometry.uniqueId;\n        serializationObject.geometryId = geometry.id;\n        // SubMeshes\n        serializationObject.subMeshes = [];\n        for (var subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\n          var subMesh = this.subMeshes[subIndex];\n          serializationObject.subMeshes.push({\n            materialIndex: subMesh.materialIndex,\n            verticesStart: subMesh.verticesStart,\n            verticesCount: subMesh.verticesCount,\n            indexStart: subMesh.indexStart,\n            indexCount: subMesh.indexCount\n          });\n        }\n      }\n      // Material\n      if (this.material) {\n        if (!this.material.doNotSerialize) {\n          serializationObject.materialUniqueId = this.material.uniqueId;\n          serializationObject.materialId = this.material.id; // back compat\n        }\n      } else {\n        this.material = null;\n        serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\n        serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\n      }\n      // Morph targets\n      if (this.morphTargetManager) {\n        serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\n      }\n      // Skeleton\n      if (this.skeleton) {\n        serializationObject.skeletonId = this.skeleton.id;\n        serializationObject.numBoneInfluencers = this.numBoneInfluencers;\n      }\n      // Physics\n      //TODO implement correct serialization for physics impostors.\n      if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n        var impostor = this.getPhysicsImpostor();\n        if (impostor) {\n          serializationObject.physicsMass = impostor.getParam(\"mass\");\n          serializationObject.physicsFriction = impostor.getParam(\"friction\");\n          serializationObject.physicsRestitution = impostor.getParam(\"mass\");\n          serializationObject.physicsImpostor = impostor.type;\n        }\n      }\n      // Metadata\n      if (this.metadata) {\n        serializationObject.metadata = this.metadata;\n      }\n      // Instances\n      serializationObject.instances = [];\n      for (var index = 0; index < this.instances.length; index++) {\n        var instance = this.instances[index];\n        if (instance.doNotSerialize) {\n          continue;\n        }\n        var serializationInstance = {\n          name: instance.name,\n          id: instance.id,\n          isEnabled: instance.isEnabled(false),\n          isVisible: instance.isVisible,\n          isPickable: instance.isPickable,\n          checkCollisions: instance.checkCollisions,\n          position: instance.position.asArray(),\n          scaling: instance.scaling.asArray()\n        };\n        if (instance.parent) {\n          instance.parent._serializeAsParent(serializationInstance);\n        }\n        if (instance.rotationQuaternion) {\n          serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\n        } else if (instance.rotation) {\n          serializationInstance.rotation = instance.rotation.asArray();\n        }\n        // Physics\n        //TODO implement correct serialization for physics impostors.\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n          var _impostor = instance.getPhysicsImpostor();\n          if (_impostor) {\n            serializationInstance.physicsMass = _impostor.getParam(\"mass\");\n            serializationInstance.physicsFriction = _impostor.getParam(\"friction\");\n            serializationInstance.physicsRestitution = _impostor.getParam(\"mass\");\n            serializationInstance.physicsImpostor = _impostor.type;\n          }\n        }\n        // Metadata\n        if (instance.metadata) {\n          serializationInstance.metadata = instance.metadata;\n        }\n        // Action Manager\n        if (instance.actionManager) {\n          serializationInstance.actions = instance.actionManager.serialize(instance.name);\n        }\n        serializationObject.instances.push(serializationInstance);\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\n        serializationInstance.ranges = instance.serializeAnimationRanges();\n      }\n      // Thin instances\n      if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\n        serializationObject.thinInstances = {\n          instancesCount: this._thinInstanceDataStorage.instancesCount,\n          matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\n          matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\n          enablePicking: this.thinInstanceEnablePicking\n        };\n        if (this._userThinInstanceBuffersStorage) {\n          var userThinInstance = {\n            data: {},\n            sizes: {},\n            strides: {}\n          };\n          for (var kind in this._userThinInstanceBuffersStorage.data) {\n            userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\n            userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\n            userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\n          }\n          serializationObject.thinInstances.userThinInstance = userThinInstance;\n        }\n      }\n      // Animations\n      SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n      serializationObject.ranges = this.serializeAnimationRanges();\n      // Layer mask\n      serializationObject.layerMask = this.layerMask;\n      // Alpha\n      serializationObject.alphaIndex = this.alphaIndex;\n      serializationObject.hasVertexAlpha = this.hasVertexAlpha;\n      // Overlay\n      serializationObject.overlayAlpha = this.overlayAlpha;\n      serializationObject.overlayColor = this.overlayColor.asArray();\n      serializationObject.renderOverlay = this.renderOverlay;\n      // Fog\n      serializationObject.applyFog = this.applyFog;\n      // Action Manager\n      if (this.actionManager) {\n        serializationObject.actions = this.actionManager.serialize(this.name);\n      }\n      return serializationObject;\n    }\n    /** @internal */\n  }, {\n    key: \"_syncGeometryWithMorphTargetManager\",\n    value: function _syncGeometryWithMorphTargetManager() {\n      if (!this.geometry) {\n        return;\n      }\n      this._markSubMeshesAsAttributesDirty();\n      var morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\n      if (morphTargetManager && morphTargetManager.vertexCount) {\n        if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\n          Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\n          this.morphTargetManager = null;\n          return;\n        }\n        if (morphTargetManager.isUsingTextureForTargets) {\n          return;\n        }\n        for (var index = 0; index < morphTargetManager.numInfluencers; index++) {\n          var morphTarget = morphTargetManager.getActiveTarget(index);\n          var positions = morphTarget.getPositions();\n          if (!positions) {\n            Logger.Error(\"Invalid morph target. Target must have positions.\");\n            return;\n          }\n          this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\n          var normals = morphTarget.getNormals();\n          if (normals) {\n            this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\n          }\n          var tangents = morphTarget.getTangents();\n          if (tangents) {\n            this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\n          }\n          var uvs = morphTarget.getUVs();\n          if (uvs) {\n            this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\n          }\n        }\n      } else {\n        var _index2 = 0;\n        // Positions\n        while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + _index2)) {\n          this.geometry.removeVerticesData(VertexBuffer.PositionKind + _index2);\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.NormalKind + _index2);\n          }\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.TangentKind + _index2);\n          }\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + _index2);\n          }\n          _index2++;\n        }\n      }\n    }\n    /**\n     * Returns a new Mesh object parsed from the source provided.\n     * @param parsedMesh is the source\n     * @param scene defines the hosting scene\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\n     * @returns a new Mesh\n     */\n  }, {\n    key: \"setPositionsForCPUSkinning\",\n    value:\n    // Skeletons\n    /**\n     * Prepare internal position array for software CPU skinning\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\n     */\n    function setPositionsForCPUSkinning() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourcePositions) {\n        var source = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!source) {\n          return internalDataInfo._sourcePositions;\n        }\n        internalDataInfo._sourcePositions = new Float32Array(source);\n        if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\n          this.setVerticesData(VertexBuffer.PositionKind, source, true);\n        }\n      }\n      return internalDataInfo._sourcePositions;\n    }\n    /**\n     * Prepare internal normal array for software CPU skinning\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\n     */\n  }, {\n    key: \"setNormalsForCPUSkinning\",\n    value: function setNormalsForCPUSkinning() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourceNormals) {\n        var source = this.getVerticesData(VertexBuffer.NormalKind);\n        if (!source) {\n          return internalDataInfo._sourceNormals;\n        }\n        internalDataInfo._sourceNormals = new Float32Array(source);\n        if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\n          this.setVerticesData(VertexBuffer.NormalKind, source, true);\n        }\n      }\n      return internalDataInfo._sourceNormals;\n    }\n    /**\n     * Updates the vertex buffer by applying transformation from the bones\n     * @param skeleton defines the skeleton to apply to current mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"applySkeleton\",\n    value: function applySkeleton(skeleton) {\n      if (!this.geometry) {\n        return this;\n      }\n      if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\n        return this;\n      }\n      this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n        return this;\n      }\n      if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\n        return this;\n      }\n      if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n        return this;\n      }\n      var hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourcePositions) {\n        var submeshes = this.subMeshes.slice();\n        this.setPositionsForCPUSkinning();\n        this.subMeshes = submeshes;\n      }\n      if (hasNormals && !internalDataInfo._sourceNormals) {\n        this.setNormalsForCPUSkinning();\n      }\n      // positionsData checks for not being Float32Array will only pass at most once\n      var positionsData = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positionsData) {\n        return this;\n      }\n      if (!(positionsData instanceof Float32Array)) {\n        positionsData = new Float32Array(positionsData);\n      }\n      // normalsData checks for not being Float32Array will only pass at most once\n      var normalsData = this.getVerticesData(VertexBuffer.NormalKind);\n      if (hasNormals) {\n        if (!normalsData) {\n          return this;\n        }\n        if (!(normalsData instanceof Float32Array)) {\n          normalsData = new Float32Array(normalsData);\n        }\n      }\n      var matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n      var matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      if (!matricesWeightsData || !matricesIndicesData) {\n        return this;\n      }\n      var needExtras = this.numBoneInfluencers > 4;\n      var matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\n      var matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\n      var skeletonMatrices = skeleton.getTransformMatrices(this);\n      var tempVector3 = Vector3.Zero();\n      var finalMatrix = new Matrix();\n      var tempMatrix = new Matrix();\n      var matWeightIdx = 0;\n      var inf;\n      for (var index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\n        var weight = void 0;\n        for (inf = 0; inf < 4; inf++) {\n          weight = matricesWeightsData[matWeightIdx + inf];\n          if (weight > 0) {\n            Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\n            finalMatrix.addToSelf(tempMatrix);\n          }\n        }\n        if (needExtras) {\n          for (inf = 0; inf < 4; inf++) {\n            weight = matricesWeightsExtraData[matWeightIdx + inf];\n            if (weight > 0) {\n              Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData[matWeightIdx + inf] * 16), weight, tempMatrix);\n              finalMatrix.addToSelf(tempMatrix);\n            }\n          }\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(internalDataInfo._sourcePositions[index], internalDataInfo._sourcePositions[index + 1], internalDataInfo._sourcePositions[index + 2], finalMatrix, tempVector3);\n        tempVector3.toArray(positionsData, index);\n        if (hasNormals) {\n          Vector3.TransformNormalFromFloatsToRef(internalDataInfo._sourceNormals[index], internalDataInfo._sourceNormals[index + 1], internalDataInfo._sourceNormals[index + 2], finalMatrix, tempVector3);\n          tempVector3.toArray(normalsData, index);\n        }\n        finalMatrix.reset();\n      }\n      this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\n      if (hasNormals) {\n        this.updateVerticesData(VertexBuffer.NormalKind, normalsData);\n      }\n      return this;\n    }\n    // Tools\n    /**\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\n     * @param meshes defines the list of meshes to scan\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\n     */\n  }, {\n    key: \"addInstance\",\n    value:\n    /**\n     * @internal\n     */\n    function addInstance(instance) {\n      instance._indexInSourceMeshInstanceArray = this.instances.length;\n      this.instances.push(instance);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"removeInstance\",\n    value: function removeInstance(instance) {\n      // Remove from mesh\n      var index = instance._indexInSourceMeshInstanceArray;\n      if (index != -1) {\n        if (index !== this.instances.length - 1) {\n          var last = this.instances[this.instances.length - 1];\n          this.instances[index] = last;\n          last._indexInSourceMeshInstanceArray = index;\n        }\n        instance._indexInSourceMeshInstanceArray = -1;\n        this.instances.pop();\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_shouldConvertRHS\",\n    value: function _shouldConvertRHS() {\n      return this.overrideMaterialSideOrientation === Material.CounterClockWiseSideOrientation;\n    }\n    /** @internal */\n  }, {\n    key: \"_getRenderingFillMode\",\n    value: function _getRenderingFillMode(fillMode) {\n      var _a;\n      var scene = this.getScene();\n      if (scene.forcePointsCloud) return Material.PointFillMode;\n      if (scene.forceWireframe) return Material.WireFrameFillMode;\n      return (_a = this.overrideRenderingFillMode) !== null && _a !== void 0 ? _a : fillMode;\n    }\n  }], [{\n    key: \"_GetDefaultSideOrientation\",\n    value:\n    /**\n     * Gets the default side orientation.\n     * @param orientation the orientation to value to attempt to get\n     * @returns the default orientation\n     * @internal\n     */\n    function _GetDefaultSideOrientation(orientation) {\n      return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\n    }\n  }, {\n    key: \"_instancedMeshFactory\",\n    value: function _instancedMeshFactory(name, mesh) {\n      throw _WarnImport(\"InstancedMesh\");\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"_PhysicsImpostorParser\",\n    value: function _PhysicsImpostorParser(scene, physicObject, jsonObject) {\n      throw _WarnImport(\"PhysicsImpostor\");\n    }\n  }, {\n    key: \"Parse\",\n    value: function Parse(parsedMesh, scene, rootUrl) {\n      var mesh;\n      if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\n        mesh = Mesh._LinesMeshParser(parsedMesh, scene);\n      } else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\n        mesh = Mesh._GroundMeshParser(parsedMesh, scene);\n      } else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\n        mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\n      } else {\n        mesh = new Mesh(parsedMesh.name, scene);\n      }\n      mesh.id = parsedMesh.id;\n      mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\n      if (Tags) {\n        Tags.AddTagsTo(mesh, parsedMesh.tags);\n      }\n      mesh.position = Vector3.FromArray(parsedMesh.position);\n      if (parsedMesh.metadata !== undefined) {\n        mesh.metadata = parsedMesh.metadata;\n      }\n      if (parsedMesh.rotationQuaternion) {\n        mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\n      } else if (parsedMesh.rotation) {\n        mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\n      }\n      mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\n      if (parsedMesh.localMatrix) {\n        mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\n      } else if (parsedMesh.pivotMatrix) {\n        mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\n      }\n      mesh.setEnabled(parsedMesh.isEnabled);\n      mesh.isVisible = parsedMesh.isVisible;\n      mesh.infiniteDistance = parsedMesh.infiniteDistance;\n      mesh.showBoundingBox = parsedMesh.showBoundingBox;\n      mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\n      if (parsedMesh.applyFog !== undefined) {\n        mesh.applyFog = parsedMesh.applyFog;\n      }\n      if (parsedMesh.pickable !== undefined) {\n        mesh.isPickable = parsedMesh.pickable;\n      }\n      if (parsedMesh.alphaIndex !== undefined) {\n        mesh.alphaIndex = parsedMesh.alphaIndex;\n      }\n      mesh.receiveShadows = parsedMesh.receiveShadows;\n      if (parsedMesh.billboardMode !== undefined) {\n        mesh.billboardMode = parsedMesh.billboardMode;\n      }\n      if (parsedMesh.visibility !== undefined) {\n        mesh.visibility = parsedMesh.visibility;\n      }\n      mesh.checkCollisions = parsedMesh.checkCollisions;\n      mesh.overrideMaterialSideOrientation = parsedMesh.overrideMaterialSideOrientation;\n      if (parsedMesh.isBlocker !== undefined) {\n        mesh.isBlocker = parsedMesh.isBlocker;\n      }\n      mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\n      // freezeWorldMatrix\n      if (parsedMesh.freezeWorldMatrix) {\n        mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\n      }\n      // Parent\n      if (parsedMesh.parentId !== undefined) {\n        mesh._waitingParentId = parsedMesh.parentId;\n      }\n      if (parsedMesh.parentInstanceIndex !== undefined) {\n        mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\n      }\n      // Actions\n      if (parsedMesh.actions !== undefined) {\n        mesh._waitingData.actions = parsedMesh.actions;\n      }\n      // Overlay\n      if (parsedMesh.overlayAlpha !== undefined) {\n        mesh.overlayAlpha = parsedMesh.overlayAlpha;\n      }\n      if (parsedMesh.overlayColor !== undefined) {\n        mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\n      }\n      if (parsedMesh.renderOverlay !== undefined) {\n        mesh.renderOverlay = parsedMesh.renderOverlay;\n      }\n      // Geometry\n      mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\n      mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\n      if (parsedMesh.delayLoadingFile) {\n        mesh.delayLoadState = 4;\n        mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\n        mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\n        if (parsedMesh._binaryInfo) {\n          mesh._binaryInfo = parsedMesh._binaryInfo;\n        }\n        mesh._delayInfo = [];\n        if (parsedMesh.hasUVs) {\n          mesh._delayInfo.push(VertexBuffer.UVKind);\n        }\n        if (parsedMesh.hasUVs2) {\n          mesh._delayInfo.push(VertexBuffer.UV2Kind);\n        }\n        if (parsedMesh.hasUVs3) {\n          mesh._delayInfo.push(VertexBuffer.UV3Kind);\n        }\n        if (parsedMesh.hasUVs4) {\n          mesh._delayInfo.push(VertexBuffer.UV4Kind);\n        }\n        if (parsedMesh.hasUVs5) {\n          mesh._delayInfo.push(VertexBuffer.UV5Kind);\n        }\n        if (parsedMesh.hasUVs6) {\n          mesh._delayInfo.push(VertexBuffer.UV6Kind);\n        }\n        if (parsedMesh.hasColors) {\n          mesh._delayInfo.push(VertexBuffer.ColorKind);\n        }\n        if (parsedMesh.hasMatricesIndices) {\n          mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\n        }\n        if (parsedMesh.hasMatricesWeights) {\n          mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\n        }\n        mesh._delayLoadingFunction = Geometry._ImportGeometry;\n        if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\n          mesh._checkDelayState();\n        }\n      } else {\n        Geometry._ImportGeometry(parsedMesh, mesh);\n      }\n      // Material\n      if (parsedMesh.materialUniqueId) {\n        mesh._waitingMaterialId = parsedMesh.materialUniqueId;\n      } else if (parsedMesh.materialId) {\n        mesh._waitingMaterialId = parsedMesh.materialId;\n      }\n      // Morph targets\n      if (parsedMesh.morphTargetManagerId > -1) {\n        mesh.morphTargetManager = scene.getMorphTargetManagerById(parsedMesh.morphTargetManagerId);\n      }\n      // Skeleton\n      if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\n        mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\n        if (parsedMesh.numBoneInfluencers) {\n          mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\n        }\n      }\n      // Animations\n      if (parsedMesh.animations) {\n        for (var animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\n          var parsedAnimation = parsedMesh.animations[animationIndex];\n          var internalClass = GetClass(\"BABYLON.Animation\");\n          if (internalClass) {\n            mesh.animations.push(internalClass.Parse(parsedAnimation));\n          }\n        }\n        Node.ParseAnimationRanges(mesh, parsedMesh, scene);\n      }\n      if (parsedMesh.autoAnimate) {\n        scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\n      }\n      // Layer Mask\n      if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\n        mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\n      } else {\n        mesh.layerMask = 0x0fffffff;\n      }\n      // Physics\n      if (parsedMesh.physicsImpostor) {\n        Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\n      }\n      // Levels\n      if (parsedMesh.lodMeshIds) {\n        mesh._waitingData.lods = {\n          ids: parsedMesh.lodMeshIds,\n          distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\n          coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null\n        };\n      }\n      // Instances\n      if (parsedMesh.instances) {\n        for (var index = 0; index < parsedMesh.instances.length; index++) {\n          var parsedInstance = parsedMesh.instances[index];\n          var instance = mesh.createInstance(parsedInstance.name);\n          if (parsedInstance.id) {\n            instance.id = parsedInstance.id;\n          }\n          if (Tags) {\n            if (parsedInstance.tags) {\n              Tags.AddTagsTo(instance, parsedInstance.tags);\n            } else {\n              Tags.AddTagsTo(instance, parsedMesh.tags);\n            }\n          }\n          instance.position = Vector3.FromArray(parsedInstance.position);\n          if (parsedInstance.metadata !== undefined) {\n            instance.metadata = parsedInstance.metadata;\n          }\n          if (parsedInstance.parentId !== undefined) {\n            instance._waitingParentId = parsedInstance.parentId;\n          }\n          if (parsedInstance.parentInstanceIndex !== undefined) {\n            instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\n          }\n          if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\n            instance.setEnabled(parsedInstance.isEnabled);\n          }\n          if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\n            instance.isVisible = parsedInstance.isVisible;\n          }\n          if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\n            instance.isPickable = parsedInstance.isPickable;\n          }\n          if (parsedInstance.rotationQuaternion) {\n            instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\n          } else if (parsedInstance.rotation) {\n            instance.rotation = Vector3.FromArray(parsedInstance.rotation);\n          }\n          instance.scaling = Vector3.FromArray(parsedInstance.scaling);\n          if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\n            instance.checkCollisions = parsedInstance.checkCollisions;\n          }\n          if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\n            instance.isPickable = parsedInstance.pickable;\n          }\n          if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\n            instance.showBoundingBox = parsedInstance.showBoundingBox;\n          }\n          if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n            instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\n          }\n          if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n            instance.alphaIndex = parsedInstance.alphaIndex;\n          }\n          // Physics\n          if (parsedInstance.physicsImpostor) {\n            Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\n          }\n          // Actions\n          if (parsedInstance.actions !== undefined) {\n            instance._waitingData.actions = parsedInstance.actions;\n          }\n          // Animation\n          if (parsedInstance.animations) {\n            for (var _animationIndex = 0; _animationIndex < parsedInstance.animations.length; _animationIndex++) {\n              var _parsedAnimation = parsedInstance.animations[_animationIndex];\n              var _internalClass = GetClass(\"BABYLON.Animation\");\n              if (_internalClass) {\n                instance.animations.push(_internalClass.Parse(_parsedAnimation));\n              }\n            }\n            Node.ParseAnimationRanges(instance, parsedInstance, scene);\n            if (parsedInstance.autoAnimate) {\n              scene.beginAnimation(instance, parsedInstance.autoAnimateFrom, parsedInstance.autoAnimateTo, parsedInstance.autoAnimateLoop, parsedInstance.autoAnimateSpeed || 1.0);\n            }\n          }\n        }\n      }\n      // Thin instances\n      if (parsedMesh.thinInstances) {\n        var thinInstances = parsedMesh.thinInstances;\n        mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\n        if (thinInstances.matrixData) {\n          mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\n          mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n          mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\n        } else {\n          mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n        }\n        if (parsedMesh.thinInstances.userThinInstance) {\n          var userThinInstance = parsedMesh.thinInstances.userThinInstance;\n          for (var kind in userThinInstance.data) {\n            mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\n            mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\n          }\n        }\n      }\n      return mesh;\n    }\n  }, {\n    key: \"MinMax\",\n    value: function MinMax(meshes) {\n      var minVector = null;\n      var maxVector = null;\n      meshes.forEach(function (mesh) {\n        var boundingInfo = mesh.getBoundingInfo();\n        var boundingBox = boundingInfo.boundingBox;\n        if (!minVector || !maxVector) {\n          minVector = boundingBox.minimumWorld;\n          maxVector = boundingBox.maximumWorld;\n        } else {\n          minVector.minimizeInPlace(boundingBox.minimumWorld);\n          maxVector.maximizeInPlace(boundingBox.maximumWorld);\n        }\n      });\n      if (!minVector || !maxVector) {\n        return {\n          min: Vector3.Zero(),\n          max: Vector3.Zero()\n        };\n      }\n      return {\n        min: minVector,\n        max: maxVector\n      };\n    }\n    /**\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\n     * @returns a vector3\n     */\n  }, {\n    key: \"Center\",\n    value: function Center(meshesOrMinMaxVector) {\n      var minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\n      return Vector3.Center(minMaxVector.min, minMaxVector.max);\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n  }, {\n    key: \"MergeMeshes\",\n    value: function MergeMeshes(meshes) {\n      var disposeSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var allow32BitsIndices = arguments.length > 2 ? arguments[2] : undefined;\n      var meshSubclass = arguments.length > 3 ? arguments[3] : undefined;\n      var subdivideWithSubMeshes = arguments.length > 4 ? arguments[4] : undefined;\n      var multiMultiMaterials = arguments.length > 5 ? arguments[5] : undefined;\n      return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n  }, {\n    key: \"MergeMeshesAsync\",\n    value: function MergeMeshesAsync(meshes) {\n      var disposeSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var allow32BitsIndices = arguments.length > 2 ? arguments[2] : undefined;\n      var meshSubclass = arguments.length > 3 ? arguments[3] : undefined;\n      var subdivideWithSubMeshes = arguments.length > 4 ? arguments[4] : undefined;\n      var multiMultiMaterials = arguments.length > 5 ? arguments[5] : undefined;\n      return runCoroutineAsync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true), createYieldingScheduler());\n    }\n  }, {\n    key: \"_MergeMeshesCoroutine\",\n    value: function _MergeMeshesCoroutine(meshes) {\n      var disposeSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var allow32BitsIndices = arguments.length > 2 ? arguments[2] : undefined;\n      var meshSubclass = arguments.length > 3 ? arguments[3] : undefined;\n      var subdivideWithSubMeshes = arguments.length > 4 ? arguments[4] : undefined;\n      var multiMultiMaterials = arguments.length > 5 ? arguments[5] : undefined;\n      var isAsync = arguments.length > 6 ? arguments[6] : undefined;\n      return /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var index, totalVertices, materialArray, materialIndexArray, indiceArray, currentOverrideMaterialSideOrientation, mesh, material, matIndex, subIndex, _subIndex, _subIndex2, source, getVertexDataFromMesh, _getVertexDataFromMes, sourceVertexData, sourceTransform, meshVertexDatas, i, mergeCoroutine, mergeCoroutineStep, vertexData, applyToCoroutine, applyToCoroutineStep, offset, _iterator11, _step12, subMesh, newMultiMaterial, _subIndex3;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Remove any null/undefined entries from the mesh array\n              meshes = meshes.filter(Boolean);\n              if (!(meshes.length === 0)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 3:\n              if (allow32BitsIndices) {\n                _context.next = 14;\n                break;\n              }\n              totalVertices = 0; // Counting vertices\n              index = 0;\n            case 6:\n              if (!(index < meshes.length)) {\n                _context.next = 14;\n                break;\n              }\n              totalVertices += meshes[index].getTotalVertices();\n              if (!(totalVertices >= 65536)) {\n                _context.next = 11;\n                break;\n              }\n              Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\n              return _context.abrupt(\"return\", null);\n            case 11:\n              index++;\n              _context.next = 6;\n              break;\n            case 14:\n              if (multiMultiMaterials) {\n                subdivideWithSubMeshes = false;\n              }\n              materialArray = new Array();\n              materialIndexArray = new Array(); // Merge\n              indiceArray = new Array();\n              currentOverrideMaterialSideOrientation = meshes[0].overrideMaterialSideOrientation;\n              index = 0;\n            case 20:\n              if (!(index < meshes.length)) {\n                _context.next = 33;\n                break;\n              }\n              mesh = meshes[index];\n              if (!mesh.isAnInstance) {\n                _context.next = 25;\n                break;\n              }\n              Logger.Warn(\"Cannot merge instance meshes.\");\n              return _context.abrupt(\"return\", null);\n            case 25:\n              if (!(currentOverrideMaterialSideOrientation !== mesh.overrideMaterialSideOrientation)) {\n                _context.next = 28;\n                break;\n              }\n              Logger.Warn(\"Cannot merge meshes with different overrideMaterialSideOrientation values.\");\n              return _context.abrupt(\"return\", null);\n            case 28:\n              if (subdivideWithSubMeshes) {\n                indiceArray.push(mesh.getTotalIndices());\n              }\n              if (multiMultiMaterials) {\n                if (mesh.material) {\n                  material = mesh.material;\n                  if (material instanceof MultiMaterial) {\n                    for (matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\n                      if (materialArray.indexOf(material.subMaterials[matIndex]) < 0) {\n                        materialArray.push(material.subMaterials[matIndex]);\n                      }\n                    }\n                    for (subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                      materialIndexArray.push(materialArray.indexOf(material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\n                      indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                    }\n                  } else {\n                    if (materialArray.indexOf(material) < 0) {\n                      materialArray.push(material);\n                    }\n                    for (_subIndex = 0; _subIndex < mesh.subMeshes.length; _subIndex++) {\n                      materialIndexArray.push(materialArray.indexOf(material));\n                      indiceArray.push(mesh.subMeshes[_subIndex].indexCount);\n                    }\n                  }\n                } else {\n                  for (_subIndex2 = 0; _subIndex2 < mesh.subMeshes.length; _subIndex2++) {\n                    materialIndexArray.push(0);\n                    indiceArray.push(mesh.subMeshes[_subIndex2].indexCount);\n                  }\n                }\n              }\n            case 30:\n              index++;\n              _context.next = 20;\n              break;\n            case 33:\n              source = meshes[0];\n              getVertexDataFromMesh = function getVertexDataFromMesh(mesh) {\n                var wm = mesh.computeWorldMatrix(true);\n                var vertexData = VertexData.ExtractFromMesh(mesh, false, false);\n                return {\n                  vertexData: vertexData,\n                  transform: wm\n                };\n              };\n              _getVertexDataFromMes = getVertexDataFromMesh(source), sourceVertexData = _getVertexDataFromMes.vertexData, sourceTransform = _getVertexDataFromMes.transform;\n              if (!isAsync) {\n                _context.next = 39;\n                break;\n              }\n              _context.next = 39;\n              return;\n            case 39:\n              meshVertexDatas = new Array(meshes.length - 1);\n              i = 1;\n            case 41:\n              if (!(i < meshes.length)) {\n                _context.next = 49;\n                break;\n              }\n              meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\n              if (!isAsync) {\n                _context.next = 46;\n                break;\n              }\n              _context.next = 46;\n              return;\n            case 46:\n              i++;\n              _context.next = 41;\n              break;\n            case 49:\n              mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\n              mergeCoroutineStep = mergeCoroutine.next();\n            case 51:\n              if (mergeCoroutineStep.done) {\n                _context.next = 58;\n                break;\n              }\n              if (!isAsync) {\n                _context.next = 55;\n                break;\n              }\n              _context.next = 55;\n              return;\n            case 55:\n              mergeCoroutineStep = mergeCoroutine.next();\n              _context.next = 51;\n              break;\n            case 58:\n              vertexData = mergeCoroutineStep.value;\n              if (!meshSubclass) {\n                meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\n              }\n              applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\n              applyToCoroutineStep = applyToCoroutine.next();\n            case 62:\n              if (applyToCoroutineStep.done) {\n                _context.next = 69;\n                break;\n              }\n              if (!isAsync) {\n                _context.next = 66;\n                break;\n              }\n              _context.next = 66;\n              return;\n            case 66:\n              applyToCoroutineStep = applyToCoroutine.next();\n              _context.next = 62;\n              break;\n            case 69:\n              // Setting properties\n              meshSubclass.checkCollisions = source.checkCollisions;\n              meshSubclass.overrideMaterialSideOrientation = source.overrideMaterialSideOrientation;\n              // Cleaning\n              if (disposeSource) {\n                for (index = 0; index < meshes.length; index++) {\n                  meshes[index].dispose();\n                }\n              }\n              // Subdivide\n              if (subdivideWithSubMeshes || multiMultiMaterials) {\n                //-- removal of global submesh\n                meshSubclass.releaseSubMeshes();\n                index = 0;\n                offset = 0; //-- apply subdivision according to index table\n                while (index < indiceArray.length) {\n                  SubMesh.CreateFromIndices(0, offset, indiceArray[index], meshSubclass, undefined, false);\n                  offset += indiceArray[index];\n                  index++;\n                }\n                _iterator11 = _createForOfIteratorHelper(meshSubclass.subMeshes);\n                try {\n                  for (_iterator11.s(); !(_step12 = _iterator11.n()).done;) {\n                    subMesh = _step12.value;\n                    subMesh.refreshBoundingInfo();\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n                meshSubclass.computeWorldMatrix(true);\n              }\n              if (multiMultiMaterials) {\n                newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\n                newMultiMaterial.subMaterials = materialArray;\n                for (_subIndex3 = 0; _subIndex3 < meshSubclass.subMeshes.length; _subIndex3++) {\n                  meshSubclass.subMeshes[_subIndex3].materialIndex = materialIndexArray[_subIndex3];\n                }\n                meshSubclass.material = newMultiMaterial;\n              } else {\n                meshSubclass.material = source.material;\n              }\n              return _context.abrupt(\"return\", meshSubclass);\n            case 75:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })();\n    }\n  }]);\n  return Mesh;\n}(AbstractMesh);\n// Consts\n/**\n * Mesh side orientation : usually the external or front surface\n */\nMesh.FRONTSIDE = VertexData.FRONTSIDE;\n/**\n * Mesh side orientation : usually the internal or back surface\n */\nMesh.BACKSIDE = VertexData.BACKSIDE;\n/**\n * Mesh side orientation : both internal and external or front and back surfaces\n */\nMesh.DOUBLESIDE = VertexData.DOUBLESIDE;\n/**\n * Mesh side orientation : by default, `FRONTSIDE`\n */\nMesh.DEFAULTSIDE = VertexData.DEFAULTSIDE;\n/**\n * Mesh cap setting : no cap\n */\nMesh.NO_CAP = 0;\n/**\n * Mesh cap setting : one cap at the beginning of the mesh\n */\nMesh.CAP_START = 1;\n/**\n * Mesh cap setting : one cap at the end of the mesh\n */\nMesh.CAP_END = 2;\n/**\n * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\n */\nMesh.CAP_ALL = 3;\n/**\n * Mesh pattern setting : no flip or rotate\n */\nMesh.NO_FLIP = 0;\n/**\n * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\n */\nMesh.FLIP_TILE = 1;\n/**\n * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\n */\nMesh.ROTATE_TILE = 2;\n/**\n * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\n */\nMesh.FLIP_ROW = 3;\n/**\n * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\n */\nMesh.ROTATE_ROW = 4;\n/**\n * Mesh pattern setting : flip and rotate alternate tiles on each row or column\n */\nMesh.FLIP_N_ROTATE_TILE = 5;\n/**\n * Mesh pattern setting : rotate pattern and rotate\n */\nMesh.FLIP_N_ROTATE_ROW = 6;\n/**\n * Mesh tile positioning : part tiles same on left/right or top/bottom\n */\nMesh.CENTER = 0;\n/**\n * Mesh tile positioning : part tiles on left\n */\nMesh.LEFT = 1;\n/**\n * Mesh tile positioning : part tiles on right\n */\nMesh.RIGHT = 2;\n/**\n * Mesh tile positioning : part tiles on top\n */\nMesh.TOP = 3;\n/**\n * Mesh tile positioning : part tiles on bottom\n */\nMesh.BOTTOM = 4;\n/**\n * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\n */\nMesh.INSTANCEDMESH_SORT_TRANSPARENT = false;\n// Statics\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._GroundMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"GroundMesh\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._GoldbergMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"GoldbergMesh\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._LinesMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"LinesMesh\");\n};\nRegisterClass(\"BABYLON.Mesh\", Mesh);\n/**\n * @internal\n */\nMesh.prototype.setMaterialByID = function (id) {\n  return this.setMaterialById(id);\n};\nMesh.CreateDisc = Mesh.CreateDisc || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateBox = Mesh.CreateBox || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateSphere = Mesh.CreateSphere || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateCylinder = Mesh.CreateCylinder || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTorusKnot = Mesh.CreateTorusKnot || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTorus = Mesh.CreateTorus || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreatePlane = Mesh.CreatePlane || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateGround = Mesh.CreateGround || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTiledGround = Mesh.CreateTiledGround || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateGroundFromHeightMap = Mesh.CreateGroundFromHeightMap || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTube = Mesh.CreateTube || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreatePolyhedron = Mesh.CreatePolyhedron || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateIcoSphere = Mesh.CreateIcoSphere || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateDecal = Mesh.CreateDecal || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateCapsule = Mesh.CreateCapsule || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.ExtendToGoldberg = Mesh.ExtendToGoldberg || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","_unsupportedIterableToArray","length","i","F","s","done","value","e","_e2","f","TypeError","err","normalCompletion","didErr","step","next","_e3","return","arr","len","arr2","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","NewTarget","this","arguments","apply","_CreationDataStorage","_InstanceDataStorage","visibleInstances","batchCache","_InstancesBatch","batchCacheReplacementModeInFrozenMode","instancesBufferSize","mustReturn","renderSelf","hardwareInstancedRendering","_ThinInstanceDataStorage","instancesCount","matrixBuffer","previousMatrixBuffer","matrixBufferSize","matrixData","boundingVectors","worldMatrices","_InternalMeshDataInfo","_areNormalsFrozen","_source","meshMap","_preActivateId","_LODLevels","_useLODScreenCoverage","_effectiveMaterial","_forcedInstanceCount","_overrideRenderingFillMode","Mesh","_AbstractMesh","_super","_this","scene","undefined","parent","source","doNotCloneChildren","clonePhysicsImpostor","_internalMeshDataInfo","delayLoadState","instances","_creationDataStorage","_geometry","_instanceDataStorage","_thinInstanceDataStorage","_shouldGenerateFlatShading","_originalBuilderSideOrientation","DEFAULTSIDE","overrideMaterialSideOrientation","ignoreCameraMaxZ","getScene","_onBeforeDraw","isInstance","world","effectiveMaterial","_uniformBuffer","transferToEffect","bindOnlyWorldMatrix","applyToMesh","useClonedMeshMap","uniqueId","_ranges","ranges","_name","hasOwnProperty","createAnimationRange","to","metadata","clone","_internalMetadata","setEnabled","isEnabled","setPivotMatrix","getPivotMatrix","id","material","directDescendants","getDescendants","index","child","morphTargetManager","getPhysicsEngine","physicsEngine","getPluginVersion","impostor","getImpostorForPhysicsObject","physicsImpostor","physicsBody","_index","particleSystems","system","emitter","skeleton","refreshBoundingInfo","computeWorldMatrix","getEngine","getCaps","instancedArrays","_onMeshReadyObserverAdded","observer","unregisterOnNextCall","isReady","onMeshReadyObservable","notifyObservers","_checkReadinessObserver","_scene","onBeforeRenderObservable","add","remove","onClonedObservable","key","get","set","_sortLODLevels","_internalAbstractMeshDataInfo","_computeBonesUsingShaders","_sourcePositions","setVerticesData","_sourceNormals","_markSubMeshesAsAttributesDirty","_onBeforeRenderObservable","_onBeforeBindObservable","_onAfterRenderObservable","_onBetweenPassObservable","_onBeforeDrawObservable","callback","_onBeforeDrawObserver","onBeforeDrawObservable","_a","count","fillMode","_unIndexed","instancesData","instancesPreviousData","manualUpdate","previousManualUpdate","forceMatrixUpdates","newParent","options","onNewNodeCreated","instance","getTotalVertices","doNotInstantiate","createInstance","position","scaling","rotationQuaternion","rotation","_step","_iterator","getChildTransformNodes","getClassName","sourceMesh","instantiateHierarchy","newSourcedMesh","fullDetails","ret","_waitingParentId","animations","ib","getIndices","vb","getVerticesData","_step2","_iterator2","_unBindEffect","sortingOrderFactor","sort","a","b","distanceOrScreenCoverage","mesh","_masterMesh","level","push","distance","internalDataInfo","splice","camera","boundingSphere","bSphere","getBoundingInfo","distanceToCamera","mode","minZ","centerWorld","subtract","globalPosition","compareValue","compareSign","screenArea","meshArea","radiusWorld","Math","PI","onLODLevelSelection","_checkDelayState","_preActivate","_updateSubMeshesBoundingInfo","worldMatrixFromCache","kind","copyWhenShared","forceCopy","bypassInstanceData","_b","data","_userInstancedBuffersStorage","vertexBuffers","getFloatData","meshes","getVertexBuffer","isVerticesDataPresent","_delayInfo","indexOf","buffer","isUpdatable","isVertexBufferUpdatable","forEach","kinds","getVerticesDataKinds","getTotalIndices","_c","_d","_e","_f","completeCheck","forceInstanceSupport","subMeshes","engine","hasThinInstances","mat","defaultMaterial","_storeEffectOnSubMeshes","_step3","_iterator3","subMesh","getMaterial","isReadyForSubMesh","_step4","currentRenderPassId","_iterator4","lightSources","generators","getShadowGenerators","values","generator","getShadowMap","renderList","renderPassId","_step6","_iterator6","_subMesh","needAlphaBlendingForMesh","_step5","_iterator5","lod","overridenInstanceCount","sceneRenderId","getRenderId","renderId","intermediateDefaultRenderId","defaultRenderId","selfDefaultRenderId","_renderId","previousRenderId","isFrozen","doNotSyncBoundingInfo","thinInstanceRefreshBoundingInfo","edgesShareWithInstances","edgesRenderer","_renderingGroup","_edgesRenderers","pushNoDuplicate","customInstances","getWorldMatrix","applySkeleton","applyMorph","hasBoundingInfo","isLocked","bias","geometry","boundingBias","_refreshBoundingInfo","_getPositionData","force","totalVertices","totalIndices","needToRecreate","_step7","_iterator7","submesh","indexStart","indexCount","verticesStart","verticesCount","releaseSubMeshes","subdivisionSize","offset","synchronizeInstances","updatable","stride","vertexData","removeVerticesData","disposeExistingBuffer","setVerticesBuffer","updateExtends","makeItUnique","makeGeometryUnique","updateVerticesData","positionFunction","computeNormals","positions","indices","normals","oldGeometry","copy","releaseForMesh","setIndices","gpuMemoryOnly","updateIndices","toLeftHanded","effect","allowInstancedRendering","indexToBind","isUsingTextureForTargets","_bind","_getRenderingFillMode","_getLinesIndexBuffer","getIndexBuffer","vertexArrayObjects","getVertexBuffers","drawArraysType","forcedInstanceCount","drawElementsType","_linesIndexCount","func","removeCallback","onAfterRenderObservable","subMeshId","isReplacementMode","previousBatch","isInIntermediateRendering","_isInIntermediateRendering","onlyForInstances","_onlyForInstancesIntermediate","_onlyForInstances","isVisible","currentRenderId","batch","_id","visibleInstanceCount","instanceStorage","currentInstancesBufferSize","instancesBuffer","instancesPreviousBuffer","bufferSize","Float32Array","needsPreviousWorldMatrices","needUpdateBuffer","masterMeshPreviousWorldMatrix","copyToArray","copyFrom","INSTANCEDMESH_SORT_TRANSPARENT","activeCamera","getRenderingMesh","cameraPosition","instanceIndex","instanceMesh","_distanceToCamera","m1","m2","_instanceIndex","matrix","_previousWorldMatrix","dispose","strides","sizes","vertexArrayObject","createVertexBuffer","_invalidateInstanceVertexArrayObject","updateDirectly","_processInstancedBuffers","_activeIndices","addCount","_currentDrawContext","useInstancing","_draw","unbindInstanceAttributes","previousMatrixData","_thinInstanceCreateMatrixBuffer","renderingMesh","onBeforeDraw","_renderWithThinInstances","_renderWithInstances","instanceCount","visibleInstancesForSubMesh","_getInstancesRenderList","enableAlphaMode","effectiveMeshReplacement","_isActiveIntermediate","_isActive","_checkOcclusionQuery","_occlusionDataStorage","forceRenderingWhenOccluded","oldCameraMaxZ","oldCamera","maxZ","updateTransformMatrix","drawWrapper","getMesh","_actAsRegularMesh","instanceDataStorage","_wasPreviouslyReady","getEffect","setAlphaMode","alphaMode","_step8","_drawWrapper","_getDrawWrapper","_iterator8","_beforeRenderingMeshStage","action","sideOrientation","effectiveMesh","backFaceCulling","mainDeterminant","_getWorldMatrixDeterminant","reverse","_preBind","forceDepthWrite","setDepthWrite","bindForSubMesh","bind","separateCullingPass","setState","zOffset","cullBackFaces","stencil","zOffsetUnits","_processRendering","unbind","_step9","_iterator9","_afterRenderingMeshStage","performancePriority","_freeze","_normalizeSkinWeightsAndExtra","_normalizeSkinFourWeights","matricesWeights","numWeights","t","recip","matricesWeightsExtra","skinned","valid","report","numberNotSorted","missingWeights","maxUsedWeights","numberNotNormalized","numInfluences","usedWeightCounts","_a2","lastWeight","usedWeights","d","tolerance","_b2","abs","numBones","bones","matricesIndices","matricesIndicesExtra","numBadBoneIndices","_a3","_b3","load","_queueLoad","_this2","addPendingData","getBinaryData","delayLoadingFile","ArrayBuffer","_delayLoadingFunction","JSON","parse","_syncSubMeshes","removePendingData","offlineProvider","frustumPlanes","materials","multiMaterials","results","transform","submeshes","_resetPointsArrayCache","temp","toArray","normalize","determinant","flipFaces","bakeIndependentlyOfChildren","bakeTransformIntoVertices","resetLocalMatrix","_positions","_generatePointsArray","doNotRecurse","disposeMaterialAndTextures","clear","_step11","_iterator10","_mesh","_disposeInstanceSpecificData","_disposeThinInstanceSpecificData","url","minHeight","maxHeight","onSuccess","uvOffset","uvScale","_this3","forceUpdate","img","heightMapWidth","width","heightMapHeight","height","context","createCanvas","getContext","drawImage","getImageData","applyDisplacementMapFromBuffer","uvs","normal","uv","pos","x","y","gradient","scaleInPlace","kindIndex","vbs","newdata","updatableNormals","vertexBuffer","getData","previousSubmeshes","vertexIndex","getStrideSize","flipNormalGeneration","useRightHandedSystem","p1","p2","p3","p1p2","p3p2","localIndex","z","submeshIndex","previousOne","materialIndex","flipNormals","vertex_data","numberPerEdge","currentIndices","segments","tempIndices","uvPtr","normalsPtr","deltaPosition","deltaNormal","deltaUV","side","positionPtr","_i","j","k","idx","_k","_j","_k2","_j2","currentUVs","currentPositions","currentColors","colors","currentMatrixIndices","currentMatrixWeights","currentMatrixIndicesExtra","currentMatrixWeightsExtra","ptr","facet","matrixIndices","matrixWeights","matrixIndicesExtra","matrixWeightsExtra","pstring","indexPtr","uniquePositions","_j3","_k3","_k4","_k5","_k6","_k7","_k8","_k9","_instancedMeshFactory","successCallback","_this4","vectorPositions","dupes","iteration","realPos","testedPosition","againstPosition","equals","originalSubMeshes","serializationObject","type","tags","asArray","_postMultiplyPivotMatrix","pivotMatrix","localMatrix","infiniteDistance","pickable","isPickable","receiveShadows","billboardMode","visibility","checkCollisions","isBlocker","_serializeAsParent","isUnIndexed","geometryUniqueId","geometryId","subIndex","doNotSerialize","materialUniqueId","materialId","morphTargetManagerId","skeletonId","numBoneInfluencers","_getComponent","getPhysicsImpostor","physicsMass","getParam","physicsFriction","physicsRestitution","serializationInstance","_impostor","actionManager","actions","serialize","serializeAnimationRanges","thinInstances","enablePicking","thinInstanceEnablePicking","_userThinInstanceBuffersStorage","userThinInstance","layerMask","alphaIndex","hasVertexAlpha","overlayAlpha","overlayColor","renderOverlay","applyFog","_morphTargetManager","vertexCount","numInfluencers","morphTarget","getActiveTarget","getPositions","getNormals","tangents","getTangents","getUVs","_index2","_softwareSkinningFrameId","getFrameId","hasNormals","setPositionsForCPUSkinning","setNormalsForCPUSkinning","positionsData","normalsData","matricesIndicesData","matricesWeightsData","inf","needExtras","matricesIndicesExtraData","matricesWeightsExtraData","skeletonMatrices","getTransformMatrices","tempVector3","finalMatrix","tempMatrix","matWeightIdx","weight","floor","addToSelf","reset","_indexInSourceMeshInstanceArray","last","pop","forcePointsCloud","forceWireframe","overrideRenderingFillMode","orientation","FRONTSIDE","physicObject","jsonObject","parsedMesh","rootUrl","_LinesMeshParser","_GroundMeshParser","_GoldbergMeshParser","_waitingParsedUniqueId","setPreTransformMatrix","showBoundingBox","showSubMeshesBoundingBox","useFlatShading","freezeWorldMatrix","_waitingData","parentId","parentInstanceIndex","_waitingParentInstanceIndex","buildBoundingInfo","boundingBoxMinimum","boundingBoxMaximum","_binaryInfo","hasUVs","hasUVs2","hasUVs3","hasUVs4","hasUVs5","hasUVs6","hasColors","hasMatricesIndices","hasMatricesWeights","_waitingMaterialId","getMorphTargetManagerById","getLastSkeletonById","animationIndex","parsedAnimation","internalClass","Parse","N","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","isNaN","parseInt","_PhysicsImpostorParser","lodMeshIds","lods","ids","distances","lodDistances","coverages","lodCoverages","parsedInstance","_animationIndex","_parsedAnimation","_internalClass","thinInstanceSetBuffer","minVector","maxVector","boundingBox","minimizeInPlace","minimumWorld","maximizeInPlace","maximumWorld","min","max","meshesOrMinMaxVector","minMaxVector","MinMax","disposeSource","allow32BitsIndices","meshSubclass","subdivideWithSubMeshes","multiMultiMaterials","_MergeMeshesCoroutine","isAsync","_callee","materialArray","materialIndexArray","indiceArray","currentOverrideMaterialSideOrientation","matIndex","_subIndex","_subIndex2","getVertexDataFromMesh","_getVertexDataFromMes","sourceVertexData","sourceTransform","meshVertexDatas","mergeCoroutine","mergeCoroutineStep","applyToCoroutine","applyToCoroutineStep","_iterator11","_step12","newMultiMaterial","_subIndex3","_context","prev","filter","abrupt","isAnInstance","subMaterials","wm","_mergeCoroutine","_applyToCoroutine","stop","BACKSIDE","DOUBLESIDE","NO_CAP","CAP_START","CAP_END","CAP_ALL","NO_FLIP","FLIP_TILE","ROTATE_TILE","FLIP_ROW","ROTATE_ROW","FLIP_N_ROTATE_TILE","FLIP_N_ROTATE_ROW","CENTER","LEFT","RIGHT","TOP","BOTTOM","setMaterialByID","setMaterialById","CreateDisc","Error","CreateBox","CreateSphere","CreateCylinder","CreateTorusKnot","CreateTorus","CreatePlane","CreateGround","CreateTiledGround","CreateGroundFromHeightMap","CreateTube","CreatePolyhedron","CreateIcoSphere","CreateDecal","CreateCapsule","ExtendToGoldberg"],"sourceRoot":""}