{"version":3,"file":"b6df1548-802a03d83da41f8e4dde.js","mappings":"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","sources":["webpack://@react-babylonjs/docs/../../node_modules/@babylonjs/core/Meshes/mesh.js"],"sourcesContent":["import _slicedToArray from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _assertThisInitialized from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _inherits from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _possibleConstructorReturn from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _getPrototypeOf from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _createClass from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _regeneratorRuntime from \"/home/runner/work/react-babylonjs/react-babylonjs/node_modules/@babel/runtime/regenerator/index.js\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { Observable } from \"../Misc/observable.js\";\nimport { Tools, AsyncLoop } from \"../Misc/tools.js\";\nimport { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { Tags } from \"../Misc/tags.js\";\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine.js\";\nimport { Camera } from \"../Cameras/camera.js\";\nimport { ScenePerformancePriority } from \"../scene.js\";\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Node } from \"../node.js\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"./mesh.vertexData.js\";\nimport { Geometry } from \"./geometry.js\";\nimport { AbstractMesh } from \"./abstractMesh.js\";\nimport { SubMesh } from \"./subMesh.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MultiMaterial } from \"../Materials/multiMaterial.js\";\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { GetClass, RegisterClass } from \"../Misc/typeStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { MeshLODLevel } from \"./meshLODLevel.js\";\n/**\n * @internal\n **/\nexport var _CreationDataStorage = /*#__PURE__*/_createClass(function _CreationDataStorage() {\n  _classCallCheck(this, _CreationDataStorage);\n});\n/**\n * @internal\n **/\nvar _InstanceDataStorage = /*#__PURE__*/_createClass(function _InstanceDataStorage() {\n  _classCallCheck(this, _InstanceDataStorage);\n  this.visibleInstances = {};\n  this.batchCache = new _InstancesBatch();\n  this.batchCacheReplacementModeInFrozenMode = new _InstancesBatch();\n  this.instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\n});\n/**\n * @internal\n **/\n\nexport var _InstancesBatch = /*#__PURE__*/_createClass(function _InstancesBatch() {\n  _classCallCheck(this, _InstancesBatch);\n  this.mustReturn = false;\n  this.visibleInstances = new Array();\n  this.renderSelf = new Array();\n  this.hardwareInstancedRendering = new Array();\n});\n/**\n * @internal\n **/\nvar _ThinInstanceDataStorage = /*#__PURE__*/_createClass(function _ThinInstanceDataStorage() {\n  _classCallCheck(this, _ThinInstanceDataStorage);\n  this.instancesCount = 0;\n  this.matrixBuffer = null;\n  this.previousMatrixBuffer = null;\n  this.matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\n  this.matrixData = null;\n  this.boundingVectors = [];\n  this.worldMatrices = null;\n});\n/**\n * @internal\n **/\nvar _InternalMeshDataInfo = /*#__PURE__*/_createClass(function _InternalMeshDataInfo() {\n  _classCallCheck(this, _InternalMeshDataInfo);\n  this._areNormalsFrozen = false; // Will be used by ribbons mainly\n  // Will be used to save a source mesh reference, If any\n  this._source = null;\n  // Will be used to for fast cloned mesh lookup\n  this.meshMap = null;\n  this._preActivateId = -1;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  this._LODLevels = new Array();\n  /** Alternative definition of LOD level, using screen coverage instead of distance */\n  this._useLODScreenCoverage = false;\n  this._effectiveMaterial = null;\n  this._forcedInstanceCount = 0;\n});\n/**\n * Class used to represent renderable models\n */\nexport var Mesh = /*#__PURE__*/function (_AbstractMesh) {\n  _inherits(Mesh, _AbstractMesh);\n  var _super = _createSuper(Mesh);\n  /**\n   * @constructor\n   * @param name The value used by scene.getMeshByName() to do a lookup.\n   * @param scene The scene to add this mesh to.\n   * @param parent The parent of this mesh, if it has one\n   * @param source An optional Mesh from which geometry is shared, cloned.\n   * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\n   *                  When false, achieved by calling a clone(), also passing False.\n   *                  This will make creation of children, recursive.\n   * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\n   */\n  function Mesh(name) {\n    var _this;\n    var scene = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var doNotCloneChildren = arguments.length > 4 ? arguments[4] : undefined;\n    var clonePhysicsImpostor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _classCallCheck(this, Mesh);\n    _this = _super.call(this, name, scene);\n    // Internal data\n    _this._internalMeshDataInfo = new _InternalMeshDataInfo();\n    // Members\n    /**\n     * Gets the delay loading state of the mesh (when delay loading is turned on)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/incrementalLoading\n     */\n    _this.delayLoadState = 0;\n    /**\n     * Gets the list of instances created from this mesh\n     * it is not supposed to be modified manually.\n     * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n     */\n    _this.instances = new Array();\n    // Private\n    /** @internal */\n    _this._creationDataStorage = null;\n    /** @internal */\n    _this._geometry = null;\n    /** @internal */\n    _this._instanceDataStorage = new _InstanceDataStorage();\n    /** @internal */\n    _this._thinInstanceDataStorage = new _ThinInstanceDataStorage();\n    /** @internal */\n    _this._shouldGenerateFlatShading = false;\n    // Use by builder only to know what orientation were the mesh build in.\n    /** @internal */\n    _this._originalBuilderSideOrientation = Mesh.DEFAULTSIDE;\n    /**\n     * Use this property to change the original side orientation defined at construction time\n     */\n    _this.overrideMaterialSideOrientation = null;\n    /**\n     * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\n     * Note this will reduce performance when set to true.\n     */\n    _this.ignoreCameraMaxZ = false;\n    scene = _this.getScene();\n    _this._onBeforeDraw = function (isInstance, world, effectiveMaterial) {\n      if (isInstance && effectiveMaterial) {\n        if (_this._uniformBuffer) {\n          _this.transferToEffect(world);\n        } else {\n          effectiveMaterial.bindOnlyWorldMatrix(world);\n        }\n      }\n    };\n    if (source) {\n      // Geometry\n      if (source._geometry) {\n        source._geometry.applyToMesh(_assertThisInitialized(_this));\n      }\n      // Deep copy\n      DeepCopier.DeepCopy(source, _assertThisInitialized(_this), [\"name\", \"material\", \"skeleton\", \"instances\", \"parent\", \"uniqueId\", \"source\", \"metadata\", \"morphTargetManager\", \"hasInstances\", \"worldMatrixInstancedBuffer\", \"previousWorldMatrixInstancedBuffer\", \"hasLODLevels\", \"geometry\", \"isBlocked\", \"areNormalsFrozen\", \"facetNb\", \"isFacetDataEnabled\", \"lightSources\", \"useBones\", \"isAnInstance\", \"collider\", \"edgesRenderer\", \"forward\", \"up\", \"right\", \"absolutePosition\", \"absoluteScaling\", \"absoluteRotationQuaternion\", \"isWorldMatrixFrozen\", \"nonUniformScaling\", \"behaviors\", \"worldMatrixFromCache\", \"hasThinInstances\", \"cloneMeshMap\", \"hasBoundingInfo\"], [\"_poseMatrix\"]);\n      // Source mesh\n      _this._internalMeshDataInfo._source = source;\n      if (scene.useClonedMeshMap) {\n        if (!source._internalMeshDataInfo.meshMap) {\n          source._internalMeshDataInfo.meshMap = {};\n        }\n        source._internalMeshDataInfo.meshMap[_this.uniqueId] = _assertThisInitialized(_this);\n      }\n      // Construction Params\n      // Clone parameters allowing mesh to be updated in case of parametric shapes.\n      _this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\n      _this._creationDataStorage = source._creationDataStorage;\n      // Animation ranges\n      if (source._ranges) {\n        var ranges = source._ranges;\n        for (var _name in ranges) {\n          if (!Object.prototype.hasOwnProperty.call(ranges, _name)) {\n            continue;\n          }\n          if (!ranges[_name]) {\n            continue;\n          }\n          _this.createAnimationRange(_name, ranges[_name].from, ranges[_name].to);\n        }\n      }\n      // Metadata\n      if (source.metadata && source.metadata.clone) {\n        _this.metadata = source.metadata.clone();\n      } else {\n        _this.metadata = source.metadata;\n      }\n      // Tags\n      if (Tags && Tags.HasTags(source)) {\n        Tags.AddTagsTo(_assertThisInitialized(_this), Tags.GetTags(source, true));\n      }\n      // Enabled. We shouldn't need to check the source's ancestors, as this mesh\n      // will have the same ones.\n      _this.setEnabled(source.isEnabled(false));\n      // Parent\n      _this.parent = source.parent;\n      // Pivot\n      _this.setPivotMatrix(source.getPivotMatrix());\n      _this.id = name + \".\" + source.id;\n      // Material\n      _this.material = source.material;\n      if (!doNotCloneChildren) {\n        // Children\n        var directDescendants = source.getDescendants(true);\n        for (var index = 0; index < directDescendants.length; index++) {\n          var child = directDescendants[index];\n          if (child.clone) {\n            child.clone(name + \".\" + child.name, _assertThisInitialized(_this));\n          }\n        }\n      }\n      // Morphs\n      if (source.morphTargetManager) {\n        _this.morphTargetManager = source.morphTargetManager;\n      }\n      // Physics clone\n      if (scene.getPhysicsEngine) {\n        var physicsEngine = scene.getPhysicsEngine();\n        if (clonePhysicsImpostor && physicsEngine && physicsEngine.getPluginVersion() === 1) {\n          var impostor = physicsEngine.getImpostorForPhysicsObject(source);\n          if (impostor) {\n            _this.physicsImpostor = impostor.clone(_assertThisInitialized(_this));\n          }\n        }\n      }\n      // Particles\n      for (var _index = 0; _index < scene.particleSystems.length; _index++) {\n        var system = scene.particleSystems[_index];\n        if (system.emitter === source) {\n          system.clone(system.name, _assertThisInitialized(_this));\n        }\n      }\n      // Skeleton\n      _this.skeleton = source.skeleton;\n      _this.refreshBoundingInfo(true, true);\n      _this.computeWorldMatrix(true);\n    }\n    // Parent\n    if (parent !== null) {\n      _this.parent = parent;\n    }\n    _this._instanceDataStorage.hardwareInstancedRendering = _this.getEngine().getCaps().instancedArrays;\n    _this._internalMeshDataInfo._onMeshReadyObserverAdded = function (observer) {\n      // only notify once! then unregister the observer\n      observer.unregisterOnNextCall = true;\n      if (_this.isReady(true)) {\n        _this.onMeshReadyObservable.notifyObservers(_assertThisInitialized(_this));\n      } else {\n        if (!_this._internalMeshDataInfo._checkReadinessObserver) {\n          _this._internalMeshDataInfo._checkReadinessObserver = _this._scene.onBeforeRenderObservable.add(function () {\n            // check for complete readiness\n            if (_this.isReady(true)) {\n              _this._scene.onBeforeRenderObservable.remove(_this._internalMeshDataInfo._checkReadinessObserver);\n              _this._internalMeshDataInfo._checkReadinessObserver = null;\n              _this.onMeshReadyObservable.notifyObservers(_assertThisInitialized(_this));\n            }\n          });\n        }\n      }\n    };\n    _this.onMeshReadyObservable = new Observable(_this._internalMeshDataInfo._onMeshReadyObserverAdded);\n    if (source) {\n      source.onClonedObservable.notifyObservers(_assertThisInitialized(_this));\n    }\n    return _this;\n  }\n  /**\n   * Gets the default side orientation.\n   * @param orientation the orientation to value to attempt to get\n   * @returns the default orientation\n   * @internal\n   */\n  _createClass(Mesh, [{\n    key: \"useLODScreenCoverage\",\n    get:\n    /**\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance.\n     */\n    function get() {\n      return this._internalMeshDataInfo._useLODScreenCoverage;\n    },\n    set: function set(value) {\n      this._internalMeshDataInfo._useLODScreenCoverage = value;\n      this._sortLODLevels();\n    }\n  }, {\n    key: \"computeBonesUsingShaders\",\n    get: function get() {\n      return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\n    },\n    set: function set(value) {\n      if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\n        return;\n      }\n      if (value && this._internalMeshDataInfo._sourcePositions) {\n        // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\n        this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\n        if (this._internalMeshDataInfo._sourceNormals) {\n          this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\n        }\n        this._internalMeshDataInfo._sourcePositions = null;\n        this._internalMeshDataInfo._sourceNormals = null;\n      }\n      this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\n      this._markSubMeshesAsAttributesDirty();\n    }\n    /**\n     * An event triggered before rendering the mesh\n     */\n  }, {\n    key: \"onBeforeRenderObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\n        this._internalMeshDataInfo._onBeforeRenderObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeRenderObservable;\n    }\n    /**\n     * An event triggered before binding the mesh\n     */\n  }, {\n    key: \"onBeforeBindObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeBindObservable) {\n        this._internalMeshDataInfo._onBeforeBindObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeBindObservable;\n    }\n    /**\n     * An event triggered after rendering the mesh\n     */\n  }, {\n    key: \"onAfterRenderObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onAfterRenderObservable) {\n        this._internalMeshDataInfo._onAfterRenderObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onAfterRenderObservable;\n    }\n    /**\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\n     */\n  }, {\n    key: \"onBetweenPassObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBetweenPassObservable) {\n        this._internalMeshDataInfo._onBetweenPassObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBetweenPassObservable;\n    }\n    /**\n     * An event triggered before drawing the mesh\n     */\n  }, {\n    key: \"onBeforeDrawObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\n        this._internalMeshDataInfo._onBeforeDrawObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeDrawObservable;\n    }\n    /**\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\n     */\n  }, {\n    key: \"onBeforeDraw\",\n    set: function set(callback) {\n      if (this._onBeforeDrawObserver) {\n        this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\n      }\n      this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\n    }\n  }, {\n    key: \"hasInstances\",\n    get: function get() {\n      return this.instances.length > 0;\n    }\n  }, {\n    key: \"hasThinInstances\",\n    get: function get() {\n      var _a;\n      return ((_a = this._thinInstanceDataStorage.instancesCount) !== null && _a !== void 0 ? _a : 0) > 0;\n    }\n    /**\n     * Gets or sets the forced number of instances to display.\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\n     * (regular / instance / thin instances mesh)\n     */\n  }, {\n    key: \"forcedInstanceCount\",\n    get: function get() {\n      return this._internalMeshDataInfo._forcedInstanceCount;\n    },\n    set: function set(count) {\n      this._internalMeshDataInfo._forcedInstanceCount = count;\n    }\n    /**\n     * Gets the source mesh (the one used to clone this one from)\n     */\n  }, {\n    key: \"source\",\n    get: function get() {\n      return this._internalMeshDataInfo._source;\n    }\n    /**\n     * Gets the list of clones of this mesh\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\n     * Note that useClonedMeshMap=true is the default setting\n     */\n  }, {\n    key: \"cloneMeshMap\",\n    get: function get() {\n      return this._internalMeshDataInfo.meshMap;\n    }\n    /**\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\n     */\n  }, {\n    key: \"isUnIndexed\",\n    get: function get() {\n      return this._unIndexed;\n    },\n    set: function set(value) {\n      if (this._unIndexed !== value) {\n        this._unIndexed = value;\n        this._markSubMeshesAsAttributesDirty();\n      }\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\n  }, {\n    key: \"worldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.instancesData;\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\n  }, {\n    key: \"previousWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.instancesPreviousData;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n  }, {\n    key: \"manualUpdateOfWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.manualUpdate;\n    },\n    set: function set(value) {\n      this._instanceDataStorage.manualUpdate = value;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n  }, {\n    key: \"manualUpdateOfPreviousWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.previousManualUpdate;\n    },\n    set: function set(value) {\n      this._instanceDataStorage.previousManualUpdate = value;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices must be performed in all cases (and notably even in frozen mode) */\n  }, {\n    key: \"forceWorldMatrixInstancedBufferUpdate\",\n    get: function get() {\n      return this._instanceDataStorage.forceMatrixUpdates;\n    },\n    set: function set(value) {\n      this._instanceDataStorage.forceMatrixUpdates = value;\n    }\n  }, {\n    key: \"instantiateHierarchy\",\n    value: function instantiateHierarchy() {\n      var newParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      var onNewNodeCreated = arguments.length > 2 ? arguments[2] : undefined;\n      var instance = this.getTotalVertices() === 0 || options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)) ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true) : this.createInstance(\"instance of \" + (this.name || this.id));\n      instance.parent = newParent || this.parent;\n      instance.position = this.position.clone();\n      instance.scaling = this.scaling.clone();\n      if (this.rotationQuaternion) {\n        instance.rotationQuaternion = this.rotationQuaternion.clone();\n      } else {\n        instance.rotation = this.rotation.clone();\n      }\n      if (onNewNodeCreated) {\n        onNewNodeCreated(this, instance);\n      }\n      var _iterator = _createForOfIteratorHelper(this.getChildTransformNodes(true)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          // instancedMesh should have a different sourced mesh\n          if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\") {\n            child.instantiateHierarchy(instance, {\n              doNotInstantiate: options && options.doNotInstantiate || false,\n              newSourcedMesh: instance\n            }, onNewNodeCreated);\n          } else {\n            child.instantiateHierarchy(instance, options, onNewNodeCreated);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return instance;\n    }\n    /**\n     * Gets the class name\n     * @returns the string \"Mesh\".\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Mesh\";\n    }\n    /** @internal */\n  }, {\n    key: \"_isMesh\",\n    get: function get() {\n      return true;\n    }\n    /**\n     * Returns a description of this mesh\n     * @param fullDetails define if full details about this mesh must be used\n     * @returns a descriptive string representing this mesh\n     */\n  }, {\n    key: \"toString\",\n    value: function toString(fullDetails) {\n      var ret = _get(_getPrototypeOf(Mesh.prototype), \"toString\", this).call(this, fullDetails);\n      ret += \", n vertices: \" + this.getTotalVertices();\n      ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\n      if (this.animations) {\n        for (var i = 0; i < this.animations.length; i++) {\n          ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\n        }\n      }\n      if (fullDetails) {\n        if (this._geometry) {\n          var ib = this.getIndices();\n          var vb = this.getVerticesData(VertexBuffer.PositionKind);\n          if (vb && ib) {\n            ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\n          }\n        } else {\n          ret += \", flat shading: UNKNOWN\";\n        }\n      }\n      return ret;\n    }\n    /** @internal */\n  }, {\n    key: \"_unBindEffect\",\n    value: function _unBindEffect() {\n      _get(_getPrototypeOf(Mesh.prototype), \"_unBindEffect\", this).call(this);\n      var _iterator2 = _createForOfIteratorHelper(this.instances),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var instance = _step2.value;\n          instance._unBindEffect();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Gets a boolean indicating if this mesh has LOD\n     */\n  }, {\n    key: \"hasLODLevels\",\n    get: function get() {\n      return this._internalMeshDataInfo._LODLevels.length > 0;\n    }\n    /**\n     * Gets the list of MeshLODLevel associated with the current mesh\n     * @returns an array of MeshLODLevel\n     */\n  }, {\n    key: \"getLODLevels\",\n    value: function getLODLevels() {\n      return this._internalMeshDataInfo._LODLevels;\n    }\n  }, {\n    key: \"_sortLODLevels\",\n    value: function _sortLODLevels() {\n      var sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\n      this._internalMeshDataInfo._LODLevels.sort(function (a, b) {\n        if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\n          return sortingOrderFactor;\n        }\n        if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\n          return -sortingOrderFactor;\n        }\n        return 0;\n      });\n    }\n    /**\n     * Add a mesh as LOD level triggered at the given distance.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\n     * Example Playground for distance https://playground.babylonjs.com/#QE7KM#197\n     * Example Playground for screen coverage https://playground.babylonjs.com/#QE7KM#196\n     * @param mesh The mesh to be added as LOD level (can be null)\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"addLODLevel\",\n    value: function addLODLevel(distanceOrScreenCoverage, mesh) {\n      if (mesh && mesh._masterMesh) {\n        Logger.Warn(\"You cannot use a mesh as LOD level twice\");\n        return this;\n      }\n      var level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\n      this._internalMeshDataInfo._LODLevels.push(level);\n      if (mesh) {\n        mesh._masterMesh = this;\n      }\n      this._sortLODLevels();\n      return this;\n    }\n    /**\n     * Returns the LOD level mesh at the passed distance or null if not found.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param distance The distance from the center of the object to show this level\n     * @returns a Mesh or `null`\n     */\n  }, {\n    key: \"getLODLevelAtDistance\",\n    value: function getLODLevelAtDistance(distance) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        var level = internalDataInfo._LODLevels[index];\n        if (level.distanceOrScreenCoverage === distance) {\n          return level.mesh;\n        }\n      }\n      return null;\n    }\n    /**\n     * Remove a mesh from the LOD array\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param mesh defines the mesh to be removed\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"removeLODLevel\",\n    value: function removeLODLevel(mesh) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        if (internalDataInfo._LODLevels[index].mesh === mesh) {\n          internalDataInfo._LODLevels.splice(index, 1);\n          if (mesh) {\n            mesh._masterMesh = null;\n          }\n        }\n      }\n      this._sortLODLevels();\n      return this;\n    }\n    /**\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param camera defines the camera to use to compute distance\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"getLOD\",\n    value: function getLOD(camera, boundingSphere) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\n        return this;\n      }\n      var bSphere = boundingSphere || this.getBoundingInfo().boundingSphere;\n      var distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\n      var compareValue = distanceToCamera;\n      var compareSign = 1;\n      if (internalDataInfo._useLODScreenCoverage) {\n        var screenArea = camera.screenArea;\n        var meshArea = bSphere.radiusWorld * camera.minZ / distanceToCamera;\n        meshArea = meshArea * meshArea * Math.PI;\n        compareValue = meshArea / screenArea;\n        compareSign = -1;\n      }\n      if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\n        if (this.onLODLevelSelection) {\n          this.onLODLevelSelection(compareValue, this, this);\n        }\n        return this;\n      }\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        var level = internalDataInfo._LODLevels[index];\n        if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\n          if (level.mesh) {\n            if (level.mesh.delayLoadState === 4) {\n              level.mesh._checkDelayState();\n              return this;\n            }\n            if (level.mesh.delayLoadState === 2) {\n              return this;\n            }\n            level.mesh._preActivate();\n            level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\n          }\n          if (this.onLODLevelSelection) {\n            this.onLODLevelSelection(compareValue, this, level.mesh);\n          }\n          return level.mesh;\n        }\n      }\n      if (this.onLODLevelSelection) {\n        this.onLODLevelSelection(compareValue, this, this);\n      }\n      return this;\n    }\n    /**\n     * Gets the mesh internal Geometry object\n     */\n  }, {\n    key: \"geometry\",\n    get: function get() {\n      return this._geometry;\n    }\n    /**\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\n     * @returns the total number of vertices\n     */\n  }, {\n    key: \"getTotalVertices\",\n    value: function getTotalVertices() {\n      if (this._geometry === null || this._geometry === undefined) {\n        return 0;\n      }\n      return this._geometry.getTotalVertices();\n    }\n    /**\n     * Returns the content of an associated vertex buffer\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\n     */\n  }, {\n    key: \"getVerticesData\",\n    value: function getVerticesData(kind, copyWhenShared, forceCopy) {\n      var _a, _b;\n      if (!this._geometry) {\n        return null;\n      }\n      var data = (_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) === null || _b === void 0 ? void 0 : _b.getFloatData(this._geometry.getTotalVertices(), forceCopy || copyWhenShared && this._geometry.meshes.length !== 1);\n      if (!data) {\n        data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\n      }\n      return data;\n    }\n    /**\n     * Returns the mesh VertexBuffer object from the requested `kind`\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\n     */\n  }, {\n    key: \"getVertexBuffer\",\n    value: function getVertexBuffer(kind) {\n      var _a, _b;\n      if (!this._geometry) {\n        return null;\n      }\n      return (_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) !== null && _b !== void 0 ? _b : this._geometry.getVertexBuffer(kind);\n    }\n    /**\n     * Tests if a specific vertex buffer is associated with this mesh\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a boolean\n     */\n  }, {\n    key: \"isVerticesDataPresent\",\n    value: function isVerticesDataPresent(kind) {\n      var _a;\n      if (!this._geometry) {\n        if (this._delayInfo) {\n          return this._delayInfo.indexOf(kind) !== -1;\n        }\n        return false;\n      }\n      return ((_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) !== undefined || this._geometry.isVerticesDataPresent(kind);\n    }\n    /**\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a boolean\n     */\n  }, {\n    key: \"isVertexBufferUpdatable\",\n    value: function isVertexBufferUpdatable(kind) {\n      var _a, _b;\n      if (!this._geometry) {\n        if (this._delayInfo) {\n          return this._delayInfo.indexOf(kind) !== -1;\n        }\n        return false;\n      }\n      return ((_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) === null || _b === void 0 ? void 0 : _b.isUpdatable()) || this._geometry.isVertexBufferUpdatable(kind);\n    }\n    /**\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\n     * @returns an array of strings\n     */\n  }, {\n    key: \"getVerticesDataKinds\",\n    value: function getVerticesDataKinds() {\n      if (!this._geometry) {\n        var result = new Array();\n        if (this._delayInfo) {\n          this._delayInfo.forEach(function (kind) {\n            result.push(kind);\n          });\n        }\n        return result;\n      }\n      var kinds = this._geometry.getVerticesDataKinds();\n      if (this._userInstancedBuffersStorage) {\n        for (var kind in this._userInstancedBuffersStorage.vertexBuffers) {\n          kinds.push(kind);\n        }\n      }\n      return kinds;\n    }\n    /**\n     * Returns a positive integer : the total number of indices in this mesh geometry.\n     * @returns the numner of indices or zero if the mesh has no geometry.\n     */\n  }, {\n    key: \"getTotalIndices\",\n    value: function getTotalIndices() {\n      if (!this._geometry) {\n        return 0;\n      }\n      return this._geometry.getTotalIndices();\n    }\n    /**\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n     * @returns the indices array or an empty array if the mesh has no geometry\n     */\n  }, {\n    key: \"getIndices\",\n    value: function getIndices(copyWhenShared, forceCopy) {\n      if (!this._geometry) {\n        return [];\n      }\n      return this._geometry.getIndices(copyWhenShared, forceCopy);\n    }\n  }, {\n    key: \"isBlocked\",\n    get: function get() {\n      return this._masterMesh !== null && this._masterMesh !== undefined;\n    }\n    /**\n     * Determine if the current mesh is ready to be rendered\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\n     * @returns true if all associated assets are ready (material, textures, shaders)\n     */\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      var completeCheck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var forceInstanceSupport = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _a, _b, _c, _d, _e, _f;\n      if (this.delayLoadState === 2) {\n        return false;\n      }\n      if (!_get(_getPrototypeOf(Mesh.prototype), \"isReady\", this).call(this, completeCheck)) {\n        return false;\n      }\n      if (!this.subMeshes || this.subMeshes.length === 0) {\n        return true;\n      }\n      if (!completeCheck) {\n        return true;\n      }\n      var engine = this.getEngine();\n      var scene = this.getScene();\n      var hardwareInstancedRendering = forceInstanceSupport || engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances);\n      this.computeWorldMatrix();\n      var mat = this.material || scene.defaultMaterial;\n      if (mat) {\n        if (mat._storeEffectOnSubMeshes) {\n          var _iterator3 = _createForOfIteratorHelper(this.subMeshes),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var subMesh = _step3.value;\n              var effectiveMaterial = subMesh.getMaterial();\n              if (effectiveMaterial) {\n                if (effectiveMaterial._storeEffectOnSubMeshes) {\n                  if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n                    return false;\n                  }\n                } else {\n                  if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\n                    return false;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        } else {\n          if (!mat.isReady(this, hardwareInstancedRendering)) {\n            return false;\n          }\n        }\n      }\n      // Shadows\n      var currentRenderPassId = engine.currentRenderPassId;\n      var _iterator4 = _createForOfIteratorHelper(this.lightSources),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var light = _step4.value;\n          var generators = light.getShadowGenerators();\n          if (!generators) {\n            continue;\n          }\n          var iterator = generators.values();\n          for (var key = iterator.next(); key.done !== true; key = iterator.next()) {\n            var generator = key.value;\n            if (generator && (!((_a = generator.getShadowMap()) === null || _a === void 0 ? void 0 : _a.renderList) || ((_b = generator.getShadowMap()) === null || _b === void 0 ? void 0 : _b.renderList) && ((_d = (_c = generator.getShadowMap()) === null || _c === void 0 ? void 0 : _c.renderList) === null || _d === void 0 ? void 0 : _d.indexOf(this)) !== -1)) {\n              if (generator.getShadowMap()) {\n                engine.currentRenderPassId = generator.getShadowMap().renderPassId;\n              }\n              var _iterator6 = _createForOfIteratorHelper(this.subMeshes),\n                _step6;\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var _subMesh = _step6.value;\n                  if (!generator.isReady(_subMesh, hardwareInstancedRendering, (_f = (_e = _subMesh.getMaterial()) === null || _e === void 0 ? void 0 : _e.needAlphaBlendingForMesh(this)) !== null && _f !== void 0 ? _f : false)) {\n                    engine.currentRenderPassId = currentRenderPassId;\n                    return false;\n                  }\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n              engine.currentRenderPassId = currentRenderPassId;\n            }\n          }\n        }\n        // LOD\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(this._internalMeshDataInfo._LODLevels),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var lod = _step5.value;\n          if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return true;\n    }\n    /**\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\n     */\n  }, {\n    key: \"areNormalsFrozen\",\n    get: function get() {\n      return this._internalMeshDataInfo._areNormalsFrozen;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"freezeNormals\",\n    value: function freezeNormals() {\n      this._internalMeshDataInfo._areNormalsFrozen = true;\n      return this;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unfreezeNormals\",\n    value: function unfreezeNormals() {\n      this._internalMeshDataInfo._areNormalsFrozen = false;\n      return this;\n    }\n    /**\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\n     */\n  }, {\n    key: \"overridenInstanceCount\",\n    set: function set(count) {\n      this._instanceDataStorage.overridenInstanceCount = count;\n    }\n    // Methods\n    /** @internal */\n  }, {\n    key: \"_preActivate\",\n    value: function _preActivate() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      var sceneRenderId = this.getScene().getRenderId();\n      if (internalDataInfo._preActivateId === sceneRenderId) {\n        return this;\n      }\n      internalDataInfo._preActivateId = sceneRenderId;\n      this._instanceDataStorage.visibleInstances = null;\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_preActivateForIntermediateRendering\",\n    value: function _preActivateForIntermediateRendering(renderId) {\n      if (this._instanceDataStorage.visibleInstances) {\n        this._instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_registerInstanceForRenderId\",\n    value: function _registerInstanceForRenderId(instance, renderId) {\n      if (!this._instanceDataStorage.visibleInstances) {\n        this._instanceDataStorage.visibleInstances = {\n          defaultRenderId: renderId,\n          selfDefaultRenderId: this._renderId\n        };\n      }\n      if (!this._instanceDataStorage.visibleInstances[renderId]) {\n        if (this._instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\n          this._instanceDataStorage.visibleInstances[this._instanceDataStorage.previousRenderId] = null;\n        }\n        this._instanceDataStorage.previousRenderId = renderId;\n        this._instanceDataStorage.visibleInstances[renderId] = new Array();\n      }\n      this._instanceDataStorage.visibleInstances[renderId].push(instance);\n      return this;\n    }\n  }, {\n    key: \"_afterComputeWorldMatrix\",\n    value: function _afterComputeWorldMatrix() {\n      _get(_getPrototypeOf(Mesh.prototype), \"_afterComputeWorldMatrix\", this).call(this);\n      if (!this.hasThinInstances) {\n        return;\n      }\n      if (!this.doNotSyncBoundingInfo) {\n        this.thinInstanceRefreshBoundingInfo(false);\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_postActivate\",\n    value: function _postActivate() {\n      if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\n        this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\n        this.edgesRenderer.customInstances.push(this.getWorldMatrix());\n      }\n    }\n    /**\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\n     * This means the mesh underlying bounding box and sphere are recomputed.\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\n     * @returns the current mesh\n     */\n  }, {\n    key: \"refreshBoundingInfo\",\n    value: function refreshBoundingInfo() {\n      var applySkeleton = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var applyMorph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\n        return this;\n      }\n      var bias = this.geometry ? this.geometry.boundingBias : null;\n      this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), bias);\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_createGlobalSubMesh\",\n    value: function _createGlobalSubMesh(force) {\n      var totalVertices = this.getTotalVertices();\n      if (!totalVertices || !this.getIndices()) {\n        return null;\n      }\n      // Check if we need to recreate the submeshes\n      if (this.subMeshes && this.subMeshes.length > 0) {\n        var ib = this.getIndices();\n        if (!ib) {\n          return null;\n        }\n        var totalIndices = ib.length;\n        var needToRecreate = false;\n        if (force) {\n          needToRecreate = true;\n        } else {\n          var _iterator7 = _createForOfIteratorHelper(this.subMeshes),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var submesh = _step7.value;\n              if (submesh.indexStart + submesh.indexCount > totalIndices) {\n                needToRecreate = true;\n                break;\n              }\n              if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\n                needToRecreate = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n        if (!needToRecreate) {\n          return this.subMeshes[0];\n        }\n      }\n      this.releaseSubMeshes();\n      return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices(), this);\n    }\n    /**\n     * This function will subdivide the mesh into multiple submeshes\n     * @param count defines the expected number of submeshes\n     */\n  }, {\n    key: \"subdivide\",\n    value: function subdivide(count) {\n      if (count < 1) {\n        return;\n      }\n      var totalIndices = this.getTotalIndices();\n      var subdivisionSize = totalIndices / count | 0;\n      var offset = 0;\n      // Ensure that subdivisionSize is a multiple of 3\n      while (subdivisionSize % 3 !== 0) {\n        subdivisionSize++;\n      }\n      this.releaseSubMeshes();\n      for (var index = 0; index < count; index++) {\n        if (offset >= totalIndices) {\n          break;\n        }\n        SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this);\n        offset += subdivisionSize;\n      }\n      this.synchronizeInstances();\n    }\n    /**\n     * Copy a FloatArray into a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     * @param stride defines the data stride size (can be null)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setVerticesData\",\n    value: function setVerticesData(kind, data) {\n      var updatable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var stride = arguments.length > 3 ? arguments[3] : undefined;\n      if (!this._geometry) {\n        var vertexData = new VertexData();\n        vertexData.set(data, kind);\n        var scene = this.getScene();\n        new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n      } else {\n        this._geometry.setVerticesData(kind, data, updatable, stride);\n      }\n      return this;\n    }\n    /**\n     * Delete a vertex buffer associated with this mesh\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     */\n  }, {\n    key: \"removeVerticesData\",\n    value: function removeVerticesData(kind) {\n      if (!this._geometry) {\n        return;\n      }\n      this._geometry.removeVerticesData(kind);\n    }\n    /**\n     * Flags an associated vertex buffer as updatable\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     */\n  }, {\n    key: \"markVerticesDataAsUpdatable\",\n    value: function markVerticesDataAsUpdatable(kind) {\n      var updatable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var vb = this.getVertexBuffer(kind);\n      if (!vb || vb.isUpdatable() === updatable) {\n        return;\n      }\n      this.setVerticesData(kind, this.getVerticesData(kind), updatable);\n    }\n    /**\n     * Sets the mesh global Vertex Buffer\n     * @param buffer defines the buffer to use\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setVerticesBuffer\",\n    value: function setVerticesBuffer(buffer) {\n      var disposeExistingBuffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!this._geometry) {\n        this._geometry = Geometry.CreateGeometryForMesh(this);\n      }\n      this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\n      return this;\n    }\n    /**\n     * Update a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateVerticesData\",\n    value: function updateVerticesData(kind, data, updateExtends, makeItUnique) {\n      if (!this._geometry) {\n        return this;\n      }\n      if (!makeItUnique) {\n        this._geometry.updateVerticesData(kind, data, updateExtends);\n      } else {\n        this.makeGeometryUnique();\n        this.updateVerticesData(kind, data, updateExtends, false);\n      }\n      return this;\n    }\n    /**\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#other-shapes-updatemeshpositions\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateMeshPositions\",\n    value: function updateMeshPositions(positionFunction) {\n      var computeNormals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var positions = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positions) {\n        return this;\n      }\n      positionFunction(positions);\n      this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\n      if (computeNormals) {\n        var indices = this.getIndices();\n        var normals = this.getVerticesData(VertexBuffer.NormalKind);\n        if (!normals) {\n          return this;\n        }\n        VertexData.ComputeNormals(positions, indices, normals);\n        this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\n      }\n      return this;\n    }\n    /**\n     * Creates a un-shared specific occurence of the geometry for the mesh.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"makeGeometryUnique\",\n    value: function makeGeometryUnique() {\n      if (!this._geometry) {\n        return this;\n      }\n      if (this._geometry.meshes.length === 1) {\n        return this;\n      }\n      var oldGeometry = this._geometry;\n      var geometry = this._geometry.copy(Geometry.RandomId());\n      oldGeometry.releaseForMesh(this, true);\n      geometry.applyToMesh(this);\n      return this;\n    }\n    /**\n     * Set the index buffer of this mesh\n     * @param indices defines the source data\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setIndices\",\n    value: function setIndices(indices) {\n      var totalVertices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var updatable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this._geometry) {\n        var vertexData = new VertexData();\n        vertexData.indices = indices;\n        var scene = this.getScene();\n        new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n      } else {\n        this._geometry.setIndices(indices, totalVertices, updatable);\n      }\n      return this;\n    }\n    /**\n     * Update the current index buffer\n     * @param indices defines the source data\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateIndices\",\n    value: function updateIndices(indices, offset) {\n      var gpuMemoryOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this._geometry) {\n        return this;\n      }\n      this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\n      return this;\n    }\n    /**\n     * Invert the geometry to move from a right handed system to a left handed one.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"toLeftHanded\",\n    value: function toLeftHanded() {\n      if (!this._geometry) {\n        return this;\n      }\n      this._geometry.toLeftHanded();\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_bind\",\n    value: function _bind(subMesh, effect, fillMode) {\n      if (!this._geometry) {\n        return this;\n      }\n      var engine = this.getScene().getEngine();\n      // Morph targets\n      if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\n        this.morphTargetManager._bind(effect);\n      }\n      // Wireframe\n      var indexToBind;\n      if (this._unIndexed) {\n        indexToBind = null;\n      } else {\n        switch (fillMode) {\n          case Material.PointFillMode:\n            indexToBind = null;\n            break;\n          case Material.WireFrameFillMode:\n            indexToBind = subMesh._getLinesIndexBuffer(this.getIndices(), engine);\n            break;\n          default:\n          case Material.TriangleFillMode:\n            indexToBind = this._geometry.getIndexBuffer();\n            break;\n        }\n      }\n      // VBOs\n      if (!this._userInstancedBuffersStorage || this.hasThinInstances) {\n        this._geometry._bind(effect, indexToBind);\n      } else {\n        this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_draw\",\n    value: function _draw(subMesh, fillMode, instancesCount) {\n      if (!this._geometry || !this._geometry.getVertexBuffers() || !this._unIndexed && !this._geometry.getIndexBuffer()) {\n        return this;\n      }\n      if (this._internalMeshDataInfo._onBeforeDrawObservable) {\n        this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\n      }\n      var scene = this.getScene();\n      var engine = scene.getEngine();\n      if (this._unIndexed || fillMode == Material.PointFillMode) {\n        // or triangles as points\n        engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\n      } else if (fillMode == Material.WireFrameFillMode) {\n        // Triangles as wireframe\n        engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\n      } else {\n        engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\n      }\n      return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just before the rendering process\n     * @param func defines the function to call before rendering this mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"registerBeforeRender\",\n    value: function registerBeforeRender(func) {\n      this.onBeforeRenderObservable.add(func);\n      return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called before the rendering\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unregisterBeforeRender\",\n    value: function unregisterBeforeRender(func) {\n      this.onBeforeRenderObservable.removeCallback(func);\n      return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just after the rendering is complete\n     * @param func defines the function to call after rendering this mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"registerAfterRender\",\n    value: function registerAfterRender(func) {\n      this.onAfterRenderObservable.add(func);\n      return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called after the rendering.\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unregisterAfterRender\",\n    value: function unregisterAfterRender(func) {\n      this.onAfterRenderObservable.removeCallback(func);\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_getInstancesRenderList\",\n    value: function _getInstancesRenderList(subMeshId) {\n      var isReplacementMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this._instanceDataStorage.isFrozen) {\n        if (isReplacementMode) {\n          this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\n          this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\n          return this._instanceDataStorage.batchCacheReplacementModeInFrozenMode;\n        }\n        if (this._instanceDataStorage.previousBatch) {\n          return this._instanceDataStorage.previousBatch;\n        }\n      }\n      var scene = this.getScene();\n      var isInIntermediateRendering = scene._isInIntermediateRendering();\n      var onlyForInstances = isInIntermediateRendering ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate : this._internalAbstractMeshDataInfo._onlyForInstances;\n      var batchCache = this._instanceDataStorage.batchCache;\n      batchCache.mustReturn = false;\n      batchCache.renderSelf[subMeshId] = isReplacementMode || !onlyForInstances && this.isEnabled() && this.isVisible;\n      batchCache.visibleInstances[subMeshId] = null;\n      if (this._instanceDataStorage.visibleInstances && !isReplacementMode) {\n        var visibleInstances = this._instanceDataStorage.visibleInstances;\n        var currentRenderId = scene.getRenderId();\n        var defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\n        batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\n        if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\n          batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\n        }\n      }\n      batchCache.hardwareInstancedRendering[subMeshId] = !isReplacementMode && this._instanceDataStorage.hardwareInstancedRendering && batchCache.visibleInstances[subMeshId] !== null && batchCache.visibleInstances[subMeshId] !== undefined;\n      this._instanceDataStorage.previousBatch = batchCache;\n      return batchCache;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_renderWithInstances\",\n    value: function _renderWithInstances(subMesh, fillMode, batch, effect, engine) {\n      var _a;\n      var visibleInstances = batch.visibleInstances[subMesh._id];\n      var visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\n      var instanceStorage = this._instanceDataStorage;\n      var currentInstancesBufferSize = instanceStorage.instancesBufferSize;\n      var instancesBuffer = instanceStorage.instancesBuffer;\n      var instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\n      var matricesCount = visibleInstanceCount + 1;\n      var bufferSize = matricesCount * 16 * 4;\n      while (instanceStorage.instancesBufferSize < bufferSize) {\n        instanceStorage.instancesBufferSize *= 2;\n      }\n      if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n        instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n      }\n      if (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n        instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n      }\n      var offset = 0;\n      var instancesCount = 0;\n      var renderSelf = batch.renderSelf[subMesh._id];\n      var needUpdateBuffer = !instancesBuffer || currentInstancesBufferSize !== instanceStorage.instancesBufferSize || this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer;\n      if (!this._instanceDataStorage.manualUpdate && (!instanceStorage.isFrozen || needUpdateBuffer)) {\n        var world = this.getWorldMatrix();\n        if (renderSelf) {\n          if (this._scene.needsPreviousWorldMatrices) {\n            if (!instanceStorage.masterMeshPreviousWorldMatrix) {\n              instanceStorage.masterMeshPreviousWorldMatrix = world.clone();\n              instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n            } else {\n              instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n              instanceStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\n            }\n          }\n          world.copyToArray(instanceStorage.instancesData, offset);\n          offset += 16;\n          instancesCount++;\n        }\n        if (visibleInstances) {\n          if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && ((_a = subMesh.getMaterial()) === null || _a === void 0 ? void 0 : _a.needAlphaBlendingForMesh(subMesh.getRenderingMesh()))) {\n            var cameraPosition = this._scene.activeCamera.globalPosition;\n            for (var instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\n              var instanceMesh = visibleInstances[instanceIndex];\n              instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\n            }\n            visibleInstances.sort(function (m1, m2) {\n              return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\n            });\n          }\n          for (var _instanceIndex = 0; _instanceIndex < visibleInstances.length; _instanceIndex++) {\n            var instance = visibleInstances[_instanceIndex];\n            var matrix = instance.getWorldMatrix();\n            matrix.copyToArray(instanceStorage.instancesData, offset);\n            if (this._scene.needsPreviousWorldMatrices) {\n              if (!instance._previousWorldMatrix) {\n                instance._previousWorldMatrix = matrix.clone();\n                instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n              } else {\n                instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                instance._previousWorldMatrix.copyFrom(matrix);\n              }\n            }\n            offset += 16;\n            instancesCount++;\n          }\n        }\n      } else {\n        instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\n      }\n      if (needUpdateBuffer) {\n        if (instancesBuffer) {\n          instancesBuffer.dispose();\n        }\n        if (instancesPreviousBuffer) {\n          instancesPreviousBuffer.dispose();\n        }\n        instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\n        instanceStorage.instancesBuffer = instancesBuffer;\n        if (!this._userInstancedBuffersStorage) {\n          this._userInstancedBuffersStorage = {\n            data: {},\n            vertexBuffers: {},\n            strides: {},\n            sizes: {},\n            vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined\n          };\n        }\n        this._userInstancedBuffersStorage.vertexBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\n        if (this._scene.needsPreviousWorldMatrices) {\n          instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\n          instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\n        }\n        this._invalidateInstanceVertexArrayObject();\n      } else {\n        if (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) {\n          instancesBuffer.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n          if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\n            instancesPreviousBuffer.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\n          }\n        }\n      }\n      this._processInstancedBuffers(visibleInstances, renderSelf);\n      // Stats\n      this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n      // Draw\n      if (engine._currentDrawContext) {\n        engine._currentDrawContext.useInstancing = true;\n      }\n      this._bind(subMesh, effect, fillMode);\n      this._draw(subMesh, fillMode, instancesCount);\n      // Write current matrices as previous matrices in case of manual update\n      // Default behaviour when previous matrices are not specified explicitly\n      // Will break if instances number/order changes\n      if (this._scene.needsPreviousWorldMatrices && !needUpdateBuffer && this._instanceDataStorage.manualUpdate && (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) && !this._instanceDataStorage.previousManualUpdate) {\n        instancesPreviousBuffer.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n      }\n      engine.unbindInstanceAttributes();\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_renderWithThinInstances\",\n    value: function _renderWithThinInstances(subMesh, fillMode, effect, engine) {\n      var _a, _b;\n      // Stats\n      var instancesCount = (_b = (_a = this._thinInstanceDataStorage) === null || _a === void 0 ? void 0 : _a.instancesCount) !== null && _b !== void 0 ? _b : 0;\n      this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n      // Draw\n      if (engine._currentDrawContext) {\n        engine._currentDrawContext.useInstancing = true;\n      }\n      this._bind(subMesh, effect, fillMode);\n      this._draw(subMesh, fillMode, instancesCount);\n      // Write current matrices as previous matrices\n      // Default behaviour when previous matrices are not specified explicitly\n      // Will break if instances number/order changes\n      if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\n        if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\n          this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\n        } else {\n          this._thinInstanceDataStorage.previousMatrixBuffer.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\n        }\n      }\n      engine.unbindInstanceAttributes();\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"_processInstancedBuffers\",\n    value: function _processInstancedBuffers(visibleInstances, renderSelf) {\n      // Do nothing\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_processRendering\",\n    value: function _processRendering(renderingMesh, subMesh, effect, fillMode, batch, hardwareInstancedRendering, onBeforeDraw, effectiveMaterial) {\n      var scene = this.getScene();\n      var engine = scene.getEngine();\n      if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\n        this._renderWithThinInstances(subMesh, fillMode, effect, engine);\n        return this;\n      }\n      if (hardwareInstancedRendering) {\n        this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\n      } else {\n        if (engine._currentDrawContext) {\n          engine._currentDrawContext.useInstancing = false;\n        }\n        var instanceCount = 0;\n        if (batch.renderSelf[subMesh._id]) {\n          // Draw\n          if (onBeforeDraw) {\n            onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\n          }\n          instanceCount++;\n          this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\n        }\n        var visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\n        if (visibleInstancesForSubMesh) {\n          var visibleInstanceCount = visibleInstancesForSubMesh.length;\n          instanceCount += visibleInstanceCount;\n          // Stats\n          for (var instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\n            var instance = visibleInstancesForSubMesh[instanceIndex];\n            // World\n            var world = instance.getWorldMatrix();\n            if (onBeforeDraw) {\n              onBeforeDraw(true, world, effectiveMaterial);\n            }\n            // Draw\n            this._draw(subMesh, fillMode);\n          }\n        }\n        // Stats\n        scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_rebuild\",\n    value: function _rebuild() {\n      var dispose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this._instanceDataStorage.instancesBuffer) {\n        // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n        if (dispose) {\n          this._instanceDataStorage.instancesBuffer.dispose();\n        }\n        this._instanceDataStorage.instancesBuffer = null;\n      }\n      if (this._userInstancedBuffersStorage) {\n        for (var kind in this._userInstancedBuffersStorage.vertexBuffers) {\n          var buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\n          if (buffer) {\n            // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n            if (dispose) {\n              buffer.dispose();\n            }\n            this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\n          }\n        }\n        if (this._userInstancedBuffersStorage.vertexArrayObjects) {\n          this._userInstancedBuffersStorage.vertexArrayObjects = {};\n        }\n      }\n      this._internalMeshDataInfo._effectiveMaterial = null;\n      _get(_getPrototypeOf(Mesh.prototype), \"_rebuild\", this).call(this, dispose);\n    }\n    /** @internal */\n  }, {\n    key: \"_freeze\",\n    value: function _freeze() {\n      if (!this.subMeshes) {\n        return;\n      }\n      // Prepare batches\n      for (var index = 0; index < this.subMeshes.length; index++) {\n        this._getInstancesRenderList(index);\n      }\n      this._internalMeshDataInfo._effectiveMaterial = null;\n      this._instanceDataStorage.isFrozen = true;\n    }\n    /** @internal */\n  }, {\n    key: \"_unFreeze\",\n    value: function _unFreeze() {\n      this._instanceDataStorage.isFrozen = false;\n      this._instanceDataStorage.previousBatch = null;\n    }\n    /**\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\n     * @param subMesh defines the subMesh to render\n     * @param enableAlphaMode defines if alpha mode can be changed\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\n     * @returns the current mesh\n     */\n  }, {\n    key: \"render\",\n    value: function render(subMesh, enableAlphaMode, effectiveMeshReplacement) {\n      var _a, _b, _c;\n      var scene = this.getScene();\n      if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\n        this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n      } else {\n        this._internalAbstractMeshDataInfo._isActive = false;\n      }\n      if (this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\n        return this;\n      }\n      // Managing instances\n      var batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\n      if (batch.mustReturn) {\n        return this;\n      }\n      // Checking geometry state\n      if (!this._geometry || !this._geometry.getVertexBuffers() || !this._unIndexed && !this._geometry.getIndexBuffer()) {\n        return this;\n      }\n      var engine = scene.getEngine();\n      var oldCameraMaxZ = 0;\n      var oldCamera = null;\n      if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\n        oldCameraMaxZ = scene.activeCamera.maxZ;\n        oldCamera = scene.activeCamera;\n        scene.activeCamera.maxZ = 0;\n        scene.updateTransformMatrix(true);\n      }\n      if (this._internalMeshDataInfo._onBeforeRenderObservable) {\n        this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\n      }\n      var renderingMesh = subMesh.getRenderingMesh();\n      var hardwareInstancedRendering = batch.hardwareInstancedRendering[subMesh._id] || renderingMesh.hasThinInstances || !!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh;\n      var instanceDataStorage = this._instanceDataStorage;\n      var material = subMesh.getMaterial();\n      if (!material) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      // Material\n      if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\n        if (material._storeEffectOnSubMeshes) {\n          if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n            if (oldCamera) {\n              oldCamera.maxZ = oldCameraMaxZ;\n              scene.updateTransformMatrix(true);\n            }\n            return this;\n          }\n        } else if (!material.isReady(this, hardwareInstancedRendering)) {\n          if (oldCamera) {\n            oldCamera.maxZ = oldCameraMaxZ;\n            scene.updateTransformMatrix(true);\n          }\n          return this;\n        }\n        this._internalMeshDataInfo._effectiveMaterial = material;\n      } else if (material._storeEffectOnSubMeshes && !((_a = subMesh.effect) === null || _a === void 0 ? void 0 : _a._wasPreviouslyReady) || !material._storeEffectOnSubMeshes && !((_b = material.getEffect()) === null || _b === void 0 ? void 0 : _b._wasPreviouslyReady)) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      // Alpha mode\n      if (enableAlphaMode) {\n        engine.setAlphaMode(this._internalMeshDataInfo._effectiveMaterial.alphaMode);\n      }\n      var drawWrapper;\n      if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\n        drawWrapper = subMesh._drawWrapper;\n      } else {\n        drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\n      }\n      var effect = (_c = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.effect) !== null && _c !== void 0 ? _c : null;\n      var _iterator8 = _createForOfIteratorHelper(scene._beforeRenderingMeshStage),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var step = _step8.value;\n          step.action(this, subMesh, batch, effect);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      if (!drawWrapper || !effect) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      var effectiveMesh = effectiveMeshReplacement || this;\n      var sideOrientation;\n      if (!instanceDataStorage.isFrozen && (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling || this.overrideMaterialSideOrientation !== null)) {\n        var mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n        sideOrientation = this.overrideMaterialSideOrientation;\n        if (sideOrientation == null) {\n          sideOrientation = this._internalMeshDataInfo._effectiveMaterial.sideOrientation;\n        }\n        if (mainDeterminant < 0) {\n          sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n        }\n        instanceDataStorage.sideOrientation = sideOrientation;\n      } else {\n        sideOrientation = instanceDataStorage.sideOrientation;\n      }\n      var reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, sideOrientation);\n      if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\n        engine.setDepthWrite(true);\n      }\n      // Bind\n      var fillMode = scene.forcePointsCloud ? Material.PointFillMode : scene.forceWireframe ? Material.WireFrameFillMode : this._internalMeshDataInfo._effectiveMaterial.fillMode;\n      if (this._internalMeshDataInfo._onBeforeBindObservable) {\n        this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\n      }\n      if (!hardwareInstancedRendering) {\n        // Binding will be done later because we need to add more info to the VB\n        this._bind(subMesh, effect, fillMode);\n      }\n      var effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\n      var world = effectiveMesh.getWorldMatrix();\n      if (effectiveMaterial._storeEffectOnSubMeshes) {\n        effectiveMaterial.bindForSubMesh(world, this, subMesh);\n      } else {\n        effectiveMaterial.bind(world, this);\n      }\n      if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\n        engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n        engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n        if (this._internalMeshDataInfo._onBetweenPassObservable) {\n          this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\n        }\n      }\n      // Draw\n      this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n      // Unbind\n      this._internalMeshDataInfo._effectiveMaterial.unbind();\n      var _iterator9 = _createForOfIteratorHelper(scene._afterRenderingMeshStage),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step10 = _step9.value;\n          _step10.action(this, subMesh, batch, effect);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      if (this._internalMeshDataInfo._onAfterRenderObservable) {\n        this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\n      }\n      if (oldCamera) {\n        oldCamera.maxZ = oldCameraMaxZ;\n        scene.updateTransformMatrix(true);\n      }\n      if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\n        this._freeze();\n      }\n      return this;\n    }\n    /**\n     *   Renormalize the mesh and patch it up if there are no weights\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\n     *   However in the case of zero weights then we set just a single influence to 1.\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\n     */\n  }, {\n    key: \"cleanMatrixWeights\",\n    value: function cleanMatrixWeights() {\n      if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\n          this._normalizeSkinWeightsAndExtra();\n        } else {\n          this._normalizeSkinFourWeights();\n        }\n      }\n    }\n    // faster 4 weight version.\n  }, {\n    key: \"_normalizeSkinFourWeights\",\n    value: function _normalizeSkinFourWeights() {\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      var numWeights = matricesWeights.length;\n      for (var a = 0; a < numWeights; a += 4) {\n        // accumulate weights\n        var t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          matricesWeights[a] = 1;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          matricesWeights[a] *= recip;\n          matricesWeights[a + 1] *= recip;\n          matricesWeights[a + 2] *= recip;\n          matricesWeights[a + 3] *= recip;\n        }\n      }\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n    }\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\n  }, {\n    key: \"_normalizeSkinWeightsAndExtra\",\n    value: function _normalizeSkinWeightsAndExtra() {\n      var matricesWeightsExtra = this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      var numWeights = matricesWeights.length;\n      for (var a = 0; a < numWeights; a += 4) {\n        // accumulate weights\n        var t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n        t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          matricesWeights[a] = 1;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          matricesWeights[a] *= recip;\n          matricesWeights[a + 1] *= recip;\n          matricesWeights[a + 2] *= recip;\n          matricesWeights[a + 3] *= recip;\n          // same goes for extras\n          matricesWeightsExtra[a] *= recip;\n          matricesWeightsExtra[a + 1] *= recip;\n          matricesWeightsExtra[a + 2] *= recip;\n          matricesWeightsExtra[a + 3] *= recip;\n        }\n      }\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\n    }\n    /**\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\n     * the user know there was an issue with importing the mesh\n     * @returns a validation object with skinned, valid and report string\n     */\n  }, {\n    key: \"validateSkinning\",\n    value: function validateSkinning() {\n      var matricesWeightsExtra = this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      if (matricesWeights === null || this.skeleton == null) {\n        return {\n          skinned: false,\n          valid: true,\n          report: \"not skinned\"\n        };\n      }\n      var numWeights = matricesWeights.length;\n      var numberNotSorted = 0;\n      var missingWeights = 0;\n      var maxUsedWeights = 0;\n      var numberNotNormalized = 0;\n      var numInfluences = matricesWeightsExtra === null ? 4 : 8;\n      var usedWeightCounts = new Array();\n      for (var a = 0; a <= numInfluences; a++) {\n        usedWeightCounts[a] = 0;\n      }\n      var toleranceEpsilon = 0.001;\n      for (var _a2 = 0; _a2 < numWeights; _a2 += 4) {\n        var lastWeight = matricesWeights[_a2];\n        var t = lastWeight;\n        var usedWeights = t === 0 ? 0 : 1;\n        for (var b = 1; b < numInfluences; b++) {\n          var d = b < 4 ? matricesWeights[_a2 + b] : matricesWeightsExtra[_a2 + b - 4];\n          if (d > lastWeight) {\n            numberNotSorted++;\n          }\n          if (d !== 0) {\n            usedWeights++;\n          }\n          t += d;\n          lastWeight = d;\n        }\n        // count the buffer weights usage\n        usedWeightCounts[usedWeights]++;\n        // max influences\n        if (usedWeights > maxUsedWeights) {\n          maxUsedWeights = usedWeights;\n        }\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          missingWeights++;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          var tolerance = 0;\n          for (var _b2 = 0; _b2 < numInfluences; _b2++) {\n            if (_b2 < 4) {\n              tolerance += Math.abs(matricesWeights[_a2 + _b2] - matricesWeights[_a2 + _b2] * recip);\n            } else {\n              tolerance += Math.abs(matricesWeightsExtra[_a2 + _b2 - 4] - matricesWeightsExtra[_a2 + _b2 - 4] * recip);\n            }\n          }\n          // arbitrary epsilon value for dictating not normalized\n          if (tolerance > toleranceEpsilon) {\n            numberNotNormalized++;\n          }\n        }\n      }\n      // validate bone indices are in range of the skeleton\n      var numBones = this.skeleton.bones.length;\n      var matricesIndices = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n      var matricesIndicesExtra = this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\n      var numBadBoneIndices = 0;\n      for (var _a3 = 0; _a3 < numWeights; _a3 += 4) {\n        for (var _b3 = 0; _b3 < numInfluences; _b3++) {\n          var index = _b3 < 4 ? matricesIndices[_a3 + _b3] : matricesIndicesExtra[_a3 + _b3 - 4];\n          if (index >= numBones || index < 0) {\n            numBadBoneIndices++;\n          }\n        }\n      }\n      // log mesh stats\n      var output = \"Number of Weights = \" + numWeights / 4 + \"\\nMaximum influences = \" + maxUsedWeights + \"\\nMissing Weights = \" + missingWeights + \"\\nNot Sorted = \" + numberNotSorted + \"\\nNot Normalized = \" + numberNotNormalized + \"\\nWeightCounts = [\" + usedWeightCounts + \"]\" + \"\\nNumber of bones = \" + numBones + \"\\nBad Bone Indices = \" + numBadBoneIndices;\n      return {\n        skinned: true,\n        valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0,\n        report: output\n      };\n    }\n    /** @internal */\n  }, {\n    key: \"_checkDelayState\",\n    value: function _checkDelayState() {\n      var scene = this.getScene();\n      if (this._geometry) {\n        this._geometry.load(scene);\n      } else if (this.delayLoadState === 4) {\n        this.delayLoadState = 2;\n        this._queueLoad(scene);\n      }\n      return this;\n    }\n  }, {\n    key: \"_queueLoad\",\n    value: function _queueLoad(scene) {\n      var _this2 = this;\n      scene.addPendingData(this);\n      var getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\n      Tools.LoadFile(this.delayLoadingFile, function (data) {\n        if (data instanceof ArrayBuffer) {\n          _this2._delayLoadingFunction(data, _this2);\n        } else {\n          _this2._delayLoadingFunction(JSON.parse(data), _this2);\n        }\n        _this2.instances.forEach(function (instance) {\n          instance.refreshBoundingInfo();\n          instance._syncSubMeshes();\n        });\n        _this2.delayLoadState = 1;\n        scene.removePendingData(_this2);\n      }, function () {}, scene.offlineProvider, getBinaryData);\n      return this;\n    }\n    /**\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\n     * A mesh is in the frustum if its bounding box intersects the frustum\n     * @param frustumPlanes defines the frustum to test\n     * @returns true if the mesh is in the frustum planes\n     */\n  }, {\n    key: \"isInFrustum\",\n    value: function isInFrustum(frustumPlanes) {\n      if (this.delayLoadState === 2) {\n        return false;\n      }\n      if (!_get(_getPrototypeOf(Mesh.prototype), \"isInFrustum\", this).call(this, frustumPlanes)) {\n        return false;\n      }\n      this._checkDelayState();\n      return true;\n    }\n    /**\n     * Sets the mesh material by the material or multiMaterial `id` property\n     * @param id is a string identifying the material or the multiMaterial\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setMaterialById\",\n    value: function setMaterialById(id) {\n      var materials = this.getScene().materials;\n      var index;\n      for (index = materials.length - 1; index > -1; index--) {\n        if (materials[index].id === id) {\n          this.material = materials[index];\n          return this;\n        }\n      }\n      // Multi\n      var multiMaterials = this.getScene().multiMaterials;\n      for (index = multiMaterials.length - 1; index > -1; index--) {\n        if (multiMaterials[index].id === id) {\n          this.material = multiMaterials[index];\n          return this;\n        }\n      }\n      return this;\n    }\n    /**\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\n     * @returns an array of IAnimatable\n     */\n  }, {\n    key: \"getAnimatables\",\n    value: function getAnimatables() {\n      var results = new Array();\n      if (this.material) {\n        results.push(this.material);\n      }\n      if (this.skeleton) {\n        results.push(this.skeleton);\n      }\n      return results;\n    }\n    /**\n     * Modifies the mesh geometry according to the passed transformation matrix.\n     * This method returns nothing, but it really modifies the mesh even if it's originally not set as updatable.\n     * The mesh normals are modified using the same transformation.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @param transform defines the transform matrix to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\n     * @returns the current mesh\n     */\n  }, {\n    key: \"bakeTransformIntoVertices\",\n    value: function bakeTransformIntoVertices(transform) {\n      // Position\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n        return this;\n      }\n      var submeshes = this.subMeshes.splice(0);\n      this._resetPointsArrayCache();\n      var data = this.getVerticesData(VertexBuffer.PositionKind);\n      var temp = Vector3.Zero();\n      var index;\n      for (index = 0; index < data.length; index += 3) {\n        Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).toArray(data, index);\n      }\n      this.setVerticesData(VertexBuffer.PositionKind, data, this.getVertexBuffer(VertexBuffer.PositionKind).isUpdatable());\n      // Normals\n      if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n        data = this.getVerticesData(VertexBuffer.NormalKind);\n        for (index = 0; index < data.length; index += 3) {\n          Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).normalize().toArray(data, index);\n        }\n        this.setVerticesData(VertexBuffer.NormalKind, data, this.getVertexBuffer(VertexBuffer.NormalKind).isUpdatable());\n      }\n      // flip faces?\n      if (transform.determinant() < 0) {\n        this.flipFaces();\n      }\n      // Restore submeshes\n      this.releaseSubMeshes();\n      this.subMeshes = submeshes;\n      return this;\n    }\n    /**\n     * Modifies the mesh geometry according to its own current World Matrix.\n     * The mesh World Matrix is then reset.\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\n     * @param bakeIndependentlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\n     * @returns the current mesh\n     */\n  }, {\n    key: \"bakeCurrentTransformIntoVertices\",\n    value: function bakeCurrentTransformIntoVertices() {\n      var bakeIndependentlyOfChildren = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\n      this.resetLocalMatrix(bakeIndependentlyOfChildren);\n      return this;\n    }\n    // Cache\n    /** @internal */\n  }, {\n    key: \"_positions\",\n    get: function get() {\n      if (this._internalAbstractMeshDataInfo._positions) {\n        return this._internalAbstractMeshDataInfo._positions;\n      }\n      if (this._geometry) {\n        return this._geometry._positions;\n      }\n      return null;\n    }\n    /** @internal */\n  }, {\n    key: \"_resetPointsArrayCache\",\n    value: function _resetPointsArrayCache() {\n      if (this._geometry) {\n        this._geometry._resetPointsArrayCache();\n      }\n      return this;\n    }\n    /** @internal */\n  }, {\n    key: \"_generatePointsArray\",\n    value: function _generatePointsArray() {\n      if (this._geometry) {\n        return this._geometry._generatePointsArray();\n      }\n      return false;\n    }\n    /**\n     * Returns a new Mesh object generated from the current mesh properties.\n     * This method must not get confused with createInstance()\n     * @param name is a string, the name given to the new mesh\n     * @param newParent can be any Node object (default `null`)\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\n     * @returns a new mesh\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var newParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var doNotCloneChildren = arguments.length > 2 ? arguments[2] : undefined;\n      var clonePhysicsImpostor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return new Mesh(name, this.getScene(), newParent, this, doNotCloneChildren, clonePhysicsImpostor);\n    }\n    /**\n     * Releases resources associated with this mesh.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose(doNotRecurse) {\n      var disposeMaterialAndTextures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.morphTargetManager = null;\n      if (this._geometry) {\n        this._geometry.releaseForMesh(this, true);\n      }\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (internalDataInfo._onBeforeDrawObservable) {\n        internalDataInfo._onBeforeDrawObservable.clear();\n      }\n      if (internalDataInfo._onBeforeBindObservable) {\n        internalDataInfo._onBeforeBindObservable.clear();\n      }\n      if (internalDataInfo._onBeforeRenderObservable) {\n        internalDataInfo._onBeforeRenderObservable.clear();\n      }\n      if (internalDataInfo._onAfterRenderObservable) {\n        internalDataInfo._onAfterRenderObservable.clear();\n      }\n      if (internalDataInfo._onBetweenPassObservable) {\n        internalDataInfo._onBetweenPassObservable.clear();\n      }\n      // Sources\n      if (this._scene.useClonedMeshMap) {\n        if (internalDataInfo.meshMap) {\n          for (var uniqueId in internalDataInfo.meshMap) {\n            var mesh = internalDataInfo.meshMap[uniqueId];\n            if (mesh) {\n              mesh._internalMeshDataInfo._source = null;\n              internalDataInfo.meshMap[uniqueId] = undefined;\n            }\n          }\n        }\n        if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\n          internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\n        }\n      } else {\n        var meshes = this.getScene().meshes;\n        var _iterator10 = _createForOfIteratorHelper(meshes),\n          _step11;\n        try {\n          for (_iterator10.s(); !(_step11 = _iterator10.n()).done;) {\n            var abstractMesh = _step11.value;\n            var _mesh = abstractMesh;\n            if (_mesh._internalMeshDataInfo && _mesh._internalMeshDataInfo._source && _mesh._internalMeshDataInfo._source === this) {\n              _mesh._internalMeshDataInfo._source = null;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n      internalDataInfo._source = null;\n      // Instances\n      this._disposeInstanceSpecificData();\n      // Thin instances\n      this._disposeThinInstanceSpecificData();\n      if (this._internalMeshDataInfo._checkReadinessObserver) {\n        this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\n      }\n      _get(_getPrototypeOf(Mesh.prototype), \"dispose\", this).call(this, doNotRecurse, disposeMaterialAndTextures);\n    }\n    /** @internal */\n  }, {\n    key: \"_disposeInstanceSpecificData\",\n    value: function _disposeInstanceSpecificData() {\n      // Do nothing\n    }\n    /** @internal */\n  }, {\n    key: \"_disposeThinInstanceSpecificData\",\n    value: function _disposeThinInstanceSpecificData() {\n      // Do nothing\n    }\n    /** @internal */\n  }, {\n    key: \"_invalidateInstanceVertexArrayObject\",\n    value: function _invalidateInstanceVertexArrayObject() {\n      // Do nothing\n    }\n    /**\n     * Modifies the mesh geometry according to a displacement map.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param url is a string, the URL from the image file is to be downloaded.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n  }, {\n    key: \"applyDisplacementMap\",\n    value: function applyDisplacementMap(url, minHeight, maxHeight, onSuccess, uvOffset, uvScale) {\n      var _this3 = this;\n      var forceUpdate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var scene = this.getScene();\n      var onload = function onload(img) {\n        // Getting height map data\n        var heightMapWidth = img.width;\n        var heightMapHeight = img.height;\n        var canvas = _this3.getEngine().createCanvas(heightMapWidth, heightMapHeight);\n        var context = canvas.getContext(\"2d\");\n        context.drawImage(img, 0, 0);\n        // Create VertexData from map data\n        //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n        var buffer = context.getImageData(0, 0, heightMapWidth, heightMapHeight).data;\n        _this3.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\n        //execute success callback, if set\n        if (onSuccess) {\n          onSuccess(_this3);\n        }\n      };\n      Tools.LoadImage(url, onload, function () {}, scene.offlineProvider);\n      return this;\n    }\n    /**\n     * Modifies the mesh geometry according to a displacementMap buffer.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\n     * @param heightMapWidth is the width of the buffer image.\n     * @param heightMapHeight is the height of the buffer image.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n  }, {\n    key: \"applyDisplacementMapFromBuffer\",\n    value: function applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale) {\n      var forceUpdate = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\n        Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\n        return this;\n      }\n      var positions = this.getVerticesData(VertexBuffer.PositionKind, true, true);\n      var normals = this.getVerticesData(VertexBuffer.NormalKind);\n      var uvs = this.getVerticesData(VertexBuffer.UVKind);\n      var position = Vector3.Zero();\n      var normal = Vector3.Zero();\n      var uv = Vector2.Zero();\n      uvOffset = uvOffset || Vector2.Zero();\n      uvScale = uvScale || new Vector2(1, 1);\n      for (var index = 0; index < positions.length; index += 3) {\n        Vector3.FromArrayToRef(positions, index, position);\n        Vector3.FromArrayToRef(normals, index, normal);\n        Vector2.FromArrayToRef(uvs, index / 3 * 2, uv);\n        // Compute height\n        var u = Math.abs(uv.x * uvScale.x + uvOffset.x % 1) * (heightMapWidth - 1) % heightMapWidth | 0;\n        var v = Math.abs(uv.y * uvScale.y + uvOffset.y % 1) * (heightMapHeight - 1) % heightMapHeight | 0;\n        var pos = (u + v * heightMapWidth) * 4;\n        var r = buffer[pos] / 255.0;\n        var g = buffer[pos + 1] / 255.0;\n        var b = buffer[pos + 2] / 255.0;\n        var gradient = r * 0.3 + g * 0.59 + b * 0.11;\n        normal.normalize();\n        normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\n        position = position.add(normal);\n        position.toArray(positions, index);\n      }\n      VertexData.ComputeNormals(positions, this.getIndices(), normals);\n      if (forceUpdate) {\n        this.setVerticesData(VertexBuffer.PositionKind, positions);\n        this.setVerticesData(VertexBuffer.NormalKind, normals);\n        this.setVerticesData(VertexBuffer.UVKind, uvs);\n      } else {\n        this.updateVerticesData(VertexBuffer.PositionKind, positions);\n        this.updateVerticesData(VertexBuffer.NormalKind, normals);\n      }\n      return this;\n    }\n    /**\n     * Modify the mesh to get a flat shading rendering.\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n  }, {\n    key: \"convertToFlatShadedMesh\",\n    value: function convertToFlatShadedMesh() {\n      var kinds = this.getVerticesDataKinds();\n      var vbs = {};\n      var data = {};\n      var newdata = {};\n      var updatableNormals = false;\n      var kindIndex;\n      var kind;\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        var vertexBuffer = this.getVertexBuffer(kind);\n        // Check data consistency\n        var vertexData = vertexBuffer.getData();\n        if (vertexData instanceof Array || vertexData instanceof Float32Array) {\n          if (vertexData.length === 0) {\n            continue;\n          }\n        }\n        if (kind === VertexBuffer.NormalKind) {\n          updatableNormals = vertexBuffer.isUpdatable();\n          kinds.splice(kindIndex, 1);\n          kindIndex--;\n          continue;\n        }\n        vbs[kind] = vertexBuffer;\n        data[kind] = this.getVerticesData(kind);\n        newdata[kind] = [];\n      }\n      // Save previous submeshes\n      var previousSubmeshes = this.subMeshes.slice(0);\n      var indices = this.getIndices();\n      var totalIndices = this.getTotalIndices();\n      // Generating unique vertices per face\n      var index;\n      for (index = 0; index < totalIndices; index++) {\n        var vertexIndex = indices[index];\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n          kind = kinds[kindIndex];\n          if (!vbs[kind]) {\n            continue;\n          }\n          var stride = vbs[kind].getStrideSize();\n          for (var offset = 0; offset < stride; offset++) {\n            newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n          }\n        }\n      }\n      // Updating faces & normal\n      var normals = [];\n      var positions = newdata[VertexBuffer.PositionKind];\n      var useRightHandedSystem = this.getScene().useRightHandedSystem;\n      var flipNormalGeneration;\n      if (useRightHandedSystem) {\n        flipNormalGeneration = this.overrideMaterialSideOrientation === 1;\n      } else {\n        flipNormalGeneration = this.overrideMaterialSideOrientation === 0;\n      }\n      for (index = 0; index < totalIndices; index += 3) {\n        indices[index] = index;\n        indices[index + 1] = index + 1;\n        indices[index + 2] = index + 2;\n        var p1 = Vector3.FromArray(positions, index * 3);\n        var p2 = Vector3.FromArray(positions, (index + 1) * 3);\n        var p3 = Vector3.FromArray(positions, (index + 2) * 3);\n        var p1p2 = p1.subtract(p2);\n        var p3p2 = p3.subtract(p2);\n        var normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\n        if (flipNormalGeneration) {\n          normal.scaleInPlace(-1);\n        }\n        // Store same normals for every vertex\n        for (var localIndex = 0; localIndex < 3; localIndex++) {\n          normals.push(normal.x);\n          normals.push(normal.y);\n          normals.push(normal.z);\n        }\n      }\n      this.setIndices(indices);\n      this.setVerticesData(VertexBuffer.NormalKind, normals, updatableNormals);\n      // Updating vertex buffers\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        if (!newdata[kind]) {\n          continue;\n        }\n        this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable());\n      }\n      // Updating submeshes\n      this.releaseSubMeshes();\n      for (var submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n        var previousOne = previousSubmeshes[submeshIndex];\n        SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n      }\n      this.synchronizeInstances();\n      return this;\n    }\n    /**\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\n     * In other words, more vertices, no more indices and a single bigger VBO.\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n  }, {\n    key: \"convertToUnIndexedMesh\",\n    value: function convertToUnIndexedMesh() {\n      var kinds = this.getVerticesDataKinds();\n      var vbs = {};\n      var data = {};\n      var newdata = {};\n      var kindIndex;\n      var kind;\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        var vertexBuffer = this.getVertexBuffer(kind);\n        vbs[kind] = vertexBuffer;\n        data[kind] = vbs[kind].getData();\n        newdata[kind] = [];\n      }\n      // Save previous submeshes\n      var previousSubmeshes = this.subMeshes.slice(0);\n      var indices = this.getIndices();\n      var totalIndices = this.getTotalIndices();\n      // Generating unique vertices per face\n      var index;\n      for (index = 0; index < totalIndices; index++) {\n        var vertexIndex = indices[index];\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n          kind = kinds[kindIndex];\n          var stride = vbs[kind].getStrideSize();\n          for (var offset = 0; offset < stride; offset++) {\n            newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n          }\n        }\n      }\n      // Updating indices\n      for (index = 0; index < totalIndices; index += 3) {\n        indices[index] = index;\n        indices[index + 1] = index + 1;\n        indices[index + 2] = index + 2;\n      }\n      this.setIndices(indices);\n      // Updating vertex buffers\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable(), vbs[kind].getStrideSize());\n      }\n      // Updating submeshes\n      this.releaseSubMeshes();\n      for (var submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n        var previousOne = previousSubmeshes[submeshIndex];\n        SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n      }\n      this._unIndexed = true;\n      this.synchronizeInstances();\n      return this;\n    }\n    /**\n     * Inverses facet orientations.\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param flipNormals will also inverts the normals\n     * @returns current mesh\n     */\n  }, {\n    key: \"flipFaces\",\n    value: function flipFaces() {\n      var flipNormals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var i;\n      if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertex_data.normals) {\n        for (i = 0; i < vertex_data.normals.length; i++) {\n          vertex_data.normals[i] *= -1;\n        }\n      }\n      if (vertex_data.indices) {\n        var temp;\n        for (i = 0; i < vertex_data.indices.length; i += 3) {\n          // reassign indices\n          temp = vertex_data.indices[i + 1];\n          vertex_data.indices[i + 1] = vertex_data.indices[i + 2];\n          vertex_data.indices[i + 2] = temp;\n        }\n      }\n      vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      return this;\n    }\n    /**\n     * Increase the number of facets and hence vertices in a mesh\n     * Vertex normals are interpolated from existing vertex normals\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\n     */\n  }, {\n    key: \"increaseVertices\",\n    value: function increaseVertices() {\n      var numberPerEdge = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var currentIndices = vertex_data.indices && !Array.isArray(vertex_data.indices) && Array.from ? Array.from(vertex_data.indices) : vertex_data.indices;\n      var positions = vertex_data.positions && !Array.isArray(vertex_data.positions) && Array.from ? Array.from(vertex_data.positions) : vertex_data.positions;\n      var uvs = vertex_data.uvs && !Array.isArray(vertex_data.uvs) && Array.from ? Array.from(vertex_data.uvs) : vertex_data.uvs;\n      var normals = vertex_data.normals && !Array.isArray(vertex_data.normals) && Array.from ? Array.from(vertex_data.normals) : vertex_data.normals;\n      if (!currentIndices || !positions) {\n        Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\n      } else {\n        vertex_data.indices = currentIndices;\n        vertex_data.positions = positions;\n        if (uvs) {\n          vertex_data.uvs = uvs;\n        }\n        if (normals) {\n          vertex_data.normals = normals;\n        }\n        var segments = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\n        var tempIndices = new Array();\n        for (var i = 0; i < segments + 1; i++) {\n          tempIndices[i] = new Array();\n        }\n        var a; //vertex index of one end of a side\n        var b; //vertex index of other end of the side\n        var deltaPosition = new Vector3(0, 0, 0);\n        var deltaNormal = new Vector3(0, 0, 0);\n        var deltaUV = new Vector2(0, 0);\n        var indices = new Array();\n        var vertexIndex = new Array();\n        var side = new Array();\n        var len;\n        var positionPtr = positions.length;\n        var uvPtr;\n        if (uvs) {\n          uvPtr = uvs.length;\n        }\n        var normalsPtr;\n        if (normals) {\n          normalsPtr = normals.length;\n        }\n        for (var _i = 0; _i < currentIndices.length; _i += 3) {\n          vertexIndex[0] = currentIndices[_i];\n          vertexIndex[1] = currentIndices[_i + 1];\n          vertexIndex[2] = currentIndices[_i + 2];\n          for (var j = 0; j < 3; j++) {\n            a = vertexIndex[j];\n            b = vertexIndex[(j + 1) % 3];\n            if (side[a] === undefined && side[b] === undefined) {\n              side[a] = new Array();\n              side[b] = new Array();\n            } else {\n              if (side[a] === undefined) {\n                side[a] = new Array();\n              }\n              if (side[b] === undefined) {\n                side[b] = new Array();\n              }\n            }\n            if (side[a][b] === undefined && side[b][a] === undefined) {\n              side[a][b] = [];\n              deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\n              deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\n              deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\n              if (normals) {\n                deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\n                deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\n                deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\n              }\n              if (uvs) {\n                deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\n                deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\n              }\n              side[a][b].push(a);\n              for (var k = 1; k < segments; k++) {\n                side[a][b].push(positions.length / 3);\n                positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\n                positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\n                positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\n                if (normals) {\n                  normals[normalsPtr++] = normals[3 * a] + k * deltaNormal.x;\n                  normals[normalsPtr++] = normals[3 * a + 1] + k * deltaNormal.y;\n                  normals[normalsPtr++] = normals[3 * a + 2] + k * deltaNormal.z;\n                }\n                if (uvs) {\n                  uvs[uvPtr++] = uvs[2 * a] + k * deltaUV.x;\n                  uvs[uvPtr++] = uvs[2 * a + 1] + k * deltaUV.y;\n                }\n              }\n              side[a][b].push(b);\n              side[b][a] = new Array();\n              len = side[a][b].length;\n              for (var idx = 0; idx < len; idx++) {\n                side[b][a][idx] = side[a][b][len - 1 - idx];\n              }\n            }\n          }\n          //Calculate positions, normals and uvs of new internal vertices\n          tempIndices[0][0] = currentIndices[_i];\n          tempIndices[1][0] = side[currentIndices[_i]][currentIndices[_i + 1]][1];\n          tempIndices[1][1] = side[currentIndices[_i]][currentIndices[_i + 2]][1];\n          for (var _k = 2; _k < segments; _k++) {\n            tempIndices[_k][0] = side[currentIndices[_i]][currentIndices[_i + 1]][_k];\n            tempIndices[_k][_k] = side[currentIndices[_i]][currentIndices[_i + 2]][_k];\n            deltaPosition.x = (positions[3 * tempIndices[_k][_k]] - positions[3 * tempIndices[_k][0]]) / _k;\n            deltaPosition.y = (positions[3 * tempIndices[_k][_k] + 1] - positions[3 * tempIndices[_k][0] + 1]) / _k;\n            deltaPosition.z = (positions[3 * tempIndices[_k][_k] + 2] - positions[3 * tempIndices[_k][0] + 2]) / _k;\n            if (normals) {\n              deltaNormal.x = (normals[3 * tempIndices[_k][_k]] - normals[3 * tempIndices[_k][0]]) / _k;\n              deltaNormal.y = (normals[3 * tempIndices[_k][_k] + 1] - normals[3 * tempIndices[_k][0] + 1]) / _k;\n              deltaNormal.z = (normals[3 * tempIndices[_k][_k] + 2] - normals[3 * tempIndices[_k][0] + 2]) / _k;\n            }\n            if (uvs) {\n              deltaUV.x = (uvs[2 * tempIndices[_k][_k]] - uvs[2 * tempIndices[_k][0]]) / _k;\n              deltaUV.y = (uvs[2 * tempIndices[_k][_k] + 1] - uvs[2 * tempIndices[_k][0] + 1]) / _k;\n            }\n            for (var _j = 1; _j < _k; _j++) {\n              tempIndices[_k][_j] = positions.length / 3;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0]] + _j * deltaPosition.x;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0] + 1] + _j * deltaPosition.y;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0] + 2] + _j * deltaPosition.z;\n              if (normals) {\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0]] + _j * deltaNormal.x;\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0] + 1] + _j * deltaNormal.y;\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0] + 2] + _j * deltaNormal.z;\n              }\n              if (uvs) {\n                uvs[uvPtr++] = uvs[2 * tempIndices[_k][0]] + _j * deltaUV.x;\n                uvs[uvPtr++] = uvs[2 * tempIndices[_k][0] + 1] + _j * deltaUV.y;\n              }\n            }\n          }\n          tempIndices[segments] = side[currentIndices[_i + 1]][currentIndices[_i + 2]];\n          // reform indices\n          indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\n          for (var _k2 = 1; _k2 < segments; _k2++) {\n            var _j2 = void 0;\n            for (_j2 = 0; _j2 < _k2; _j2++) {\n              indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2], tempIndices[_k2 + 1][_j2 + 1]);\n              indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2 + 1], tempIndices[_k2][_j2 + 1]);\n            }\n            indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2], tempIndices[_k2 + 1][_j2 + 1]);\n          }\n        }\n        vertex_data.indices = indices;\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      }\n    }\n    /**\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\n     * This will undo any application of covertToFlatShadedMesh\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     */\n  }, {\n    key: \"forceSharedVertices\",\n    value: function forceSharedVertices() {\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var currentUVs = vertex_data.uvs;\n      var currentIndices = vertex_data.indices;\n      var currentPositions = vertex_data.positions;\n      var currentColors = vertex_data.colors;\n      var currentMatrixIndices = vertex_data.matricesIndices;\n      var currentMatrixWeights = vertex_data.matricesWeights;\n      var currentMatrixIndicesExtra = vertex_data.matricesIndicesExtra;\n      var currentMatrixWeightsExtra = vertex_data.matricesWeightsExtra;\n      if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\n        Logger.Warn(\"VertexData contains empty entries\");\n      } else {\n        var positions = new Array();\n        var indices = new Array();\n        var uvs = new Array();\n        var colors = new Array();\n        var matrixIndices = new Array();\n        var matrixWeights = new Array();\n        var matrixIndicesExtra = new Array();\n        var matrixWeightsExtra = new Array();\n        var pstring = new Array(); //lists facet vertex positions (a,b,c) as string \"a|b|c\"\n        var indexPtr = 0; // pointer to next available index value\n        var uniquePositions = {}; // unique vertex positions\n        var ptr; // pointer to element in uniquePositions\n        var facet;\n        for (var i = 0; i < currentIndices.length; i += 3) {\n          facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\n          pstring = new Array();\n          for (var j = 0; j < 3; j++) {\n            pstring[j] = \"\";\n            for (var k = 0; k < 3; k++) {\n              //small values make 0\n              if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\n                currentPositions[3 * facet[j] + k] = 0;\n              }\n              pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\n            }\n          }\n          //check facet vertices to see that none are repeated\n          // do not process any facet that has a repeated vertex, ie is a line\n          if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\n            //for each facet position check if already listed in uniquePositions\n            // if not listed add to uniquePositions and set index pointer\n            // if listed use its index in uniquePositions and new index pointer\n            for (var _j3 = 0; _j3 < 3; _j3++) {\n              ptr = uniquePositions[pstring[_j3]];\n              if (ptr === undefined) {\n                uniquePositions[pstring[_j3]] = indexPtr;\n                ptr = indexPtr++;\n                //not listed so add individual x, y, z coordinates to positions\n                for (var _k3 = 0; _k3 < 3; _k3++) {\n                  positions.push(currentPositions[3 * facet[_j3] + _k3]);\n                }\n                if (currentColors !== null && currentColors !== void 0) {\n                  for (var _k4 = 0; _k4 < 4; _k4++) {\n                    colors.push(currentColors[4 * facet[_j3] + _k4]);\n                  }\n                }\n                if (currentUVs !== null && currentUVs !== void 0) {\n                  for (var _k5 = 0; _k5 < 2; _k5++) {\n                    uvs.push(currentUVs[2 * facet[_j3] + _k5]);\n                  }\n                }\n                if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n                  for (var _k6 = 0; _k6 < 4; _k6++) {\n                    matrixIndices.push(currentMatrixIndices[4 * facet[_j3] + _k6]);\n                  }\n                }\n                if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                  for (var _k7 = 0; _k7 < 4; _k7++) {\n                    matrixWeights.push(currentMatrixWeights[4 * facet[_j3] + _k7]);\n                  }\n                }\n                if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n                  for (var _k8 = 0; _k8 < 4; _k8++) {\n                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[_j3] + _k8]);\n                  }\n                }\n                if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\n                  for (var _k9 = 0; _k9 < 4; _k9++) {\n                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[_j3] + _k9]);\n                  }\n                }\n              }\n              // add new index pointer to indices array\n              indices.push(ptr);\n            }\n          }\n        }\n        var normals = new Array();\n        VertexData.ComputeNormals(positions, indices, normals);\n        //create new vertex data object and update\n        vertex_data.positions = positions;\n        vertex_data.indices = indices;\n        vertex_data.normals = normals;\n        if (currentUVs !== null && currentUVs !== void 0) {\n          vertex_data.uvs = uvs;\n        }\n        if (currentColors !== null && currentColors !== void 0) {\n          vertex_data.colors = colors;\n        }\n        if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n          vertex_data.matricesIndices = matrixIndices;\n        }\n        if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n          vertex_data.matricesWeights = matrixWeights;\n        }\n        if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n          vertex_data.matricesIndicesExtra = matrixIndicesExtra;\n        }\n        if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n          vertex_data.matricesWeightsExtra = matrixWeightsExtra;\n        }\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      }\n    }\n    // Instances\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\n  }, {\n    key: \"createInstance\",\n    value:\n    /**\n     * Creates a new InstancedMesh object from the mesh model.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n     * @param name defines the name of the new instance\n     * @returns a new InstancedMesh\n     */\n    function createInstance(name) {\n      return Mesh._instancedMeshFactory(name, this);\n    }\n    /**\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"synchronizeInstances\",\n    value: function synchronizeInstances() {\n      for (var instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\n        var instance = this.instances[instanceIndex];\n        instance._syncSubMeshes();\n      }\n      return this;\n    }\n    /**\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\n     * This should be used together with the simplification to avoid disappearing triangles.\n     * @param successCallback an optional success callback to be called after the optimization finished.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"optimizeIndices\",\n    value: function optimizeIndices(successCallback) {\n      var _this4 = this;\n      var indices = this.getIndices();\n      var positions = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positions || !indices) {\n        return this;\n      }\n      var vectorPositions = new Array();\n      for (var pos = 0; pos < positions.length; pos = pos + 3) {\n        vectorPositions.push(Vector3.FromArray(positions, pos));\n      }\n      var dupes = new Array();\n      AsyncLoop.SyncAsyncForLoop(vectorPositions.length, 40, function (iteration) {\n        var realPos = vectorPositions.length - 1 - iteration;\n        var testedPosition = vectorPositions[realPos];\n        for (var j = 0; j < realPos; ++j) {\n          var againstPosition = vectorPositions[j];\n          if (testedPosition.equals(againstPosition)) {\n            dupes[realPos] = j;\n            break;\n          }\n        }\n      }, function () {\n        for (var i = 0; i < indices.length; ++i) {\n          indices[i] = dupes[indices[i]] || indices[i];\n        }\n        //indices are now reordered\n        var originalSubMeshes = _this4.subMeshes.slice(0);\n        _this4.setIndices(indices);\n        _this4.subMeshes = originalSubMeshes;\n        if (successCallback) {\n          successCallback(_this4);\n        }\n      });\n      return this;\n    }\n    /**\n     * Serialize current mesh\n     * @param serializationObject defines the object which will receive the serialization data\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var serializationObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      serializationObject.name = this.name;\n      serializationObject.id = this.id;\n      serializationObject.uniqueId = this.uniqueId;\n      serializationObject.type = this.getClassName();\n      if (Tags && Tags.HasTags(this)) {\n        serializationObject.tags = Tags.GetTags(this);\n      }\n      serializationObject.position = this.position.asArray();\n      if (this.rotationQuaternion) {\n        serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\n      } else if (this.rotation) {\n        serializationObject.rotation = this.rotation.asArray();\n      }\n      serializationObject.scaling = this.scaling.asArray();\n      if (this._postMultiplyPivotMatrix) {\n        serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\n      } else {\n        serializationObject.localMatrix = this.getPivotMatrix().asArray();\n      }\n      serializationObject.isEnabled = this.isEnabled(false);\n      serializationObject.isVisible = this.isVisible;\n      serializationObject.infiniteDistance = this.infiniteDistance;\n      serializationObject.pickable = this.isPickable;\n      serializationObject.receiveShadows = this.receiveShadows;\n      serializationObject.billboardMode = this.billboardMode;\n      serializationObject.visibility = this.visibility;\n      serializationObject.checkCollisions = this.checkCollisions;\n      serializationObject.isBlocker = this.isBlocker;\n      serializationObject.overrideMaterialSideOrientation = this.overrideMaterialSideOrientation;\n      // Parent\n      if (this.parent) {\n        this.parent._serializeAsParent(serializationObject);\n      }\n      // Geometry\n      serializationObject.isUnIndexed = this.isUnIndexed;\n      var geometry = this._geometry;\n      if (geometry && this.subMeshes) {\n        serializationObject.geometryUniqueId = geometry.uniqueId;\n        serializationObject.geometryId = geometry.id;\n        // SubMeshes\n        serializationObject.subMeshes = [];\n        for (var subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\n          var subMesh = this.subMeshes[subIndex];\n          serializationObject.subMeshes.push({\n            materialIndex: subMesh.materialIndex,\n            verticesStart: subMesh.verticesStart,\n            verticesCount: subMesh.verticesCount,\n            indexStart: subMesh.indexStart,\n            indexCount: subMesh.indexCount\n          });\n        }\n      }\n      // Material\n      if (this.material) {\n        if (!this.material.doNotSerialize) {\n          serializationObject.materialUniqueId = this.material.uniqueId;\n          serializationObject.materialId = this.material.id; // back compat\n        }\n      } else {\n        this.material = null;\n        serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\n        serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\n      }\n      // Morph targets\n      if (this.morphTargetManager) {\n        serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\n      }\n      // Skeleton\n      if (this.skeleton) {\n        serializationObject.skeletonId = this.skeleton.id;\n        serializationObject.numBoneInfluencers = this.numBoneInfluencers;\n      }\n      // Physics\n      //TODO implement correct serialization for physics impostors.\n      if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n        var impostor = this.getPhysicsImpostor();\n        if (impostor) {\n          serializationObject.physicsMass = impostor.getParam(\"mass\");\n          serializationObject.physicsFriction = impostor.getParam(\"friction\");\n          serializationObject.physicsRestitution = impostor.getParam(\"mass\");\n          serializationObject.physicsImpostor = impostor.type;\n        }\n      }\n      // Metadata\n      if (this.metadata) {\n        serializationObject.metadata = this.metadata;\n      }\n      // Instances\n      serializationObject.instances = [];\n      for (var index = 0; index < this.instances.length; index++) {\n        var instance = this.instances[index];\n        if (instance.doNotSerialize) {\n          continue;\n        }\n        var serializationInstance = {\n          name: instance.name,\n          id: instance.id,\n          isEnabled: instance.isEnabled(false),\n          isVisible: instance.isVisible,\n          isPickable: instance.isPickable,\n          checkCollisions: instance.checkCollisions,\n          position: instance.position.asArray(),\n          scaling: instance.scaling.asArray()\n        };\n        if (instance.parent) {\n          instance.parent._serializeAsParent(serializationInstance);\n        }\n        if (instance.rotationQuaternion) {\n          serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\n        } else if (instance.rotation) {\n          serializationInstance.rotation = instance.rotation.asArray();\n        }\n        // Physics\n        //TODO implement correct serialization for physics impostors.\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n          var _impostor = instance.getPhysicsImpostor();\n          if (_impostor) {\n            serializationInstance.physicsMass = _impostor.getParam(\"mass\");\n            serializationInstance.physicsFriction = _impostor.getParam(\"friction\");\n            serializationInstance.physicsRestitution = _impostor.getParam(\"mass\");\n            serializationInstance.physicsImpostor = _impostor.type;\n          }\n        }\n        // Metadata\n        if (instance.metadata) {\n          serializationInstance.metadata = instance.metadata;\n        }\n        serializationObject.instances.push(serializationInstance);\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\n        serializationInstance.ranges = instance.serializeAnimationRanges();\n      }\n      // Thin instances\n      if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\n        serializationObject.thinInstances = {\n          instancesCount: this._thinInstanceDataStorage.instancesCount,\n          matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\n          matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\n          enablePicking: this.thinInstanceEnablePicking\n        };\n        if (this._userThinInstanceBuffersStorage) {\n          var userThinInstance = {\n            data: {},\n            sizes: {},\n            strides: {}\n          };\n          for (var kind in this._userThinInstanceBuffersStorage.data) {\n            userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\n            userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\n            userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\n          }\n          serializationObject.thinInstances.userThinInstance = userThinInstance;\n        }\n      }\n      // Animations\n      SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n      serializationObject.ranges = this.serializeAnimationRanges();\n      // Layer mask\n      serializationObject.layerMask = this.layerMask;\n      // Alpha\n      serializationObject.alphaIndex = this.alphaIndex;\n      serializationObject.hasVertexAlpha = this.hasVertexAlpha;\n      // Overlay\n      serializationObject.overlayAlpha = this.overlayAlpha;\n      serializationObject.overlayColor = this.overlayColor.asArray();\n      serializationObject.renderOverlay = this.renderOverlay;\n      // Fog\n      serializationObject.applyFog = this.applyFog;\n      // Action Manager\n      if (this.actionManager) {\n        serializationObject.actions = this.actionManager.serialize(this.name);\n      }\n      return serializationObject;\n    }\n    /** @internal */\n  }, {\n    key: \"_syncGeometryWithMorphTargetManager\",\n    value: function _syncGeometryWithMorphTargetManager() {\n      if (!this.geometry) {\n        return;\n      }\n      this._markSubMeshesAsAttributesDirty();\n      var morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\n      if (morphTargetManager && morphTargetManager.vertexCount) {\n        if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\n          Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\n          this.morphTargetManager = null;\n          return;\n        }\n        if (morphTargetManager.isUsingTextureForTargets) {\n          return;\n        }\n        for (var index = 0; index < morphTargetManager.numInfluencers; index++) {\n          var morphTarget = morphTargetManager.getActiveTarget(index);\n          var positions = morphTarget.getPositions();\n          if (!positions) {\n            Logger.Error(\"Invalid morph target. Target must have positions.\");\n            return;\n          }\n          this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\n          var normals = morphTarget.getNormals();\n          if (normals) {\n            this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\n          }\n          var tangents = morphTarget.getTangents();\n          if (tangents) {\n            this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\n          }\n          var uvs = morphTarget.getUVs();\n          if (uvs) {\n            this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\n          }\n        }\n      } else {\n        var _index2 = 0;\n        // Positions\n        while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + _index2)) {\n          this.geometry.removeVerticesData(VertexBuffer.PositionKind + _index2);\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.NormalKind + _index2);\n          }\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.TangentKind + _index2);\n          }\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + _index2);\n          }\n          _index2++;\n        }\n      }\n    }\n    /**\n     * Returns a new Mesh object parsed from the source provided.\n     * @param parsedMesh is the source\n     * @param scene defines the hosting scene\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\n     * @returns a new Mesh\n     */\n  }, {\n    key: \"setPositionsForCPUSkinning\",\n    value:\n    // Skeletons\n    /**\n     * Prepare internal position array for software CPU skinning\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\n     */\n    function setPositionsForCPUSkinning() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourcePositions) {\n        var source = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!source) {\n          return internalDataInfo._sourcePositions;\n        }\n        internalDataInfo._sourcePositions = new Float32Array(source);\n        if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\n          this.setVerticesData(VertexBuffer.PositionKind, source, true);\n        }\n      }\n      return internalDataInfo._sourcePositions;\n    }\n    /**\n     * Prepare internal normal array for software CPU skinning\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\n     */\n  }, {\n    key: \"setNormalsForCPUSkinning\",\n    value: function setNormalsForCPUSkinning() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourceNormals) {\n        var source = this.getVerticesData(VertexBuffer.NormalKind);\n        if (!source) {\n          return internalDataInfo._sourceNormals;\n        }\n        internalDataInfo._sourceNormals = new Float32Array(source);\n        if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\n          this.setVerticesData(VertexBuffer.NormalKind, source, true);\n        }\n      }\n      return internalDataInfo._sourceNormals;\n    }\n    /**\n     * Updates the vertex buffer by applying transformation from the bones\n     * @param skeleton defines the skeleton to apply to current mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"applySkeleton\",\n    value: function applySkeleton(skeleton) {\n      if (!this.geometry) {\n        return this;\n      }\n      if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\n        return this;\n      }\n      this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n        return this;\n      }\n      if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\n        return this;\n      }\n      if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n        return this;\n      }\n      var hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourcePositions) {\n        var submeshes = this.subMeshes.slice();\n        this.setPositionsForCPUSkinning();\n        this.subMeshes = submeshes;\n      }\n      if (hasNormals && !internalDataInfo._sourceNormals) {\n        this.setNormalsForCPUSkinning();\n      }\n      // positionsData checks for not being Float32Array will only pass at most once\n      var positionsData = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positionsData) {\n        return this;\n      }\n      if (!(positionsData instanceof Float32Array)) {\n        positionsData = new Float32Array(positionsData);\n      }\n      // normalsData checks for not being Float32Array will only pass at most once\n      var normalsData = this.getVerticesData(VertexBuffer.NormalKind);\n      if (hasNormals) {\n        if (!normalsData) {\n          return this;\n        }\n        if (!(normalsData instanceof Float32Array)) {\n          normalsData = new Float32Array(normalsData);\n        }\n      }\n      var matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n      var matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      if (!matricesWeightsData || !matricesIndicesData) {\n        return this;\n      }\n      var needExtras = this.numBoneInfluencers > 4;\n      var matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\n      var matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\n      var skeletonMatrices = skeleton.getTransformMatrices(this);\n      var tempVector3 = Vector3.Zero();\n      var finalMatrix = new Matrix();\n      var tempMatrix = new Matrix();\n      var matWeightIdx = 0;\n      var inf;\n      for (var index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\n        var weight = void 0;\n        for (inf = 0; inf < 4; inf++) {\n          weight = matricesWeightsData[matWeightIdx + inf];\n          if (weight > 0) {\n            Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\n            finalMatrix.addToSelf(tempMatrix);\n          }\n        }\n        if (needExtras) {\n          for (inf = 0; inf < 4; inf++) {\n            weight = matricesWeightsExtraData[matWeightIdx + inf];\n            if (weight > 0) {\n              Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData[matWeightIdx + inf] * 16), weight, tempMatrix);\n              finalMatrix.addToSelf(tempMatrix);\n            }\n          }\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(internalDataInfo._sourcePositions[index], internalDataInfo._sourcePositions[index + 1], internalDataInfo._sourcePositions[index + 2], finalMatrix, tempVector3);\n        tempVector3.toArray(positionsData, index);\n        if (hasNormals) {\n          Vector3.TransformNormalFromFloatsToRef(internalDataInfo._sourceNormals[index], internalDataInfo._sourceNormals[index + 1], internalDataInfo._sourceNormals[index + 2], finalMatrix, tempVector3);\n          tempVector3.toArray(normalsData, index);\n        }\n        finalMatrix.reset();\n      }\n      this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\n      if (hasNormals) {\n        this.updateVerticesData(VertexBuffer.NormalKind, normalsData);\n      }\n      return this;\n    }\n    // Tools\n    /**\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\n     * @param meshes defines the list of meshes to scan\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\n     */\n  }, {\n    key: \"addInstance\",\n    value:\n    /**\n     * @internal\n     */\n    function addInstance(instance) {\n      instance._indexInSourceMeshInstanceArray = this.instances.length;\n      this.instances.push(instance);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"removeInstance\",\n    value: function removeInstance(instance) {\n      // Remove from mesh\n      var index = instance._indexInSourceMeshInstanceArray;\n      if (index != -1) {\n        if (index !== this.instances.length - 1) {\n          var last = this.instances[this.instances.length - 1];\n          this.instances[index] = last;\n          last._indexInSourceMeshInstanceArray = index;\n        }\n        instance._indexInSourceMeshInstanceArray = -1;\n        this.instances.pop();\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_shouldConvertRHS\",\n    value: function _shouldConvertRHS() {\n      return this.overrideMaterialSideOrientation === Material.CounterClockWiseSideOrientation;\n    }\n  }], [{\n    key: \"_GetDefaultSideOrientation\",\n    value: function _GetDefaultSideOrientation(orientation) {\n      return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\n    }\n  }, {\n    key: \"_instancedMeshFactory\",\n    value: function _instancedMeshFactory(name, mesh) {\n      throw _WarnImport(\"InstancedMesh\");\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"_PhysicsImpostorParser\",\n    value: function _PhysicsImpostorParser(scene, physicObject, jsonObject) {\n      throw _WarnImport(\"PhysicsImpostor\");\n    }\n  }, {\n    key: \"Parse\",\n    value: function Parse(parsedMesh, scene, rootUrl) {\n      var mesh;\n      if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\n        mesh = Mesh._LinesMeshParser(parsedMesh, scene);\n      } else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\n        mesh = Mesh._GroundMeshParser(parsedMesh, scene);\n      } else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\n        mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\n      } else {\n        mesh = new Mesh(parsedMesh.name, scene);\n      }\n      mesh.id = parsedMesh.id;\n      mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\n      if (Tags) {\n        Tags.AddTagsTo(mesh, parsedMesh.tags);\n      }\n      mesh.position = Vector3.FromArray(parsedMesh.position);\n      if (parsedMesh.metadata !== undefined) {\n        mesh.metadata = parsedMesh.metadata;\n      }\n      if (parsedMesh.rotationQuaternion) {\n        mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\n      } else if (parsedMesh.rotation) {\n        mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\n      }\n      mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\n      if (parsedMesh.localMatrix) {\n        mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\n      } else if (parsedMesh.pivotMatrix) {\n        mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\n      }\n      mesh.setEnabled(parsedMesh.isEnabled);\n      mesh.isVisible = parsedMesh.isVisible;\n      mesh.infiniteDistance = parsedMesh.infiniteDistance;\n      mesh.showBoundingBox = parsedMesh.showBoundingBox;\n      mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\n      if (parsedMesh.applyFog !== undefined) {\n        mesh.applyFog = parsedMesh.applyFog;\n      }\n      if (parsedMesh.pickable !== undefined) {\n        mesh.isPickable = parsedMesh.pickable;\n      }\n      if (parsedMesh.alphaIndex !== undefined) {\n        mesh.alphaIndex = parsedMesh.alphaIndex;\n      }\n      mesh.receiveShadows = parsedMesh.receiveShadows;\n      if (parsedMesh.billboardMode !== undefined) {\n        mesh.billboardMode = parsedMesh.billboardMode;\n      }\n      if (parsedMesh.visibility !== undefined) {\n        mesh.visibility = parsedMesh.visibility;\n      }\n      mesh.checkCollisions = parsedMesh.checkCollisions;\n      mesh.overrideMaterialSideOrientation = parsedMesh.overrideMaterialSideOrientation;\n      if (parsedMesh.isBlocker !== undefined) {\n        mesh.isBlocker = parsedMesh.isBlocker;\n      }\n      mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\n      // freezeWorldMatrix\n      if (parsedMesh.freezeWorldMatrix) {\n        mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\n      }\n      // Parent\n      if (parsedMesh.parentId !== undefined) {\n        mesh._waitingParentId = parsedMesh.parentId;\n      }\n      if (parsedMesh.parentInstanceIndex !== undefined) {\n        mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\n      }\n      // Actions\n      if (parsedMesh.actions !== undefined) {\n        mesh._waitingData.actions = parsedMesh.actions;\n      }\n      // Overlay\n      if (parsedMesh.overlayAlpha !== undefined) {\n        mesh.overlayAlpha = parsedMesh.overlayAlpha;\n      }\n      if (parsedMesh.overlayColor !== undefined) {\n        mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\n      }\n      if (parsedMesh.renderOverlay !== undefined) {\n        mesh.renderOverlay = parsedMesh.renderOverlay;\n      }\n      // Geometry\n      mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\n      mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\n      if (parsedMesh.delayLoadingFile) {\n        mesh.delayLoadState = 4;\n        mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\n        mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\n        if (parsedMesh._binaryInfo) {\n          mesh._binaryInfo = parsedMesh._binaryInfo;\n        }\n        mesh._delayInfo = [];\n        if (parsedMesh.hasUVs) {\n          mesh._delayInfo.push(VertexBuffer.UVKind);\n        }\n        if (parsedMesh.hasUVs2) {\n          mesh._delayInfo.push(VertexBuffer.UV2Kind);\n        }\n        if (parsedMesh.hasUVs3) {\n          mesh._delayInfo.push(VertexBuffer.UV3Kind);\n        }\n        if (parsedMesh.hasUVs4) {\n          mesh._delayInfo.push(VertexBuffer.UV4Kind);\n        }\n        if (parsedMesh.hasUVs5) {\n          mesh._delayInfo.push(VertexBuffer.UV5Kind);\n        }\n        if (parsedMesh.hasUVs6) {\n          mesh._delayInfo.push(VertexBuffer.UV6Kind);\n        }\n        if (parsedMesh.hasColors) {\n          mesh._delayInfo.push(VertexBuffer.ColorKind);\n        }\n        if (parsedMesh.hasMatricesIndices) {\n          mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\n        }\n        if (parsedMesh.hasMatricesWeights) {\n          mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\n        }\n        mesh._delayLoadingFunction = Geometry._ImportGeometry;\n        if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\n          mesh._checkDelayState();\n        }\n      } else {\n        Geometry._ImportGeometry(parsedMesh, mesh);\n      }\n      // Material\n      if (parsedMesh.materialUniqueId) {\n        mesh._waitingMaterialId = parsedMesh.materialUniqueId;\n      } else if (parsedMesh.materialId) {\n        mesh._waitingMaterialId = parsedMesh.materialId;\n      }\n      // Morph targets\n      if (parsedMesh.morphTargetManagerId > -1) {\n        mesh.morphTargetManager = scene.getMorphTargetManagerById(parsedMesh.morphTargetManagerId);\n      }\n      // Skeleton\n      if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\n        mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\n        if (parsedMesh.numBoneInfluencers) {\n          mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\n        }\n      }\n      // Animations\n      if (parsedMesh.animations) {\n        for (var animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\n          var parsedAnimation = parsedMesh.animations[animationIndex];\n          var internalClass = GetClass(\"BABYLON.Animation\");\n          if (internalClass) {\n            mesh.animations.push(internalClass.Parse(parsedAnimation));\n          }\n        }\n        Node.ParseAnimationRanges(mesh, parsedMesh, scene);\n      }\n      if (parsedMesh.autoAnimate) {\n        scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\n      }\n      // Layer Mask\n      if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\n        mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\n      } else {\n        mesh.layerMask = 0x0fffffff;\n      }\n      // Physics\n      if (parsedMesh.physicsImpostor) {\n        Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\n      }\n      // Levels\n      if (parsedMesh.lodMeshIds) {\n        mesh._waitingData.lods = {\n          ids: parsedMesh.lodMeshIds,\n          distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\n          coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null\n        };\n      }\n      // Instances\n      if (parsedMesh.instances) {\n        for (var index = 0; index < parsedMesh.instances.length; index++) {\n          var parsedInstance = parsedMesh.instances[index];\n          var instance = mesh.createInstance(parsedInstance.name);\n          if (parsedInstance.id) {\n            instance.id = parsedInstance.id;\n          }\n          if (Tags) {\n            if (parsedInstance.tags) {\n              Tags.AddTagsTo(instance, parsedInstance.tags);\n            } else {\n              Tags.AddTagsTo(instance, parsedMesh.tags);\n            }\n          }\n          instance.position = Vector3.FromArray(parsedInstance.position);\n          if (parsedInstance.metadata !== undefined) {\n            instance.metadata = parsedInstance.metadata;\n          }\n          if (parsedInstance.parentId !== undefined) {\n            instance._waitingParentId = parsedInstance.parentId;\n          }\n          if (parsedInstance.parentInstanceIndex !== undefined) {\n            instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\n          }\n          if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\n            instance.setEnabled(parsedInstance.isEnabled);\n          }\n          if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\n            instance.isVisible = parsedInstance.isVisible;\n          }\n          if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\n            instance.isPickable = parsedInstance.isPickable;\n          }\n          if (parsedInstance.rotationQuaternion) {\n            instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\n          } else if (parsedInstance.rotation) {\n            instance.rotation = Vector3.FromArray(parsedInstance.rotation);\n          }\n          instance.scaling = Vector3.FromArray(parsedInstance.scaling);\n          if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\n            instance.checkCollisions = parsedInstance.checkCollisions;\n          }\n          if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\n            instance.isPickable = parsedInstance.pickable;\n          }\n          if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\n            instance.showBoundingBox = parsedInstance.showBoundingBox;\n          }\n          if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n            instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\n          }\n          if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n            instance.alphaIndex = parsedInstance.alphaIndex;\n          }\n          // Physics\n          if (parsedInstance.physicsImpostor) {\n            Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\n          }\n          // Animation\n          if (parsedInstance.animations) {\n            for (var _animationIndex = 0; _animationIndex < parsedInstance.animations.length; _animationIndex++) {\n              var _parsedAnimation = parsedInstance.animations[_animationIndex];\n              var _internalClass = GetClass(\"BABYLON.Animation\");\n              if (_internalClass) {\n                instance.animations.push(_internalClass.Parse(_parsedAnimation));\n              }\n            }\n            Node.ParseAnimationRanges(instance, parsedInstance, scene);\n            if (parsedInstance.autoAnimate) {\n              scene.beginAnimation(instance, parsedInstance.autoAnimateFrom, parsedInstance.autoAnimateTo, parsedInstance.autoAnimateLoop, parsedInstance.autoAnimateSpeed || 1.0);\n            }\n          }\n        }\n      }\n      // Thin instances\n      if (parsedMesh.thinInstances) {\n        var thinInstances = parsedMesh.thinInstances;\n        mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\n        if (thinInstances.matrixData) {\n          mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\n          mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n          mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\n        } else {\n          mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n        }\n        if (parsedMesh.thinInstances.userThinInstance) {\n          var userThinInstance = parsedMesh.thinInstances.userThinInstance;\n          for (var kind in userThinInstance.data) {\n            mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\n            mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\n          }\n        }\n      }\n      return mesh;\n    }\n  }, {\n    key: \"MinMax\",\n    value: function MinMax(meshes) {\n      var minVector = null;\n      var maxVector = null;\n      meshes.forEach(function (mesh) {\n        var boundingInfo = mesh.getBoundingInfo();\n        var boundingBox = boundingInfo.boundingBox;\n        if (!minVector || !maxVector) {\n          minVector = boundingBox.minimumWorld;\n          maxVector = boundingBox.maximumWorld;\n        } else {\n          minVector.minimizeInPlace(boundingBox.minimumWorld);\n          maxVector.maximizeInPlace(boundingBox.maximumWorld);\n        }\n      });\n      if (!minVector || !maxVector) {\n        return {\n          min: Vector3.Zero(),\n          max: Vector3.Zero()\n        };\n      }\n      return {\n        min: minVector,\n        max: maxVector\n      };\n    }\n    /**\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\n     * @returns a vector3\n     */\n  }, {\n    key: \"Center\",\n    value: function Center(meshesOrMinMaxVector) {\n      var minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\n      return Vector3.Center(minMaxVector.min, minMaxVector.max);\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n  }, {\n    key: \"MergeMeshes\",\n    value: function MergeMeshes(meshes) {\n      var disposeSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var allow32BitsIndices = arguments.length > 2 ? arguments[2] : undefined;\n      var meshSubclass = arguments.length > 3 ? arguments[3] : undefined;\n      var subdivideWithSubMeshes = arguments.length > 4 ? arguments[4] : undefined;\n      var multiMultiMaterials = arguments.length > 5 ? arguments[5] : undefined;\n      return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n  }, {\n    key: \"MergeMeshesAsync\",\n    value: function MergeMeshesAsync(meshes) {\n      var disposeSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var allow32BitsIndices = arguments.length > 2 ? arguments[2] : undefined;\n      var meshSubclass = arguments.length > 3 ? arguments[3] : undefined;\n      var subdivideWithSubMeshes = arguments.length > 4 ? arguments[4] : undefined;\n      var multiMultiMaterials = arguments.length > 5 ? arguments[5] : undefined;\n      return runCoroutineAsync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true), createYieldingScheduler());\n    }\n  }, {\n    key: \"_MergeMeshesCoroutine\",\n    value: function _MergeMeshesCoroutine(meshes) {\n      var disposeSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var allow32BitsIndices = arguments.length > 2 ? arguments[2] : undefined;\n      var meshSubclass = arguments.length > 3 ? arguments[3] : undefined;\n      var subdivideWithSubMeshes = arguments.length > 4 ? arguments[4] : undefined;\n      var multiMultiMaterials = arguments.length > 5 ? arguments[5] : undefined;\n      var isAsync = arguments.length > 6 ? arguments[6] : undefined;\n      return /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var index, totalVertices, materialArray, materialIndexArray, indiceArray, currentOverrideMaterialSideOrientation, mesh, material, matIndex, subIndex, _subIndex, _subIndex2, source, getVertexDataFromMesh, _getVertexDataFromMes, _getVertexDataFromMes2, sourceVertexData, sourceTransform, meshVertexDatas, i, mergeCoroutine, mergeCoroutineStep, vertexData, applyToCoroutine, applyToCoroutineStep, offset, _iterator11, _step12, subMesh, newMultiMaterial, _subIndex3;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Remove any null/undefined entries from the mesh array\n              meshes = meshes.filter(Boolean);\n              if (!(meshes.length === 0)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 3:\n              if (allow32BitsIndices) {\n                _context.next = 14;\n                break;\n              }\n              totalVertices = 0; // Counting vertices\n              index = 0;\n            case 6:\n              if (!(index < meshes.length)) {\n                _context.next = 14;\n                break;\n              }\n              totalVertices += meshes[index].getTotalVertices();\n              if (!(totalVertices >= 65536)) {\n                _context.next = 11;\n                break;\n              }\n              Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\n              return _context.abrupt(\"return\", null);\n            case 11:\n              index++;\n              _context.next = 6;\n              break;\n            case 14:\n              if (multiMultiMaterials) {\n                subdivideWithSubMeshes = false;\n              }\n              materialArray = new Array();\n              materialIndexArray = new Array(); // Merge\n              indiceArray = new Array();\n              currentOverrideMaterialSideOrientation = meshes[0].overrideMaterialSideOrientation;\n              index = 0;\n            case 20:\n              if (!(index < meshes.length)) {\n                _context.next = 33;\n                break;\n              }\n              mesh = meshes[index];\n              if (!mesh.isAnInstance) {\n                _context.next = 25;\n                break;\n              }\n              Logger.Warn(\"Cannot merge instance meshes.\");\n              return _context.abrupt(\"return\", null);\n            case 25:\n              if (!(currentOverrideMaterialSideOrientation !== mesh.overrideMaterialSideOrientation)) {\n                _context.next = 28;\n                break;\n              }\n              Logger.Warn(\"Cannot merge meshes with different overrideMaterialSideOrientation values.\");\n              return _context.abrupt(\"return\", null);\n            case 28:\n              if (subdivideWithSubMeshes) {\n                indiceArray.push(mesh.getTotalIndices());\n              }\n              if (multiMultiMaterials) {\n                if (mesh.material) {\n                  material = mesh.material;\n                  if (material instanceof MultiMaterial) {\n                    for (matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\n                      if (materialArray.indexOf(material.subMaterials[matIndex]) < 0) {\n                        materialArray.push(material.subMaterials[matIndex]);\n                      }\n                    }\n                    for (subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                      materialIndexArray.push(materialArray.indexOf(material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\n                      indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                    }\n                  } else {\n                    if (materialArray.indexOf(material) < 0) {\n                      materialArray.push(material);\n                    }\n                    for (_subIndex = 0; _subIndex < mesh.subMeshes.length; _subIndex++) {\n                      materialIndexArray.push(materialArray.indexOf(material));\n                      indiceArray.push(mesh.subMeshes[_subIndex].indexCount);\n                    }\n                  }\n                } else {\n                  for (_subIndex2 = 0; _subIndex2 < mesh.subMeshes.length; _subIndex2++) {\n                    materialIndexArray.push(0);\n                    indiceArray.push(mesh.subMeshes[_subIndex2].indexCount);\n                  }\n                }\n              }\n            case 30:\n              index++;\n              _context.next = 20;\n              break;\n            case 33:\n              source = meshes[0];\n              getVertexDataFromMesh = function getVertexDataFromMesh(mesh) {\n                var wm = mesh.computeWorldMatrix(true);\n                var vertexData = VertexData.ExtractFromMesh(mesh, false, false);\n                return [vertexData, wm];\n              };\n              _getVertexDataFromMes = getVertexDataFromMesh(source), _getVertexDataFromMes2 = _slicedToArray(_getVertexDataFromMes, 2), sourceVertexData = _getVertexDataFromMes2[0], sourceTransform = _getVertexDataFromMes2[1];\n              if (!isAsync) {\n                _context.next = 39;\n                break;\n              }\n              _context.next = 39;\n              return;\n            case 39:\n              meshVertexDatas = new Array(meshes.length - 1);\n              i = 1;\n            case 41:\n              if (!(i < meshes.length)) {\n                _context.next = 49;\n                break;\n              }\n              meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\n              if (!isAsync) {\n                _context.next = 46;\n                break;\n              }\n              _context.next = 46;\n              return;\n            case 46:\n              i++;\n              _context.next = 41;\n              break;\n            case 49:\n              mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\n              mergeCoroutineStep = mergeCoroutine.next();\n            case 51:\n              if (mergeCoroutineStep.done) {\n                _context.next = 58;\n                break;\n              }\n              if (!isAsync) {\n                _context.next = 55;\n                break;\n              }\n              _context.next = 55;\n              return;\n            case 55:\n              mergeCoroutineStep = mergeCoroutine.next();\n              _context.next = 51;\n              break;\n            case 58:\n              vertexData = mergeCoroutineStep.value;\n              if (!meshSubclass) {\n                meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\n              }\n              applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\n              applyToCoroutineStep = applyToCoroutine.next();\n            case 62:\n              if (applyToCoroutineStep.done) {\n                _context.next = 69;\n                break;\n              }\n              if (!isAsync) {\n                _context.next = 66;\n                break;\n              }\n              _context.next = 66;\n              return;\n            case 66:\n              applyToCoroutineStep = applyToCoroutine.next();\n              _context.next = 62;\n              break;\n            case 69:\n              // Setting properties\n              meshSubclass.checkCollisions = source.checkCollisions;\n              meshSubclass.overrideMaterialSideOrientation = source.overrideMaterialSideOrientation;\n              // Cleaning\n              if (disposeSource) {\n                for (index = 0; index < meshes.length; index++) {\n                  meshes[index].dispose();\n                }\n              }\n              // Subdivide\n              if (subdivideWithSubMeshes || multiMultiMaterials) {\n                //-- removal of global submesh\n                meshSubclass.releaseSubMeshes();\n                index = 0;\n                offset = 0; //-- apply subdivision according to index table\n                while (index < indiceArray.length) {\n                  SubMesh.CreateFromIndices(0, offset, indiceArray[index], meshSubclass, undefined, false);\n                  offset += indiceArray[index];\n                  index++;\n                }\n                _iterator11 = _createForOfIteratorHelper(meshSubclass.subMeshes);\n                try {\n                  for (_iterator11.s(); !(_step12 = _iterator11.n()).done;) {\n                    subMesh = _step12.value;\n                    subMesh.refreshBoundingInfo();\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n                meshSubclass.computeWorldMatrix(true);\n              }\n              if (multiMultiMaterials) {\n                newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\n                newMultiMaterial.subMaterials = materialArray;\n                for (_subIndex3 = 0; _subIndex3 < meshSubclass.subMeshes.length; _subIndex3++) {\n                  meshSubclass.subMeshes[_subIndex3].materialIndex = materialIndexArray[_subIndex3];\n                }\n                meshSubclass.material = newMultiMaterial;\n              } else {\n                meshSubclass.material = source.material;\n              }\n              return _context.abrupt(\"return\", meshSubclass);\n            case 75:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })();\n    }\n  }]);\n  return Mesh;\n}(AbstractMesh);\n// Consts\n/**\n * Mesh side orientation : usually the external or front surface\n */\nMesh.FRONTSIDE = VertexData.FRONTSIDE;\n/**\n * Mesh side orientation : usually the internal or back surface\n */\nMesh.BACKSIDE = VertexData.BACKSIDE;\n/**\n * Mesh side orientation : both internal and external or front and back surfaces\n */\nMesh.DOUBLESIDE = VertexData.DOUBLESIDE;\n/**\n * Mesh side orientation : by default, `FRONTSIDE`\n */\nMesh.DEFAULTSIDE = VertexData.DEFAULTSIDE;\n/**\n * Mesh cap setting : no cap\n */\nMesh.NO_CAP = 0;\n/**\n * Mesh cap setting : one cap at the beginning of the mesh\n */\nMesh.CAP_START = 1;\n/**\n * Mesh cap setting : one cap at the end of the mesh\n */\nMesh.CAP_END = 2;\n/**\n * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\n */\nMesh.CAP_ALL = 3;\n/**\n * Mesh pattern setting : no flip or rotate\n */\nMesh.NO_FLIP = 0;\n/**\n * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\n */\nMesh.FLIP_TILE = 1;\n/**\n * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\n */\nMesh.ROTATE_TILE = 2;\n/**\n * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\n */\nMesh.FLIP_ROW = 3;\n/**\n * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\n */\nMesh.ROTATE_ROW = 4;\n/**\n * Mesh pattern setting : flip and rotate alternate tiles on each row or column\n */\nMesh.FLIP_N_ROTATE_TILE = 5;\n/**\n * Mesh pattern setting : rotate pattern and rotate\n */\nMesh.FLIP_N_ROTATE_ROW = 6;\n/**\n * Mesh tile positioning : part tiles same on left/right or top/bottom\n */\nMesh.CENTER = 0;\n/**\n * Mesh tile positioning : part tiles on left\n */\nMesh.LEFT = 1;\n/**\n * Mesh tile positioning : part tiles on right\n */\nMesh.RIGHT = 2;\n/**\n * Mesh tile positioning : part tiles on top\n */\nMesh.TOP = 3;\n/**\n * Mesh tile positioning : part tiles on bottom\n */\nMesh.BOTTOM = 4;\n/**\n * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\n */\nMesh.INSTANCEDMESH_SORT_TRANSPARENT = false;\n// Statics\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._GroundMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"GroundMesh\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._GoldbergMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"GoldbergMesh\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._LinesMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"LinesMesh\");\n};\nRegisterClass(\"BABYLON.Mesh\", Mesh);\n/**\n * @internal\n */\nMesh.prototype.setMaterialByID = function (id) {\n  return this.setMaterialById(id);\n};\nMesh.CreateDisc = Mesh.CreateDisc || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateBox = Mesh.CreateBox || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateSphere = Mesh.CreateSphere || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateCylinder = Mesh.CreateCylinder || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTorusKnot = Mesh.CreateTorusKnot || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTorus = Mesh.CreateTorus || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreatePlane = Mesh.CreatePlane || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateGround = Mesh.CreateGround || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTiledGround = Mesh.CreateTiledGround || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateGroundFromHeightMap = Mesh.CreateGroundFromHeightMap || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTube = Mesh.CreateTube || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreatePolyhedron = Mesh.CreatePolyhedron || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateIcoSphere = Mesh.CreateIcoSphere || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateDecal = Mesh.CreateDecal || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateCapsule = Mesh.CreateCapsule || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.ExtendToGoldberg = Mesh.ExtendToGoldberg || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","_unsupportedIterableToArray","length","i","F","s","done","value","e","_e2","f","TypeError","err","normalCompletion","didErr","step","next","_e3","return","arr","len","arr2","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","NewTarget","this","arguments","apply","_CreationDataStorage","_InstanceDataStorage","visibleInstances","batchCache","_InstancesBatch","batchCacheReplacementModeInFrozenMode","instancesBufferSize","mustReturn","renderSelf","hardwareInstancedRendering","_ThinInstanceDataStorage","instancesCount","matrixBuffer","previousMatrixBuffer","matrixBufferSize","matrixData","boundingVectors","worldMatrices","_InternalMeshDataInfo","_areNormalsFrozen","_source","meshMap","_preActivateId","_LODLevels","_useLODScreenCoverage","_effectiveMaterial","_forcedInstanceCount","Mesh","_AbstractMesh","_super","_this","scene","undefined","parent","source","doNotCloneChildren","clonePhysicsImpostor","_internalMeshDataInfo","delayLoadState","instances","_creationDataStorage","_geometry","_instanceDataStorage","_thinInstanceDataStorage","_shouldGenerateFlatShading","_originalBuilderSideOrientation","DEFAULTSIDE","overrideMaterialSideOrientation","ignoreCameraMaxZ","getScene","_onBeforeDraw","isInstance","world","effectiveMaterial","_uniformBuffer","transferToEffect","bindOnlyWorldMatrix","applyToMesh","useClonedMeshMap","uniqueId","_ranges","ranges","_name","hasOwnProperty","createAnimationRange","to","metadata","clone","setEnabled","isEnabled","setPivotMatrix","getPivotMatrix","id","material","directDescendants","getDescendants","index","child","morphTargetManager","getPhysicsEngine","physicsEngine","getPluginVersion","impostor","getImpostorForPhysicsObject","physicsImpostor","_index","particleSystems","system","emitter","skeleton","refreshBoundingInfo","computeWorldMatrix","getEngine","getCaps","instancedArrays","_onMeshReadyObserverAdded","observer","unregisterOnNextCall","isReady","onMeshReadyObservable","notifyObservers","_checkReadinessObserver","_scene","onBeforeRenderObservable","add","remove","onClonedObservable","key","get","set","_sortLODLevels","_internalAbstractMeshDataInfo","_computeBonesUsingShaders","_sourcePositions","setVerticesData","_sourceNormals","_markSubMeshesAsAttributesDirty","_onBeforeRenderObservable","_onBeforeBindObservable","_onAfterRenderObservable","_onBetweenPassObservable","_onBeforeDrawObservable","callback","_onBeforeDrawObserver","onBeforeDrawObservable","_a","count","_unIndexed","instancesData","instancesPreviousData","manualUpdate","previousManualUpdate","forceMatrixUpdates","newParent","options","onNewNodeCreated","instance","getTotalVertices","doNotInstantiate","createInstance","position","scaling","rotationQuaternion","rotation","_step","_iterator","getChildTransformNodes","getClassName","instantiateHierarchy","newSourcedMesh","fullDetails","ret","_waitingParentId","animations","ib","getIndices","vb","getVerticesData","_step2","_iterator2","_unBindEffect","sortingOrderFactor","sort","a","b","distanceOrScreenCoverage","mesh","_masterMesh","level","push","distance","internalDataInfo","splice","camera","boundingSphere","bSphere","getBoundingInfo","distanceToCamera","mode","minZ","centerWorld","subtract","globalPosition","compareValue","compareSign","screenArea","meshArea","radiusWorld","Math","PI","onLODLevelSelection","_checkDelayState","_preActivate","_updateSubMeshesBoundingInfo","worldMatrixFromCache","kind","copyWhenShared","forceCopy","_b","data","_userInstancedBuffersStorage","vertexBuffers","getFloatData","meshes","getVertexBuffer","isVerticesDataPresent","_delayInfo","indexOf","isUpdatable","isVertexBufferUpdatable","forEach","kinds","getVerticesDataKinds","getTotalIndices","_c","_d","_e","_f","completeCheck","forceInstanceSupport","subMeshes","engine","hasThinInstances","mat","defaultMaterial","_storeEffectOnSubMeshes","_step3","_iterator3","subMesh","getMaterial","isReadyForSubMesh","_step4","currentRenderPassId","_iterator4","lightSources","light","generators","getShadowGenerators","values","generator","getShadowMap","renderList","renderPassId","_step6","_iterator6","_subMesh","needAlphaBlendingForMesh","_step5","_iterator5","lod","overridenInstanceCount","sceneRenderId","getRenderId","renderId","intermediateDefaultRenderId","defaultRenderId","selfDefaultRenderId","_renderId","previousRenderId","isFrozen","doNotSyncBoundingInfo","thinInstanceRefreshBoundingInfo","edgesShareWithInstances","edgesRenderer","_renderingGroup","_edgesRenderers","pushNoDuplicate","customInstances","getWorldMatrix","applySkeleton","applyMorph","hasBoundingInfo","isLocked","bias","geometry","boundingBias","_refreshBoundingInfo","_getPositionData","force","totalVertices","totalIndices","needToRecreate","_step7","_iterator7","submesh","indexStart","indexCount","verticesStart","verticesCount","releaseSubMeshes","subdivisionSize","offset","synchronizeInstances","updatable","stride","vertexData","removeVerticesData","buffer","disposeExistingBuffer","setVerticesBuffer","updateExtends","makeItUnique","makeGeometryUnique","updateVerticesData","positionFunction","computeNormals","positions","indices","normals","oldGeometry","copy","releaseForMesh","setIndices","gpuMemoryOnly","updateIndices","toLeftHanded","effect","fillMode","indexToBind","isUsingTextureForTargets","_bind","_getLinesIndexBuffer","getIndexBuffer","vertexArrayObjects","getVertexBuffers","drawArraysType","forcedInstanceCount","drawElementsType","_linesIndexCount","func","removeCallback","onAfterRenderObservable","subMeshId","isReplacementMode","previousBatch","isInIntermediateRendering","_isInIntermediateRendering","onlyForInstances","_onlyForInstancesIntermediate","_onlyForInstances","isVisible","currentRenderId","batch","_id","visibleInstanceCount","instanceStorage","currentInstancesBufferSize","instancesBuffer","instancesPreviousBuffer","bufferSize","Float32Array","needsPreviousWorldMatrices","needUpdateBuffer","masterMeshPreviousWorldMatrix","copyToArray","copyFrom","INSTANCEDMESH_SORT_TRANSPARENT","activeCamera","getRenderingMesh","cameraPosition","instanceIndex","instanceMesh","_distanceToCamera","m1","m2","_instanceIndex","matrix","_previousWorldMatrix","dispose","strides","sizes","vertexArrayObject","createVertexBuffer","_invalidateInstanceVertexArrayObject","updateDirectly","_processInstancedBuffers","_activeIndices","addCount","_currentDrawContext","useInstancing","_draw","unbindInstanceAttributes","previousMatrixData","_thinInstanceCreateMatrixBuffer","renderingMesh","onBeforeDraw","_renderWithThinInstances","_renderWithInstances","instanceCount","visibleInstancesForSubMesh","_getInstancesRenderList","enableAlphaMode","effectiveMeshReplacement","_isActiveIntermediate","_isActive","_checkOcclusionQuery","_occlusionDataStorage","forceRenderingWhenOccluded","oldCameraMaxZ","oldCamera","maxZ","updateTransformMatrix","drawWrapper","getMesh","_actAsRegularMesh","instanceDataStorage","_wasPreviouslyReady","getEffect","setAlphaMode","alphaMode","_step8","_drawWrapper","_getDrawWrapper","_iterator8","_beforeRenderingMeshStage","action","sideOrientation","effectiveMesh","backFaceCulling","mainDeterminant","_getWorldMatrixDeterminant","reverse","_preBind","forceDepthWrite","setDepthWrite","forcePointsCloud","forceWireframe","bindForSubMesh","bind","separateCullingPass","setState","zOffset","cullBackFaces","stencil","zOffsetUnits","_processRendering","unbind","_step9","_iterator9","_afterRenderingMeshStage","performancePriority","_freeze","_normalizeSkinWeightsAndExtra","_normalizeSkinFourWeights","matricesWeights","numWeights","t","recip","matricesWeightsExtra","skinned","valid","report","numberNotSorted","missingWeights","maxUsedWeights","numberNotNormalized","numInfluences","usedWeightCounts","_a2","lastWeight","usedWeights","d","tolerance","_b2","abs","numBones","bones","matricesIndices","matricesIndicesExtra","numBadBoneIndices","_a3","_b3","load","_queueLoad","_this2","addPendingData","getBinaryData","delayLoadingFile","ArrayBuffer","_delayLoadingFunction","JSON","parse","_syncSubMeshes","removePendingData","offlineProvider","frustumPlanes","materials","multiMaterials","results","transform","submeshes","_resetPointsArrayCache","temp","toArray","normalize","determinant","flipFaces","bakeIndependentlyOfChildren","bakeTransformIntoVertices","resetLocalMatrix","_positions","_generatePointsArray","doNotRecurse","disposeMaterialAndTextures","clear","_step11","_iterator10","abstractMesh","_mesh","_disposeInstanceSpecificData","_disposeThinInstanceSpecificData","url","minHeight","maxHeight","onSuccess","uvOffset","uvScale","_this3","forceUpdate","onload","img","heightMapWidth","width","heightMapHeight","height","context","createCanvas","getContext","drawImage","getImageData","applyDisplacementMapFromBuffer","uvs","normal","uv","u","x","v","y","pos","r","g","gradient","scaleInPlace","kindIndex","vbs","newdata","updatableNormals","vertexBuffer","getData","previousSubmeshes","vertexIndex","getStrideSize","flipNormalGeneration","useRightHandedSystem","p1","p2","p3","p1p2","p3p2","localIndex","z","submeshIndex","previousOne","materialIndex","flipNormals","vertex_data","numberPerEdge","currentIndices","segments","tempIndices","uvPtr","normalsPtr","deltaPosition","deltaNormal","deltaUV","side","positionPtr","_i","j","k","idx","_k","_j","_k2","_j2","currentUVs","currentPositions","currentColors","colors","currentMatrixIndices","currentMatrixWeights","currentMatrixIndicesExtra","currentMatrixWeightsExtra","ptr","facet","matrixIndices","matrixWeights","matrixIndicesExtra","matrixWeightsExtra","pstring","indexPtr","uniquePositions","_j3","_k3","_k4","_k5","_k6","_k7","_k8","_k9","_instancedMeshFactory","successCallback","_this4","vectorPositions","dupes","iteration","realPos","testedPosition","againstPosition","equals","originalSubMeshes","serializationObject","type","tags","asArray","_postMultiplyPivotMatrix","pivotMatrix","localMatrix","infiniteDistance","pickable","isPickable","receiveShadows","billboardMode","visibility","checkCollisions","isBlocker","_serializeAsParent","isUnIndexed","geometryUniqueId","geometryId","subIndex","doNotSerialize","materialUniqueId","materialId","morphTargetManagerId","skeletonId","numBoneInfluencers","_getComponent","getPhysicsImpostor","physicsMass","getParam","physicsFriction","physicsRestitution","serializationInstance","_impostor","serializeAnimationRanges","thinInstances","enablePicking","thinInstanceEnablePicking","_userThinInstanceBuffersStorage","userThinInstance","layerMask","alphaIndex","hasVertexAlpha","overlayAlpha","overlayColor","renderOverlay","applyFog","actionManager","actions","serialize","_morphTargetManager","vertexCount","numInfluencers","morphTarget","getActiveTarget","getPositions","getNormals","tangents","getTangents","getUVs","_index2","_softwareSkinningFrameId","getFrameId","hasNormals","setPositionsForCPUSkinning","setNormalsForCPUSkinning","positionsData","normalsData","matricesIndicesData","matricesWeightsData","inf","needExtras","matricesIndicesExtraData","matricesWeightsExtraData","skeletonMatrices","getTransformMatrices","tempVector3","finalMatrix","tempMatrix","matWeightIdx","weight","floor","addToSelf","reset","_indexInSourceMeshInstanceArray","last","pop","orientation","FRONTSIDE","physicObject","jsonObject","parsedMesh","rootUrl","_LinesMeshParser","_GroundMeshParser","_GoldbergMeshParser","_waitingParsedUniqueId","setPreTransformMatrix","showBoundingBox","showSubMeshesBoundingBox","useFlatShading","freezeWorldMatrix","_waitingData","parentId","parentInstanceIndex","_waitingParentInstanceIndex","buildBoundingInfo","boundingBoxMinimum","boundingBoxMaximum","_binaryInfo","hasUVs","hasUVs2","hasUVs3","hasUVs4","hasUVs5","hasUVs6","hasColors","hasMatricesIndices","hasMatricesWeights","_waitingMaterialId","getMorphTargetManagerById","getLastSkeletonById","animationIndex","parsedAnimation","internalClass","Parse","N","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","isNaN","parseInt","_PhysicsImpostorParser","lodMeshIds","lods","ids","distances","lodDistances","coverages","lodCoverages","parsedInstance","_animationIndex","_parsedAnimation","_internalClass","thinInstanceSetBuffer","minVector","maxVector","boundingBox","minimizeInPlace","minimumWorld","maximizeInPlace","maximumWorld","min","max","meshesOrMinMaxVector","minMaxVector","MinMax","disposeSource","allow32BitsIndices","meshSubclass","subdivideWithSubMeshes","multiMultiMaterials","_MergeMeshesCoroutine","isAsync","_callee","materialArray","materialIndexArray","indiceArray","currentOverrideMaterialSideOrientation","matIndex","_subIndex","_subIndex2","getVertexDataFromMesh","_getVertexDataFromMes","_getVertexDataFromMes2","sourceVertexData","sourceTransform","meshVertexDatas","mergeCoroutine","mergeCoroutineStep","applyToCoroutine","applyToCoroutineStep","_iterator11","_step12","newMultiMaterial","_subIndex3","_context","prev","filter","abrupt","isAnInstance","subMaterials","wm","_mergeCoroutine","_applyToCoroutine","stop","BACKSIDE","DOUBLESIDE","NO_CAP","CAP_START","CAP_END","CAP_ALL","NO_FLIP","FLIP_TILE","ROTATE_TILE","FLIP_ROW","ROTATE_ROW","FLIP_N_ROTATE_TILE","FLIP_N_ROTATE_ROW","CENTER","LEFT","RIGHT","TOP","BOTTOM","setMaterialByID","setMaterialById","CreateDisc","Error","CreateBox","CreateSphere","CreateCylinder","CreateTorusKnot","CreateTorus","CreatePlane","CreateGround","CreateTiledGround","CreateGroundFromHeightMap","CreateTube","CreatePolyhedron","CreateIcoSphere","CreateDecal","CreateCapsule","ExtendToGoldberg"],"sourceRoot":""}